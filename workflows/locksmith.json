{
  "active": false,
  "connections": {
    "Проверка типа входных данных": {
      "main": [
        [
          {
            "node": "Проверка медиа",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Проверка типа входных данных",
            "type": "main",
            "index": 0
          },
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка медиа": {
      "main": [
        [
          {
            "node": "статус слесаря1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "статус слесаря",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка старта": {
      "main": [
        [
          {
            "node": "Приветственное сообщений",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Проверка кнопок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки на проверке": {
      "main": [
        [
          {
            "node": "выбор заявки(первая страница)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок для выполнения",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор заявки(первая страница)": {
      "main": [
        [
          {
            "node": "отправляем сообщение 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка кнопок": {
      "main": [
        [
          {
            "node": "Ремонт или ТО",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Удаление прошлого сообщения2": {
      "main": [
        [
          {
            "node": "Удаление прошлого сообщения3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обработка страниц с выбором заявки": {
      "main": [
        [
          {
            "node": "отправляем сообщение 5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "данные сотрудника": {
      "main": [
        [
          {
            "node": "объединяем заявки и сотрудника",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "объединяем заявки и сотрудника": {
      "main": [
        [
          {
            "node": "генерация сообщения для просмотра заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "генерация сообщения для просмотра заявки1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "номер выбранной заявки": {
      "main": [
        [
          {
            "node": "обновим статус на \"в работе\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обновим статус на \"в работе\"": {
      "main": [
        [
          {
            "node": "заявка взята в работу",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "если есть ошибки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявки к выполнению": {
      "main": [
        [
          {
            "node": "Удаление прошлого сообщения2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "неисправности",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "номер выбранной заявки1": {
      "main": [
        [
          {
            "node": "получим актуальный статус заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим актуальный статус заявки": {
      "main": [
        [
          {
            "node": "заявка в работе?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявка в работе?": {
      "main": [
        [
          {
            "node": "нужно вписать часы",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявка уже изменена",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "нужно вписать часы": {
      "main": [
        [
          {
            "node": "обновим статус и номер текущей заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка на число5": {
      "main": [
        [
          {
            "node": "обновляем заявку",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "часы введены неверно2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обновляем заявку": {
      "main": [
        [
          {
            "node": "нужно ли приложить фото?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "если есть ошибки2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "нужно ли приложить фото?": {
      "main": [
        [
          {
            "node": "возвращаем статус2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "завершён процесс заявки1": {
      "main": [
        [
          {
            "node": "меняем на статус отправки фотографии",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "завершён процесс заявки": {
      "main": [
        [
          {
            "node": "убираем номер заявки из пг",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем номер заявки из пг": {
      "main": [
        [
          {
            "node": "поиск механиков1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск механиков1": {
      "main": [
        [
          {
            "node": "поиск тг айди механиков1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск тг айди механиков1": {
      "main": [
        [
          {
            "node": "проверка наличия механиков1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка наличия механиков1": {
      "main": [
        [
          {
            "node": "данные слесаря",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "текст заявки": {
      "main": [
        [
          {
            "node": "Отправка проблемы механикам1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "нужно ли приложить фото?1": {
      "main": [
        [
          {
            "node": "возвращаем статус3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "загрузка фото исправления",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получение фото из тг1": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Фото доставлено2": {
      "main": [
        [
          {
            "node": "меняем статус на обычный",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "меняем статус на обычный": {
      "main": [
        [
          {
            "node": "поиск механиков3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск механиков3": {
      "main": [
        [
          {
            "node": "поиск тг айди механиков3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск тг айди механиков3": {
      "main": [
        [
          {
            "node": "проверка наличия механиков3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка наличия механиков3": {
      "main": [
        [
          {
            "node": "получим актуальный статус заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "загрузка фото исправления": {
      "main": [
        [
          {
            "node": "Фото доставлено2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "статус слесаря1": {
      "main": [
        [
          {
            "node": "убираем кнопку \"назад\" у прикрепления фото",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем кнопку \"назад\" у прикрепления фото": {
      "main": [
        [
          {
            "node": "получение фото из тг1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим актуальный статус заявки1": {
      "main": [
        [
          {
            "node": "данные авто2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "данные авто2": {
      "main": [
        [
          {
            "node": "Отправка проблемы механикам3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "данные слесаря": {
      "main": [
        [
          {
            "node": "текст заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "статус слесаря": {
      "main": [
        [
          {
            "node": "проверка на число5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Проверка старта",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности1": {
      "main": [
        [
          {
            "node": "получим все неисправности3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности3": {
      "main": [
        [
          {
            "node": "Есть ли заявки на проверке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности": {
      "main": [
        [
          {
            "node": "получим все неисправности",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности": {
      "main": [
        [
          {
            "node": "обработка страниц с выбором заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности4": {
      "main": [
        [
          {
            "node": "объединяем заявки и сотрудника",
            "type": "main",
            "index": 0
          },
          {
            "node": "данные сотрудника",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "номер выбранной заявки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "номер выбранной заявки1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "завершён процесс заявки1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "завершён процесс заявки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нужно ли приложить фото?1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "обработка всех заявок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности3": {
      "main": [
        [
          {
            "node": "получим все неисправности9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort1": {
      "main": [
        [
          {
            "node": "выбор авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности4": {
      "main": [
        [
          {
            "node": "получим все неисправности6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort3": {
      "main": [
        [
          {
            "node": "выбор авто1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению1": {
      "main": [
        [
          {
            "node": "Sort1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению2": {
      "main": [
        [
          {
            "node": "Sort3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности10": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению3": {
      "main": [
        [
          {
            "node": "сортируем по дате и срочности",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению4": {
      "main": [
        [
          {
            "node": "сортируем по дате и срочности1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обработка всех заявок": {
      "main": [
        [
          {
            "node": "неисправности3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "неисправности4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ремонт или ТО1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "обработка всех заявок по выбранному авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "находим авто": {
      "main": [
        [
          {
            "node": "неисправности по авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "находим авто1": {
      "main": [
        [
          {
            "node": "неисправности по авто1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности по авто": {
      "main": [
        [
          {
            "node": "получим все неисправности8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности по авто1": {
      "main": [
        [
          {
            "node": "получим все неисправности10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сортируем по дате и срочности": {
      "main": [
        [
          {
            "node": "вывод заявок по авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сортируем по дате и срочности1": {
      "main": [
        [
          {
            "node": "вывод заявок по авто1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "вывод заявок по авто": {
      "main": [
        [
          {
            "node": "отправляем сообщение 13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "вывод заявок по авто1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор авто": {
      "main": [
        [
          {
            "node": "отправляем сообщение 10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор авто1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "генерация сообщения для просмотра заявки": {
      "main": [
        [
          {
            "node": "отправляем сообщение ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "данные сотрудника1": {
      "main": [
        [
          {
            "node": "объединяем заявки и сотрудника1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "объединяем заявки и сотрудника1": {
      "main": [
        [
          {
            "node": "генерация сообщения для просмотра заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности7": {
      "main": [
        [
          {
            "node": "объединяем заявки и сотрудника1",
            "type": "main",
            "index": 0
          },
          {
            "node": "данные сотрудника1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности9": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности6": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности8": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обработка всех заявок по выбранному авто": {
      "main": [
        [
          {
            "node": "находим авто",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "находим авто1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Удаление прошлого сообщения",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Удаление прошлого сообщения": {
      "main": [
        [
          {
            "node": "Удаление прошлого сообщения4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-10-24T03:45:07.253Z",
  "id": "tVImH1eHjZ0c82bP",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "locksmith",
  "nodes": [
    {
      "parameters": {},
      "id": "e0585e63-2a31-4156-b512-f7fdf5cd4926",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        720,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "11c45e0d-196b-47f1-821e-bee57c9f070b",
              "leftValue": "={{ $json.hasField(\"message\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7cefa881-279e-48a4-9e98-3752428148c2",
      "name": "Проверка типа входных данных",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1040,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "2bd61e7b-a58d-4c5d-81d2-ec5f92c0ee0d",
              "leftValue": "={{ $json.message.photo[0].file_unique_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "beb896d6-88c5-4a2c-8278-489d76a2eca6",
              "leftValue": "={{ $json.message.voice.file_unique_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "0228f7b6-101d-46f6-98b3-0fa3b02263be",
              "leftValue": "={{ $json.message.video_note.file_unique_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "0bd83324-348f-4eae-aa8b-5f00ce5638ee",
              "leftValue": "={{ $json.message.video.file_unique_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "e06cb2fe-049e-4313-8176-c3c89dec53e7",
      "name": "Проверка медиа",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1140,
        -780
      ]
    },
    {
      "parameters": {
        "errorMessage": "3333"
      },
      "id": "9d365eb3-a32f-4678-931c-f7dbeb578c4a",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        960,
        600
      ],
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Вы авторизовались как слесарь",
        "replyMarkup": "replyKeyboard",
        "replyKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Заявки на ТО/Ремонт",
                    "additionalFields": {}
                  }
                ]
              }
            }
          ]
        },
        "replyKeyboardOptions": {
          "resize_keyboard": true
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "7b448340-c252-40c6-8c51-b4edbd42043c",
      "name": "Приветственное сообщений",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2460,
        -420
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "content": "## Приветствие и обработка реплай кнопок",
        "height": 559.9850883884588,
        "width": 1669.8027726960586
      },
      "id": "5aa47e74-6d8e-499a-b073-0b26fc11172d",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2100,
        -508.91548710135146
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "={{ \"/start\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "385a0517-cd27-4520-8a42-b1743e43abeb",
      "name": "Проверка старта",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2200,
        -200
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "Заявки на ТО/Ремонт",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "ad8b2d2f-8f21-4985-b6f3-652991147b3d",
      "name": "Проверка кнопок",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2580,
        -180
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности3').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9b1abd91-b12a-471b-8618-36bed9a25229",
      "name": "Есть ли заявки на проверке",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        3120,
        -400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    return {\n        text: `${startIndex + index + 1}. ${carInfo} - ${truncatedDescription}`, // Используем startIndex для правильной нумерации\n        callback_data: `item_${item.json.id}_page_${page}` // Добавляем номер страницы\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"del_maintenances\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.message.from.id;\n\n// Токен бота\nconst token = '7063451965:AAGARL6Eluwh3zgS84WnaZozqdz6-m0RLzg';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/sendMessage`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    text: \"Ваши заявки для выполнения:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки на проверке:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "e43c707e-3420-4da0-93d2-ad84c1425e6b",
      "name": "выбор заявки(первая страница)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3360,
        -460
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "ea93410f-d6fd-4799-b894-30e420748638",
      "name": "отправляем сообщение 1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        3580,
        -460
      ]
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
      },
      "id": "cf0eff2c-f2a3-4f78-bfd0-790452c5f3d1",
      "name": "Удаление прошлого сообщения2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1840,
        1000
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id - 1}}"
      },
      "id": "bd16cd4e-3ec5-46bd-8f1e-e6e1ba928f19",
      "name": "Удаление прошлого сообщения3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2120,
        1000
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "a9ddd101-cb3c-47b1-ae8c-06ce7e45baa8",
      "name": "отправляем сообщение 5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2220,
        1300
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    // Используем startIndex для корректного отображения номера\n    const buttonIndex = startIndex + index + 1;\n\n    return {\n        text: `${buttonIndex}. ${carInfo} - ${truncatedDescription}`,\n        callback_data: `item_${item.json.id}_page_${page}` // Добавляем номер страницы в callback_data\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"del_maintenances\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7063451965:AAGARL6Eluwh3zgS84WnaZozqdz6-m0RLzg';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Ваши заявки для выполнения:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки на проверке:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "31f9bee4-a05a-4b97-9978-3845ecd16e28",
      "name": "обработка страниц с выбором заявки",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        1300
      ],
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Просмотр заявок к выполнению",
        "height": 983.8498497724706,
        "width": 1172.0141081198585
      },
      "id": "79ded336-98ff-4c36-9eb1-8e6e2753954c",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1660,
        860
      ],
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Удаление сообщений",
        "height": 230.02744518719146,
        "width": 496.32687483613483,
        "color": 5
      },
      "id": "65f8e43b-cacd-43d5-ba1b-66e65010e8e6",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1773,
        949
      ],
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Обработка страниц с выбором заявки",
        "height": 230.02744518719146,
        "width": 611.2775867471851,
        "color": 5
      },
      "id": "7c64a43d-d9a3-43e7-b20b-588f9ae8edc9",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1753,
        1229
      ],
      "disabled": true
    },
    {
      "parameters": {
        "content": "## Подробный вывод заявки",
        "height": 311.6467894317699,
        "width": 1065.0613458914934,
        "color": 5
      },
      "id": "131374e6-856f-4e97-b76a-9e0d740d6ab1",
      "name": "Sticky Note20",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1720,
        1500
      ],
      "disabled": true
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.callback_query.data.split('_')[1] }}"
            }
          ]
        }
      },
      "id": "73c51c43-239f-4284-af03-6cfb1786b148",
      "name": "получим все неисправности5",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        3380,
        1480
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_driver_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "driver_id",
              "value": "={{ $json.created_by[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "3ae922c2-6d11-424d-9745-78fe6bb85dcf",
      "name": "данные сотрудника",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2000,
        1680
      ],
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "28a6a760-69a8-4e80-b694-a19f75421c4b",
      "name": "объединяем заявки и сотрудника",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2240,
        1580
      ],
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Получаем данные о колбэке из Execute Workflow Trigger\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nconst callbackData = callbackQuery ? callbackQuery.data : null;\n\n// Проверяем, был ли получен callbackData\nif (!callbackData) {\n    throw new Error(\"Callback data is undefined. Cannot proceed.\");\n}\n\n// Извлекаем message_id из callback_query\nconst messageId = callbackQuery.message.message_id;\n\n// Обработка выбора заявки\nconst selectedMatch = callbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Получаем информацию о выбранной заявке\n    const selectedRequest = items.find(item => item.json.id == itemId);\n    // Извлекаем необходимые данные из JSON\n    const {\n        description_of_maintenance,\n        car_id,\n        created_by,\n        id\n    } = selectedRequest.json;\n\n    const descriptionText = description_of_maintenance === \"Нет описания\" \n        ? `${description_of_maintenance} (Смотреть фото в Odoo)` \n        : description_of_maintenance;\n\n    // Формируем текст сообщения\n    const carName = car_id[1].split(' - ')[0]; // Получаем только номер авто\n\n    // Ищем данные о водителе\n    const driverData = items.find(item => item.json.resource_id && item.json.resource_id[1] === created_by[1]);\n    \n    // Если данные о водителе найдены, извлекаем имя и телефон\n    const name = driverData ? driverData.json.name : 'Неизвестный водитель';\n    const mobile_phone = driverData ? driverData.json.mobile_phone : 'Телефон не указан';\n\n    // Формируем ссылку на заявку в Odoo\n    const odooLink = `https://dev.everest.lamart.site/web#id=${itemId}&model=technical.maintenance&view_type=form`;\n\n    // Полное сообщение\n    const messageText = `У автомобиля: <b>${carName}</b> проблема:\\n\\n` +\n        `<i>${descriptionText}</i>\\n\\n`;\n\n    // Получаем chat_id из callback_query\n    const chatId = callbackQuery.from.id;\n\n    // Токен бота\n    const token = '7063451965:AAGARL6Eluwh3zgS84WnaZozqdz6-m0RLzg';\n\n    // URL для редактирования сообщения через API Telegram\n    const url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n    // Создаем объект с inline-клавиатурой в один столбик\n    const inlineKeyboard = {\n        inline_keyboard: [\n            [\n                { text: \"Взять в работу\", callback_data: `TR_${id}` } // Добавляем ID заявки\n            ],\n            [\n                { text: \"Назад\", callback_data: `page_${returnPage}` } // Устанавливаем номер страницы в колбэк\n            ]\n        ]\n    };\n\n    // Формируем сообщение для редактирования\n    const message = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: messageText,\n        parse_mode: 'HTML', // Указываем, что текст содержит HTML\n        reply_markup: inlineKeyboard // Добавляем inline-клавиатуру\n    };\n\n    // Возвращаем данные для запроса\n    return [\n        {\n            json: {\n                url,\n                message\n            }\n        }\n    ];\n}\n"
      },
      "id": "613da958-396e-404a-b2bc-256467f922a9",
      "name": "генерация сообщения для просмотра заявки1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2460,
        1580
      ],
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "24b1e89e-26b7-4e75-8ca3-1ef15d5ce337",
      "name": "отправляем сообщение 11",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2660,
        1580
      ],
      "disabled": true
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "status",
              "value": "К выполнению"
            },
            {
              "fieldName": "locksmith",
              "value": "={{ $json.odoo_id }}"
            }
          ]
        }
      },
      "id": "e99225ef-0148-42fa-ac04-1e30099fe81f",
      "name": "получим все неисправности2",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        3340,
        1260
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "92ad7c1c-cd84-4fc3-bf35-ca59aedad2a0",
              "name": "TO_number",
              "value": "={{ $('Execute Workflow Trigger').item.json.callback_query.data.substring(3) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "6d3cf325-2ffa-430f-81a8-4bce5ef49133",
      "name": "номер выбранной заявки",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1700,
        2040
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dev.everest.lamart.site/take_maintenance_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"maintenance_id\": {{ $json.TO_number }}\n}",
        "options": {}
      },
      "id": "423ad2f1-42af-4086-a350-484916db3216",
      "name": "обновим статус на \"в работе\"",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1920,
        2040
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Заявка <b>{{ $json.description_of_maintenance }}</b> автомобиля <b>{{ $json.car_id[1].split(' - ')[0] }}</b> взята в работу. Не забудьте отправить заявку на проверку после ремонта.",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Отправить заявку на проверку",
                    "additionalFields": {
                      "callback_data": "={{ \"ER_\"+$json.id }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "a3e6de9e-90ff-493d-bd83-34b57bf4475e",
      "name": "заявка взята в работу",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2160,
        1986
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "=Ошибка Odoo: {{ $json.error }}",
        "additionalFields": {}
      },
      "id": "e86df9cb-de0b-434b-aa29-4fa714e4010b",
      "name": "если есть ошибки",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2160,
        2146
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "del_maintenances",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fe17b5e-971b-414d-b1e2-82872f01feae",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"page_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cab21627-7a55-4569-b357-b424c3905103",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"item_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "54729a5e-1c35-4e94-b9b4-232f9a00f9e7",
      "name": "заявки к выполнению",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1140,
        1320
      ],
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "92ad7c1c-cd84-4fc3-bf35-ca59aedad2a0",
              "name": "TO_number",
              "value": "={{ $('Execute Workflow Trigger').item.json.callback_query.data.substring(3) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "063d07c2-b363-4510-8137-81c4cac62bc4",
      "name": "номер выбранной заявки1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1720,
        2420
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.TO_number }}"
            }
          ]
        }
      },
      "id": "123504e5-2c9c-48ee-b807-50e3b3daee94",
      "name": "получим актуальный статус заявки",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1920,
        2420
      ],
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "fc7e922b-a871-4029-abf2-95687ecdcc6a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "В работе",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "145da568-5c53-440c-99c9-9b05e2af3723",
      "name": "заявка в работе?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2140,
        2420
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Введите число затраченных часов на работу:",
        "additionalFields": {}
      },
      "id": "ac6b9ba1-da8d-4117-8bfa-8ae680693602",
      "name": "нужно вписать часы",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2380,
        2340
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Статус заявки должен быть \"В работе\""
        }
      },
      "id": "39ce84d9-3736-458d-9e25-5c0e844e7857",
      "name": "заявка уже изменена",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2520,
        2480
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "status": "inputing_request_hours",
            "end_request_id": "={{ $('номер выбранной заявки1').item.json.TO_number }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "8ab7b4cf-0c7f-4c55-9079-5d9f29143485",
      "name": "обновим статус и номер текущей заявки",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2680,
        2340
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "44403514-747a-47bf-9419-77944fae7bb7",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.message.text }}",
              "rightValue": "^\\d+(?:[.,]\\d+)?$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ff0ff5a1-2eac-488f-ae95-1a5bd0aa1ef7",
      "name": "проверка на число5",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2360,
        -940
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Часы введены неверно, введите еще раз",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "d84893ea-4eae-42db-9be4-81cac09d9e54",
      "name": "часы введены неверно2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2620,
        -760
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dev.everest.lamart.site/end_maintenance_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"maintenance_id\": {{ $json.end_request_id }},\n    \"hours\": {{ $('Execute Workflow Trigger').item.json.message.text.replace(\",\", \".\") }},\n    \"employee_id\": {{ $json.odoo_id }}\n} ",
        "options": {}
      },
      "id": "3b20b761-c56e-4983-b37f-af4db69dae07",
      "name": "обновляем заявку",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2700,
        -960
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "=Нужно приложить фото исправления?",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "yes_request_photo"
                    }
                  },
                  {
                    "text": "Нет",
                    "additionalFields": {
                      "callback_data": "no_request_photo"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "a6a954ec-4fdf-447a-9f2e-92eca742c794",
      "name": "нужно ли приложить фото?",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2980,
        -980
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.chat_message_id -1}}",
        "text": "=Ошибка Odoo: {{ $json.error }}\n\nВведите количество часов заново",
        "additionalFields": {}
      },
      "id": "61ea5af8-b589-4126-b20d-a12756117548",
      "name": "если есть ошибки2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2980,
        -760
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.result.chat.id }}",
            "status": "authorized",
            "end_request_hours": "={{ $('Execute Workflow Trigger').item.json.message.text.replace(\",\", \".\") }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "ac191e8c-228e-4d7f-b7f6-a6c017e79dcc",
      "name": "возвращаем статус2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3215,
        -980
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Прикрепите фото исправления:",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "back_request_photo"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "8cabdeb2-7772-4e0c-a008-a0b5f903abef",
      "name": "завершён процесс заявки1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1800,
        2780
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.result.chat.id }}",
            "status": "adding_end_request_photo"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "80944cd1-3208-4b29-a73d-3bd73a2cf6cc",
      "name": "меняем на статус отправки фотографии",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2020,
        2780
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "=Заявка выполнена!",
        "additionalFields": {}
      },
      "id": "09723e14-9e85-4c77-b538-5e169777fbfd",
      "name": "завершён процесс заявки",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1800,
        2940
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "end_request_id": "={{ null }}",
            "end_request_hours": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "6a0e2fb9-94a6-43d1-a2bc-529659602210",
      "name": "убираем номер заявки из пг",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2060,
        2940
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "content": "## Механик получает уведомление, когда слесарь завершает заявку",
        "height": 250.48240620104332,
        "width": 1538.2139291185106,
        "color": 5
      },
      "id": "cc4bf1b6-b2d9-45ea-b04e-e726cc822e62",
      "name": "Sticky Note33",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2380,
        2900
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "hr.employee",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": []
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "job_title",
              "value": "Механик"
            }
          ]
        }
      },
      "id": "87541f9f-d82b-4342-8e0c-544b07398a39",
      "name": "поиск механиков1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        2445,
        2959
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "odoo_id",
              "value": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "88951208-f387-4f78-85fb-257d5b6cba99",
      "name": "поиск тг айди механиков1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2640,
        2960
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "40eca1c8-25ce-4538-9aec-0b10b421179f",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a095319a-a8a7-444f-822c-8a1f431d8e9c",
      "name": "проверка наличия механиков1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2865,
        2959
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $('Execute Workflow Trigger').item.json.end_request_id }}"
            }
          ]
        }
      },
      "id": "868a1965-fafc-4a39-af64-4a1481123af2",
      "name": "текст заявки",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        3360,
        2960
      ],
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('поиск тг айди механиков1').item.json.tg_id }}",
        "text": "={{ $json.car_id[1].split(' - ')[0] }} - {{ $('Execute Workflow Trigger').item.json.end_request_hours }} ч. - {{ $json.completed_by[1] }} (Слесарь) - {{ $('текст заявки').item.json.description_of_maintenance }}\n\n<b>Требуется проверить корректность выставленных часов</b>",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Принять заявку✅",
                    "additionalFields": {
                      "callback_data": "={{\"accept_TO_\" + $('Execute Workflow Trigger').item.json.end_request_id }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Отклонить заявку ❌",
                    "additionalFields": {
                      "callback_data": "={{\"reject_TO_\" + $('Execute Workflow Trigger').item.json.end_request_id }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "4ce148ca-59f2-4446-b59c-6a8793f4f9b5",
      "name": "Отправка проблемы механикам1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3620,
        2960
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "content": "## Обработка кнопок для отправки фото завершения заявки",
        "height": 369.7365490265316,
        "width": 579.6907768759479,
        "color": 5
      },
      "id": "16383ca9-e83b-4d88-8c7c-1b80ab29377a",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1660,
        2720
      ]
    },
    {
      "parameters": {
        "content": "## Отмена отправки фото исправления",
        "height": 207.35648349288545,
        "width": 487.077305180272,
        "color": 5
      },
      "id": "17e03a3e-5eab-4cda-b481-c8a14bf4d94b",
      "name": "Sticky Note45",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1720,
        3180
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Нужно приложить фото исправления?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "yes_request_photo"
                    }
                  },
                  {
                    "text": "Нет",
                    "additionalFields": {
                      "callback_data": "no_request_photo"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "e5b5e357-22d4-481e-b14a-c164029c0c66",
      "name": "нужно ли приложить фото?1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1800,
        3220
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.result.chat.id }}",
            "status": "authorized",
            "end_request_hours": "={{ $('Execute Workflow Trigger').item.json.message.text }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "01dd6d21-1355-4f0a-9186-73152c88687b",
      "name": "возвращаем статус3",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2020,
        3220
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "bed9bf42-13e3-4729-a747-23c5a7c8a90c",
      "name": "Extract from File1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1935,
        -1600
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Execute Workflow Trigger').item.json.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}"
      },
      "id": "edd30e44-cc5e-47e9-a575-1bd9cd92a827",
      "name": "получение фото из тг1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1695,
        -1600
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Заявка выполнена!",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "515eda69-1c19-4634-9deb-29676c2972bf",
      "name": "Фото доставлено2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2420,
        -1600
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
            "status": "authorized",
            "end_request_hours": "={{ null }}",
            "end_request_id": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "d31d22c2-3296-4361-9ce1-c8a553a0d9df",
      "name": "меняем статус на обычный",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2635,
        -1600
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "content": "## Отправка фото завершения заявки",
        "height": 304.0187080264881,
        "width": 1480.2413619003405,
        "color": 6
      },
      "id": "5e561229-05fc-4011-a17e-584dd033cd12",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1360,
        -1680
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "hr.employee",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "job_title",
              "value": "Механик"
            }
          ]
        }
      },
      "id": "49b239df-958c-49db-90c6-d40a23bd7d6b",
      "name": "поиск механиков3",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        2940,
        -1580
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "odoo_id",
              "value": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8c95b041-bb9f-427a-bb5e-abd1555cb8b4",
      "name": "поиск тг айди механиков3",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3135,
        -1579
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "40eca1c8-25ce-4538-9aec-0b10b421179f",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "84ae3835-6904-438b-8925-dd6116262ba2",
      "name": "проверка наличия механиков3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3360,
        -1580
      ]
    },
    {
      "parameters": {
        "content": "## Механик получает уведомление, когда слесарь завершает заявку",
        "height": 250.48240620104332,
        "width": 1545.548756095632,
        "color": 6
      },
      "id": "b07e232d-4bcb-45cc-8233-a5b0ecf3f4a8",
      "name": "Sticky Note42",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2880,
        -1660
      ],
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dev.everest.lamart.site/add_repaired_photo",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"maintenance_id\": {{ $('Execute Workflow Trigger').item.json.end_request_id }},\n    \"image\":  {{'\"'+ $('Extract from File1').item.json.data + '\"'}}\n}",
        "options": {}
      },
      "id": "2a3d5bed-4952-417c-99df-a8c64c8ba398",
      "name": "загрузка фото исправления",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2180,
        -1600
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "adding_end_request_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "6630a2f7-3244-409f-b70a-14931981f851",
      "name": "статус слесаря1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        980,
        -1560
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.message.message_id - 1}}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Прикрепите фото исправления:",
        "additionalFields": {}
      },
      "id": "23991341-f4d5-43f9-9234-d0fe750a9b70",
      "name": "убираем кнопку \"назад\" у прикрепления фото",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1440,
        -1600
      ],
      "alwaysOutputData": false,
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $('Execute Workflow Trigger').item.json.end_request_id }}"
            }
          ]
        }
      },
      "id": "8a2d4560-2277-4a46-9f65-bc51a289c088",
      "name": "получим актуальный статус заявки1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        3620,
        -1600
      ],
      "executeOnce": false,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "cars.cars",
        "operation": "getAll",
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.car_id[0] }}"
            }
          ]
        }
      },
      "id": "c149a34d-9e13-4103-bb00-c5f39b7360ba",
      "name": "данные авто2",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        3880,
        -1600
      ],
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('поиск тг айди механиков3').item.json.tg_id }}",
        "file": "={{ $('получение фото из тг1').item.json.result.file_id }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "=Принять заявку✅",
                    "additionalFields": {
                      "callback_data": "={{\"accept_TO_\" + $('Execute Workflow Trigger').item.json.end_request_id }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Отклонить заявку❌",
                    "additionalFields": {
                      "callback_data": "={{\"reject_TO_\" + $('Execute Workflow Trigger').item.json.end_request_id }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "caption": "={{ $json.number_car }} - {{ $('Execute Workflow Trigger').item.json.end_request_hours }} ч. - {{ $('получим актуальный статус заявки1').item.json.completed_by[1] }} (Слесарь) - {{ $('получим актуальный статус заявки1').item.json.description_of_maintenance }}\n\n<b>Требуется проверить корректность выставленных часов</b> <a href=\"https://dev.everest.lamart.site/web#id={{ $('Execute Workflow Trigger').item.json.end_request_id }}&model=technical.maintenance&view_type=form\">Ссылка на заявку в Odoo</a>",
          "parse_mode": "HTML"
        }
      },
      "id": "724ad8c6-74f9-4e36-91c7-a6852b083359",
      "name": "Отправка проблемы механикам3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4160,
        -1600
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "content": "## Ввод часов заявки",
        "height": 478.3312834739607,
        "width": 1110.8752211101105,
        "color": 5
      },
      "id": "5d7db5ad-8e74-446a-9f0a-96f1612c1b2e",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2300,
        -1031.9604568960758
      ]
    },
    {
      "parameters": {
        "content": "## Слесарь берет заявку",
        "height": 345.0604887980921,
        "width": 689.7997991620289,
        "color": 5
      },
      "id": "2fb50c20-c207-41cc-abf3-f673be4074a4",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1640,
        1960
      ]
    },
    {
      "parameters": {
        "content": "## Слесарь завершает заявку",
        "height": 345.0604887980921,
        "width": 1202.7584994749918,
        "color": 5
      },
      "id": "381c7c13-3565-4a50-ac3e-7cb2970639fc",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1640,
        2320
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "hr.employee",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}"
            }
          ]
        }
      },
      "id": "6794685f-efe9-46a8-9eec-c8124406d629",
      "name": "данные слесаря",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        3100,
        2960
      ],
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "inputing_request_hours",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "3edeca9a-18e1-4b5e-bab3-bdd5629c2745",
      "name": "статус слесаря",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1660,
        -580
      ]
    },
    {
      "parameters": {
        "content": "## Вывод первой страницы заявок \"К выполнению\" для слесаря",
        "height": 329.638781398251,
        "width": 969.9608169258066,
        "color": 5
      },
      "id": "ee6a4d3a-bb73-4250-965b-364dc16ed25e",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2760,
        -500
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "3410ee56-1023-43f1-9d15-b6d49d749354",
      "name": "неисправности1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2740,
        -340
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "a8d52b16-d080-44b7-be10-51bc6a96eceb",
              "leftValue": "={{ $json.locksmiths }}",
              "rightValue": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "63bb066a-6034-4416-ac26-2a921ca40f3b",
      "name": "получим все неисправности3",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2920,
        -400
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "На данный момент нет заявок для выполнения!",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "8649216e-6a1e-4da4-92c6-cc2597afb561",
      "name": "нет заявок для выполнения",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3460,
        -300
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "5166e30b-ef35-42d8-b5c4-b22be1c1afae",
      "name": "неисправности",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1600,
        1300
      ],
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "a8d52b16-d080-44b7-be10-51bc6a96eceb",
              "leftValue": "={{ $json.locksmith[0] }}",
              "rightValue": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1705566e-5e42-45de-bad6-6be8341741c1",
      "name": "получим все неисправности",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1820,
        1300
      ],
      "alwaysOutputData": true,
      "disabled": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $json.callback_query.data.split('_')[1].toNumber() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a0a79fec-7a93-4794-bee3-759f75d23cc3",
      "name": "получим все неисправности4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1740,
        1560
      ],
      "disabled": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Выберите, какие заявки вы хотите просмотреть",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Ремонт",
                    "additionalFields": {
                      "callback_data": "={{ 'repair_all_page_1' }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "ТО",
                    "additionalFields": {
                      "callback_data": "={{ 'TO_all_page_1' }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "82bfe470-2e0c-4c97-b929-a8fe13d90dcc",
      "name": "Ремонт или ТО",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2900,
        -200
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"TR_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b41dcf43-0ef9-4fda-ba0b-8fa0c4f7626e",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "={{ \"ER_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d34f98ab-15c5-4595-acc4-f1674738011f",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "yes_request_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dc7ccf7b-5a9c-4cba-9ce4-15317c35b2c2",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "no_request_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "458b6e10-1a53-4982-a430-36d2e0faa3a0",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "back_request_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "c83eb284-0c8d-462d-bdb0-7755d799ab04",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1080,
        2500
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "04bc052c-2ee0-446a-89ec-ff449994a324",
      "name": "отправляем сообщение 10",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2785,
        3680
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопок у \"Все заявки\"",
        "height": 1197.13501217242,
        "width": 1519.8252700751045
      },
      "id": "dd3384fb-ed7d-4c9d-88b6-e92ed9d8a6f3",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1459,
        3583
      ]
    },
    {
      "parameters": {
        "content": "## Вывод авто и кол-ва заявок на Ремонт",
        "height": 309.59912676924256,
        "width": 1319.0068317384266,
        "color": 5
      },
      "id": "0996d874-4d9e-42df-8692-2b810ff7bffe",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1623,
        3642
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "77cad101-3fec-49dd-a928-34e80025dbaf",
      "name": "неисправности3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1685,
        3720
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "urgently",
              "order": "descending"
            },
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "119caf1e-991f-4277-a538-1ab546791ac2",
      "name": "Sort1",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2325,
        3680
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "f03de31a-1453-4d94-8949-779cdafb4ea8",
      "name": "отправляем сообщение 12",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2805,
        4080
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "ef2dab0e-854c-4ad7-80b1-832b9bc73623",
      "name": "неисправности4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1665,
        4100
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "urgently",
              "order": "descending"
            },
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "fb5f96d0-58cb-4454-a213-f475e0c2b7ca",
      "name": "Sort3",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2345,
        4080
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности9').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "62aebca1-94a0-4d06-8717-614252cf7686",
      "name": "Есть ли заявки к выполнению1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2085,
        3720
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "a33a802d-8e3e-4b8e-9cec-1236ebffcf5a",
      "name": "нет заявок к выполнению1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2325,
        3820
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "a2768f58-0bf1-4412-b807-fb94def0a141",
      "name": "нет заявок к выполнению2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2345,
        4220
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности6').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0eaaf86c-9c0b-415b-b9e2-377f1ee12986",
      "name": "Есть ли заявки к выполнению2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2085,
        4100
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Выберите, какие заявки вы хотите просмотреть",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Ремонт",
                    "additionalFields": {
                      "callback_data": "={{ 'repair_all_page_1' }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "ТО",
                    "additionalFields": {
                      "callback_data": "={{ 'TO_all_page_1' }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "b5eabe43-4475-491b-8797-a3ced97b5396",
      "name": "Ремонт или ТО1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1545,
        4600
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "b8154c6e-8fdd-4fbf-9f94-543516d25e41",
      "name": "отправляем сообщение 13",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2831,
        4957
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопок выбора авто для просмотра заявок",
        "height": 1105.0510280702404,
        "width": 1684.4742565384063
      },
      "id": "4df7cf32-c5e5-4df3-a71a-d718bea596cf",
      "name": "Sticky Note24",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1340,
        4860
      ]
    },
    {
      "parameters": {
        "content": "## Обработка страниц с заявками Ремонт по авто",
        "height": 309.59912676924256,
        "width": 1572.4834465071003,
        "color": 5
      },
      "id": "78ab0bc6-e0cd-40db-8f93-80e2e83a03ca",
      "name": "Sticky Note25",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1416,
        4919
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "3015e293-be8f-4979-a819-aa67ba229781",
      "name": "отправляем сообщение 15",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2851,
        5357
      ]
    },
    {
      "parameters": {
        "content": "## Обработка страниц с заявками ТО по авто",
        "height": 332.00288539258645,
        "width": 1539.2446463627095,
        "color": 5
      },
      "id": "e682094a-0bf5-45b1-8837-0d4029dad2d5",
      "name": "Sticky Note27",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1440,
        5317
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6a77ad5f-a62e-437f-8ae5-6b0705b49c63",
              "leftValue": "={{ $json.tech_maintenance }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "6fb0d84d-b944-40da-af22-2165224818cc",
              "leftValue": "={{ $json.locksmiths }}",
              "rightValue": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7cdc0a03-973f-43ce-aac3-90f29b926beb",
      "name": "получим все неисправности10",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1931,
        5377
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности8').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "129dd4ce-c12d-41de-ae6e-ca4bab4fece4",
      "name": "Есть ли заявки к выполнению3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2131,
        4997
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "feb9bb27-96f9-414f-ac50-6ca133111188",
      "name": "нет заявок к выполнению3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2371,
        5097
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "e0053969-02e2-4d87-b7cc-3972eba68ca1",
      "name": "нет заявок к выполнению4",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2391,
        5497
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности10').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "52703673-781e-46fc-9d00-54247a0f028e",
      "name": "Есть ли заявки к выполнению4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2131,
        5377
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"repair_all_page_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "107a6bca-cf08-46fa-9b50-c1e5d62a596f",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"all_item_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1cd521bb-df24-4a04-a908-9fa1242d5b7d",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"TO_all_page_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "478217aa-d9af-43c3-929e-db161fbf1c96",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "repair_or_TO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "c6d95523-79f7-472b-8ec6-2daf220a7093",
      "name": "обработка всех заявок",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1145,
        3840
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_car_by_number",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number_car",
              "value": "={{ $json.callback_query.data.split('_')[2] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a9d6bfe6-301f-4538-9961-3ee5ea45fb56",
      "name": "находим авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1485,
        5000
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_car_by_number",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number_car",
              "value": "={{ $json.callback_query.data.split('_')[2] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f474c6fd-fc50-4a9b-b10b-4260529320d8",
      "name": "находим авто1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1485,
        5380
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_maintenances_by_car",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "car_id",
              "value": "={{ $json.id }}"
            },
            {
              "name": "start_date",
              "value": "={{ new Date(1970).toDateTime().format('yyyy-MM-dd') }}"
            },
            {
              "name": "end_date",
              "value": "={{ $today.plus(100, 'years').format('yyyy-MM-dd') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "82c80b26-7b85-4d44-8b4d-7d790cc7a7a5",
      "name": "неисправности по авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1731,
        4997
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "f5b2dfa0-5de8-44b6-965e-b213476b29df",
      "name": "неисправности по авто1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1711,
        5377
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "urgently",
              "order": "descending"
            },
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "7f674365-03ad-45ec-8727-d9b9c90066dd",
      "name": "сортируем по дате и срочности",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2371,
        4957
      ]
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "urgently",
              "order": "descending"
            },
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "af284300-0bf6-4354-842c-1843c145c9c6",
      "name": "сортируем по дате и срочности1",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2391,
        5357
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/repair_car_(.+)_page_(\\d+)/); // Изменено для нового формата\n    if (match) {\n        selectedCar = match[1]; // Извлекаем номер авто\n        page = parseInt(match[2], 10);} // Извлекаем номер страницы\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    // Проверяем, является ли заявка срочной\n    const isUrgent = item.json.urgently === true ? '❗' : '';\n\n    return {\n        text: `${isUrgent}${startIndex + index + 1}. ${truncatedDescription}`, // Используем startIndex для правильной нумерации и добавляем ❗\n        callback_data: `all_item_${item.json.id}_page_${page}_repair_car_${carInfo}` // Добавляем номер страницы\n    };\n});\n\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `repair_car_${selectedCar}_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `repair_car_${selectedCar}_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"repair_all_page_1\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7063451965:AAGARL6Eluwh3zgS84WnaZozqdz6-m0RLzg';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: `Заявки по авто <b>${selectedCar}</b>, ожидающие выполнения:`,\n    parse_mode: 'HTML',\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки, ожидающие выполнения:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "fc4ed05c-c601-4858-8319-9dfe260fc3ad",
      "name": "вывод заявок по авто",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2611,
        4957
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/TO_car_(.+)_page_(\\d+)/); // Изменено для нового формата\n    if (match) {\n        selectedCar = match[1]; // Извлекаем номер авто\n        page = parseInt(match[2], 10);} // Извлекаем номер страницы\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    // Проверяем, является ли заявка срочной\n    const isUrgent = item.json.urgently === true ? '❗' : '';\n\n    return {\n        text: `${isUrgent}${startIndex + index + 1}. ${truncatedDescription}`, // Используем startIndex для правильной нумерации и добавляем ❗\n        callback_data: `all_item_${item.json.id}_page_${page}_TO_car_${carInfo}` // Добавляем номер страницы\n    };\n});\n\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `TO_car_${selectedCar}_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `TO_car_${selectedCar}_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"TO_all_page_1\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7063451965:AAGARL6Eluwh3zgS84WnaZozqdz6-m0RLzg';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: `Заявки по авто <b>${selectedCar}</b>, ожидающие выполнения:`,\n    parse_mode: 'HTML',\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки, ожидающие выполнения:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "4becb93a-31ae-4057-9e95-a35260fd26cd",
      "name": "вывод заявок по авто1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2651,
        5357
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Функция для выбора правильного склонения слова \"заявка\"\nconst getDeclension = (count, forms) => {\n    const mod10 = count % 10;\n    const mod100 = count % 100;\n    if (mod100 >= 11 && mod100 <= 19) {\n        return forms[2]; // \"заявок\"\n    }\n    if (mod10 === 1) {\n        return forms[0]; // \"заявка\"\n    }\n    if (mod10 >= 2 && mod10 <= 4) {\n        return forms[1]; // \"заявки\"\n    }\n    return forms[2]; // \"заявок\"\n};\n\n// Группируем заявки по номеру авто\nconst groupedItems = items.reduce((acc, item) => {\n    const carNumber = item.json.car_id[1].split(' - ')[0];\n    if (!acc[carNumber]) {\n        acc[carNumber] = { count: 0, urgently: false };\n    }\n    acc[carNumber].count++;\n    if (item.json.urgently === true) {\n        acc[carNumber].urgently = true;\n    }\n    return acc;\n}, {});\n\n// Преобразуем объект в массив\nlet groupedArray = Object.entries(groupedItems).map(([carNumber, data]) => ({\n    carNumber,\n    count: data.count,\n    urgently: data.urgently\n}));\n\n// Сортируем: сначала срочные заявки (urgently === true) в порядке убывания count, затем несрочные\ngroupedArray = groupedArray.sort((a, b) => {\n    if (a.urgently === b.urgently) {\n        return b.count - a.count; // Сравнение по количеству заявок\n    }\n    return a.urgently ? -1 : 1; // Срочные заявки идут первыми\n});\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = groupedArray.slice(startIndex, endIndex);\n\n// Склонения для слова \"заявка\"\nconst declensions = [\"заявка\", \"заявки\", \"заявок\"];\n\n// Формируем массив кнопок с информацией по каждому авто\nconst buttons = displayItems.map((item, index) => {\n    const isUrgent = item.urgently ? '❗' : '';\n    const declension = getDeclension(item.count, declensions);\n    return {\n        text: `${isUrgent}${startIndex + index + 1}. ${item.carNumber} - ${item.count} ${declension}`,\n        callback_data: `repair_car_${item.carNumber}_page_${page}` // Используем номер авто\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (groupedArray.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `repair_all_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `repair_all_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"repair_or_TO\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7063451965:AAGARL6Eluwh3zgS84WnaZozqdz6-m0RLzg';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Заявки на ремонт по автомобилям:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "81f55790-f925-468f-a1f3-68facc11e1e3",
      "name": "выбор авто",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2565,
        3680
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Функция для выбора правильного склонения слова \"заявка\"\nconst getDeclension = (count, forms) => {\n    const mod10 = count % 10;\n    const mod100 = count % 100;\n    if (mod100 >= 11 && mod100 <= 19) {\n        return forms[2]; // \"заявок\"\n    }\n    if (mod10 === 1) {\n        return forms[0]; // \"заявка\"\n    }\n    if (mod10 >= 2 && mod10 <= 4) {\n        return forms[1]; // \"заявки\"\n    }\n    return forms[2]; // \"заявок\"\n};\n\n// Группируем заявки по номеру авто\nconst groupedItems = items.reduce((acc, item) => {\n    const carNumber = item.json.car_id[1].split(' - ')[0];\n    if (!acc[carNumber]) {\n        acc[carNumber] = { count: 0, urgently: false };\n    }\n    acc[carNumber].count++;\n    if (item.json.urgently === true) {\n        acc[carNumber].urgently = true;\n    }\n    return acc;\n}, {});\n\n// Преобразуем объект в массив\nlet groupedArray = Object.entries(groupedItems).map(([carNumber, data]) => ({\n    carNumber,\n    count: data.count,\n    urgently: data.urgently\n}));\n\n// Сортируем: сначала срочные заявки (urgently === true) в порядке убывания count, затем несрочные\ngroupedArray = groupedArray.sort((a, b) => {\n    if (a.urgently === b.urgently) {\n        return b.count - a.count; // Сравнение по количеству заявок\n    }\n    return a.urgently ? -1 : 1; // Срочные заявки идут первыми\n});\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = groupedArray.slice(startIndex, endIndex);\n\n// Склонения для слова \"заявка\"\nconst declensions = [\"заявка\", \"заявки\", \"заявок\"];\n\n// Формируем массив кнопок с информацией по каждому авто\nconst buttons = displayItems.map((item, index) => {\n    const isUrgent = item.urgently ? '❗' : '';\n    const declension = getDeclension(item.count, declensions);\n    return {\n        text: `${isUrgent}${startIndex + index + 1}. ${item.carNumber} - ${item.count} ${declension}`,\n        callback_data: `TO_car_${item.carNumber}_page_${page}` // Используем номер авто\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (groupedArray.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `TO_all_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `TO_all_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"repair_or_TO\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7063451965:AAGARL6Eluwh3zgS84WnaZozqdz6-m0RLzg';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Заявки на ТО по автомобилям:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "bd68322b-941e-4d55-ac33-046fa7c5e039",
      "name": "выбор авто1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2605,
        4080
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Получаем данные о колбэке из Execute Workflow Trigger\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nconst callbackData = callbackQuery ? callbackQuery.data : null;\n\n// Проверяем, был ли получен callbackData\nif (!callbackData) {\n    throw new Error(\"Callback data is undefined. Cannot proceed.\");\n}\n\n// Извлекаем message_id из callback_query\nconst messageId = callbackQuery.message.message_id;\n\n// Обработка выбора заявки\nconst selectedMatch = callbackData.match(/item_(\\d+)_page_(\\d+)_([^_]+)_car_(.+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n    const type = selectedMatch[3];\n    const selectedCar = selectedMatch[4];\n\n    // Получаем информацию о выбранной заявке\n    const selectedRequest = items.find(item => item.json.id == itemId);\n    // Извлекаем необходимые данные из JSON\n    const {\n        description_of_maintenance,\n        car_id,\n        created_by,\n        id\n    } = selectedRequest.json;\n\n    const descriptionText = description_of_maintenance === \"Нет описания\" \n        ? `${description_of_maintenance} (Смотреть фото в Odoo)` \n        : description_of_maintenance;\n\n    // Формируем текст сообщения\n    const carName = car_id[1].split(' - ')[0]; // Получаем только номер авто\n\n    // Ищем данные о водителе\n    const driverData = items.find(item => item.json.resource_id && item.json.resource_id[1] === created_by[1]);\n    \n    // Если данные о водителе найдены, извлекаем имя и телефон\n    const name = driverData ? driverData.json.name : 'Неизвестный водитель';\n    const mobile_phone = driverData ? driverData.json.mobile_phone : 'Телефон не указан';\n\n    // Формируем ссылку на заявку в Odoo\n    const odooLink = `https://dev.everest.lamart.site/web#id=${itemId}&model=technical.maintenance&view_type=form`;\n\n    // Полное сообщение\n    const messageText = `У автомобиля <b>${carName}</b> проблема:\\n\\n` +\n        `<i>${descriptionText}</i>\\n\\n`;\n\n    // Получаем chat_id из callback_query\n    const chatId = callbackQuery.from.id;\n\n    // Токен бота\n    const token = '7063451965:AAGARL6Eluwh3zgS84WnaZozqdz6-m0RLzg';\n\n    // URL для редактирования сообщения через API Telegram\n    const url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n    // Создаем объект с inline-клавиатурой в один столбик\n    const inlineKeyboard = {\n        inline_keyboard: [\n            [\n                { text: \"Взять в работу\", callback_data: `TR_${id}` } // Добавляем ID заявки\n            ],\n            [\n                { text: \"Назад\", callback_data: `${type}_car_${selectedCar}_page_${returnPage}` } // Устанавливаем номер страницы в колбэк\n            ]\n        ]\n    };\n\n    // Формируем сообщение для редактирования\n    const message = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: messageText,\n        parse_mode: 'HTML', // Указываем, что текст содержит HTML\n        reply_markup: inlineKeyboard // Добавляем inline-клавиатуру\n    };\n\n    // Возвращаем данные для запроса\n    return [\n        {\n            json: {\n                url,\n                message\n            }\n        }\n    ];\n}"
      },
      "id": "c9674b59-6a86-44bf-9029-9fd0bb5d4acf",
      "name": "генерация сообщения для просмотра заявки",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2445,
        4440
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "8204c9a9-10dc-4b79-869a-c16e56c8355c",
      "name": "отправляем сообщение ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2645,
        4440
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_driver_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "driver_id",
              "value": "={{ $json.created_by[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0fe21920-fdc8-48cb-bb15-dd74eb132918",
      "name": "данные сотрудника1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1985,
        4540
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "7434e02a-2ef0-4b1b-9abe-e2c08169770d",
      "name": "объединяем заявки и сотрудника1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2225,
        4440
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $json.callback_query.data.split('_')[2].toNumber() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "0e416843-25ca-4464-bbd0-f236784c8d04",
      "name": "получим все неисправности7",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1785,
        4440
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Подробный вывод заявки",
        "height": 311.6467894317699,
        "width": 1065.0613458914934,
        "color": 5
      },
      "id": "bdc661df-fdec-4047-b7ac-a86f4b0d0c83",
      "name": "Sticky Note22",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1725,
        4380
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6a77ad5f-a62e-437f-8ae5-6b0705b49c63",
              "leftValue": "={{ $json.tech_maintenance }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "c2215c25-ec9b-4890-a78e-536597978dc0",
              "leftValue": "={{ $json.locksmiths }}",
              "rightValue": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "6e889ef4-b216-4b62-8a05-3713071dd5f7",
      "name": "получим все неисправности9",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1885,
        3720
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6a77ad5f-a62e-437f-8ae5-6b0705b49c63",
              "leftValue": "={{ $json.tech_maintenance }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            },
            {
              "id": "bb8616b3-dd07-4c95-9f32-b56786519632",
              "leftValue": "={{ $json.locksmiths }}",
              "rightValue": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b0a99541-7202-44ec-be3a-440582626082",
      "name": "получим все неисправности6",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1880,
        4100
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6a77ad5f-a62e-437f-8ae5-6b0705b49c63",
              "leftValue": "={{ $json.tech_maintenance }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            },
            {
              "id": "f86db0d1-3ed6-4244-806b-ff5398339c9e",
              "leftValue": "={{ $json.locksmiths }}",
              "rightValue": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "11c4a636-e08b-4965-975c-8ec7d7f617b3",
      "name": "получим все неисправности8",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1940,
        5000
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Вывод авто и кол-ва заявок на ТО",
        "height": 317.00288539258645,
        "width": 1308.2279848013868,
        "color": 5
      },
      "id": "1d3a7133-d408-480e-880e-846b315dc850",
      "name": "Sticky Note21",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1640,
        4040
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"repair_car_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "107a6bca-cf08-46fa-9b50-c1e5d62a596f",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"TO_car_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "4a689a37-e9e2-4584-acb4-96f30ff039b8",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "del_maintenances",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "0686009f-9b58-401a-8739-d6f69fb29df5",
      "name": "обработка всех заявок по выбранному авто",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1085,
        5120
      ]
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
      },
      "id": "5fb703ca-d18b-4a86-b533-aefe81126b6d",
      "name": "Удаление прошлого сообщения",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1480,
        5760
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id - 1}}"
      },
      "id": "80a63aea-883e-4382-87af-97c547f5493c",
      "name": "Удаление прошлого сообщения4",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1740,
        5760
      ],
      "credentials": {
        "telegramApi": {
          "id": "rJQteGH5Ng1RKmF4",
          "name": "tg dev aleksey"
        }
      }
    },
    {
      "parameters": {
        "content": "## Удаление сообщений",
        "height": 230.02744518719146,
        "width": 496.32687483613483,
        "color": 5
      },
      "id": "39086e0a-f23b-41d6-b6d3-5f93b5dc6db6",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1440,
        5700
      ]
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "update_id": 100640615,
          "callback_query": {
            "id": "2008109316009622121",
            "from": {
              "id": 467549384,
              "is_bot": false,
              "first_name": "Sergio",
              "username": "sergo_kf",
              "language_code": "ru",
              "is_premium": true
            },
            "message": {
              "message_id": 32444,
              "from": {
                "id": 7063451965,
                "is_bot": true,
                "first_name": "Everest n8n",
                "username": "myn8nbotbot"
              },
              "chat": {
                "id": 467549384,
                "first_name": "Sergio",
                "username": "sergo_kf",
                "type": "private"
              },
              "date": 1733495713,
              "edit_date": 1733495717,
              "text": "Заявки по авто А 657 АА, ожидающие выполнения:",
              "entities": [
                {
                  "offset": 15,
                  "length": 8,
                  "type": "bold"
                }
              ],
              "reply_markup": {
                "inline_keyboard": [
                  [
                    {
                      "text": "❗1. срочно1",
                      "callback_data": "all_item_672_page_1_repair_car_А 657 АА"
                    }
                  ],
                  [
                    {
                      "text": "❗2. срочно2",
                      "callback_data": "all_item_673_page_1_repair_car_А 657 АА"
                    }
                  ],
                  [
                    {
                      "text": "❗3. срочная проблема",
                      "callback_data": "all_item_677_page_1_repair_car_А 657 АА"
                    }
                  ],
                  [
                    {
                      "text": "4. надо бы поменять…",
                      "callback_data": "all_item_676_page_1_repair_car_А 657 АА"
                    }
                  ],
                  [
                    {
                      "text": "Назад",
                      "callback_data": "repair_all_page_1"
                    }
                  ]
                ]
              }
            },
            "chat_instance": "-8293046807322593726",
            "data": "all_item_673_page_1_repair_car_А 657 АА"
          },
          "tg_id": "467549384",
          "odoo_id": 4,
          "status": "authorized",
          "only_mech": false,
          "mech_photo": false,
          "end_request_id": null,
          "materials_photo": false,
          "end_request_hours": null,
          "car_id_while_inputing": 25,
          "fuel_liters": 15,
          "weight_measure": "2 Тонны ",
          "logist_alert_text": null,
          "logist_recipient_name": null,
          "transportation_for_certificate": null,
          "count_weight_photo": null,
          "count_weight_photo_sent": 0,
          "current_quarry_hours": 2,
          "end_round_message_id": 32150,
          "last_message_text": "{\"message_id\":32146,\"from\":{\"id\":7063451965,\"is_bot\":true,\"first_name\":\"Everest n8n\",\"username\":\"myn8nbotbot\"},\"chat\":{\"id\":467549384,\"first_name\":\"Sergio\",\"username\":\"sergo_kf\",\"type\":\"private\"},\"date\":1733399607,\"edit_date\":1733399666,\"text\":\"Ваша текущая перевозка:\\n\\n1. Отправитель - ООО \\\"ЭВЕРЕСТ\\\"\\nПолучатель - Prod Admin\\nМаршрут - Карьер Ключевое-улица Карла Маркса, 43\\nМатериал - Тест\\nТребуемое количество тонн по перевозке - 44\",\"entities\":[{\"offset\":0,\"length\":23,\"type\":\"bold\"},{\"offset\":25,\"length\":17,\"type\":\"italic\"},{\"offset\":25,\"length\":2,\"type\":\"bold\"},{\"offset\":42,\"length\":27,\"type\":\"italic\"},{\"offset\":42,\"length\":13,\"type\":\"bold\"},{\"offset\":69,\"length\":21,\"type\":\"italic\"},{\"offset\":69,\"length\":10,\"type\":\"bold\"},{\"offset\":90,\"length\":50,\"type\":\"italic\"},{\"offset\":90,\"length\":38,\"type\":\"bold\"},{\"offset\":140,\"length\":46,\"type\":\"italic\"},{\"offset\":140,\"length\":4,\"type\":\"bold\"},{\"offset\":186,\"length\":2,\"type\":\"bold\"},{\"offset\":186,\"length\":2,\"type\":\"italic\"}],\"reply_markup\":{\"inline_keyboard\":[[{\"text\":\"Начать рейс\",\"callback_data\":\"pick\"}],[{\"text\":\"Назначенные перевозки\",\"callback_data\":\"transportation_list\"}],[{\"text\":\"Завершить смену\",\"callback_data\":\"complete_work\"}]]}}",
          "logist_notifications": false,
          "creating_transportation": "657;\nКарьер Ключевое;",
          "round_active_msg_id": 32134,
          "no_taking_shift_logist_notify": false,
          "logist_template": null,
          "current_maintenance": null,
          "expected_time_maintenance": null,
          "assigned_locksmiths": null,
          "mechanic_template": null,
          "cookie": "session_id=f523ba68fce3dac88662724471c59fa7e34a1cb3; Expires=Tue, 02 Dec 2025 15:20:50 GMT; Max-Age=604800; HttpOnly; Path=/"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-08-26T14:03:49.624Z",
      "updatedAt": "2024-08-26T14:03:49.624Z",
      "id": "sYBV4z8jwrWgz2Cc",
      "name": "aleksey"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-12-06T14:40:49.618Z",
  "versionId": "9a4cbe0a-ac0d-4795-b023-6f3ad765832f"
}