{
  "active": false,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "следующая перевозка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск авто": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          },
          {
            "node": "перевозки+имена",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получение перевозок": {
      "main": [
        [
          {
            "node": "Сортировка перевозок и работ в карьере1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Сортировка перевозок и работ в карьере1": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем кнопки": {
      "main": [
        [
          {
            "node": "получение перевозок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "перевозки+имена",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "рейсы в перевозке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "рейсы в перевозке": {
      "main": [
        [
          {
            "node": "Remove Duplicates1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates1": {
      "main": [
        [
          {
            "node": "склеить имена водителей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склеить имена водителей": {
      "main": [
        [
          {
            "node": "Replace Me3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me3": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "перевозки+имена": {
      "main": [
        [
          {
            "node": "в единое сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "в единое сообщение": {
      "main": [
        [
          {
            "node": "первой работа или перевозка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первой работа или перевозка": {
      "main": [
        [
          {
            "node": "работа в карьере",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "первая перевозка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "работа в карьере": {
      "main": [
        [
          {
            "node": "айди последнего сообщения2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первая перевозка": {
      "main": [
        [
          {
            "node": "айди последнего сообщения2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "убираем кнопки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ошибки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ошибки": {
      "main": [
        [
          {
            "node": "Нет перевозки или работы в карьере",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим авто по водителю": {
      "main": [
        [
          {
            "node": "получим все заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все заявки": {
      "main": [
        [
          {
            "node": "есть ли неисправности1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли неисправности1": {
      "main": [
        [
          {
            "node": "форматируем время в удобный формат1",
            "type": "main",
            "index": 0
          },
          {
            "node": "объединяем время и текст1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "форматируем время в удобный формат1": {
      "main": [
        [
          {
            "node": "объединяем время и текст1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "объединяем время и текст1": {
      "main": [
        [
          {
            "node": "Добавляем теги",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Добавляем теги": {
      "main": [
        [
          {
            "node": "Разделяем по статусам",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Разделяем по статусам": {
      "main": [
        [
          {
            "node": "добавим перевод на новую строку",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "добавим перевод на новую строку1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "добавим перевод на новую строку2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавим перевод на новую строку": {
      "main": [
        [
          {
            "node": "к выполнению2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "к выполнению2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавим перевод на новую строку1": {
      "main": [
        [
          {
            "node": "в работе",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавим перевод на новую строку2": {
      "main": [
        [
          {
            "node": "требуется проверка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "в работе": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "требуется проверка": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "в один текст объединяем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "в один текст объединяем": {
      "main": [
        [
          {
            "node": "получим все заявки \"В работе\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все заявки \"В работе\"": {
      "main": [
        [
          {
            "node": "Проверка есть ли такие заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка есть ли такие заявки": {
      "main": [
        [
          {
            "node": "Вывод с кнопкой \"завершить заявку\"",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Вывод с кнопкой \"назад\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "меняем статус - ввод текста запроса": {
      "main": [
        [
          {
            "node": "описание заявки для работы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возвращаем статус5": {
      "main": [
        [
          {
            "node": "получим авто по водителю",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем текст сообщения1": {
      "main": [
        [
          {
            "node": "отменить рейс?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "прошлое сообщение3": {
      "main": [
        [
          {
            "node": "статус=ввод комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "недели": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "отделяем недели",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "графики",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "графики": {
      "main": [
        [
          {
            "node": "есть данные?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "по возрастанию": {
      "main": [
        [
          {
            "node": "создаём строку1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть данные?": {
      "main": [
        [
          {
            "node": "по возрастанию",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "создаём строку2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "объединяем1": {
      "main": [
        [
          {
            "node": "Добавляем недели",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создаём строку1": {
      "main": [
        [
          {
            "node": "объединяем1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создаём строку2": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Добавляем недели": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отделяем недели": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявки по авто": {
      "main": [
        [
          {
            "node": "возвращаем статус5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "меняем статус - ввод текста запроса",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "отмена рейсов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отмена рейсов": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прошлое сообщение1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прошлое сообщение3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "график",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сегодняшняя дата": {
      "main": [
        [
          {
            "node": "какой сегодня день недели?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "какой сегодня день недели?": {
      "main": [
        [
          {
            "node": "конец недели",
            "type": "main",
            "index": 0
          },
          {
            "node": "начало недели",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "конец недели": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "начало недели": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "объединяем": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создаём строку": {
      "main": [
        [
          {
            "node": "объединяем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "графики1": {
      "main": [
        [
          {
            "node": "есть данные?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "графики1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "по возрастанию1": {
      "main": [
        [
          {
            "node": "создаём строку",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть данные?1": {
      "main": [
        [
          {
            "node": "по возрастанию1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "график": {
      "main": [
        [
          {
            "node": "недели",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "сегодняшняя дата",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "инлайн кнопки для статистики",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "Получаем рейсы1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Получение работ в карьере",
            "type": "main",
            "index": 0
          },
          {
            "node": "получаем из модуля зарплата водителя",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получаем рейсы": {
      "main": [
        [
          {
            "node": "Объединение рейсов в один файл",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получение работ в карьере2": {
      "main": [
        [
          {
            "node": "считаем часы и заработок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Объединение рейсов в один файл": {
      "main": [
        [
          {
            "node": "считаем по дням кол-во рейсов и заработок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "Получаем рейсы",
            "type": "main",
            "index": 0
          },
          {
            "node": "Получение работ в карьере2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "считаем по дням кол-во рейсов и заработок": {
      "main": [
        [
          {
            "node": "соединяем рейсы и работы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "считаем часы и заработок": {
      "main": [
        [
          {
            "node": "соединяем рейсы и работы",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "соединяем рейсы и работы": {
      "main": [
        [
          {
            "node": "сортируем все данные, считаем итоги, преобразуем в сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сортируем все данные, считаем итоги, преобразуем в сообщение": {
      "main": [
        [
          {
            "node": "вывод недельной статистики",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получаем рейсы1": {
      "main": [
        [
          {
            "node": "Объединение рейсов в один файл1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Получение работ в карьере": {
      "main": [
        [
          {
            "node": "обрабатываем работы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Объединение рейсов в один файл1": {
      "main": [
        [
          {
            "node": "обрабатываем рейсы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем из модуля зарплата водителя": {
      "main": [
        [
          {
            "node": "получаем записи о премиях/штрафах",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем записи о премиях/штрафах": {
      "main": [
        [
          {
            "node": "преобразуем премии/штрафы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "преобразуем премии/штрафы": {
      "main": [
        [
          {
            "node": "добавляем еще премии/штрафы",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "обрабатываем рейсы": {
      "main": [
        [
          {
            "node": "рейсы+работы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обрабатываем работы": {
      "main": [
        [
          {
            "node": "рейсы+работы",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "рейсы+работы": {
      "main": [
        [
          {
            "node": "добавляем еще премии/штрафы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавляем еще премии/штрафы": {
      "main": [
        [
          {
            "node": "формируем месячную статистику и преобразуем в сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "формируем месячную статистику и преобразуем в сообщение": {
      "main": [
        [
          {
            "node": "разделение запроса и реплай и инлайн",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделение запроса и реплай и инлайн": {
      "main": [
        [
          {
            "node": "выводим месячную статистику",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "выводим месячную статистику1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "инлайн кнопки для статистики": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "проверка наличия взвешивания",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем номер авто": {
      "main": [
        [
          {
            "node": "получаем перевозки из очереди авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем перевозки из очереди авто": {
      "main": [
        [
          {
            "node": "получаем рейсы в перевозке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем рейсы в перевозке": {
      "main": [
        [
          {
            "node": "разделяем рейсы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделяем рейсы": {
      "main": [
        [
          {
            "node": "берем выполняющийся рейс нужного авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "берем выполняющийся рейс нужного авто": {
      "main": [
        [
          {
            "node": "есть ли запись с весов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли запись с весов": {
      "main": [
        [
          {
            "node": "подтверждение взвешивания",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "меняем callback на ввод объема",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "меняем callback на ввод объема": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка наличия взвешивания": {
      "main": [
        [
          {
            "node": "получаем номер авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "работа в карьере?": {
      "main": [
        [
          {
            "node": "Завершить для работы",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Завершить текущую перевозку?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Завершить текущую перевозку?": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Завершить для работы": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "следующая перевозка": {
      "main": [
        [
          {
            "node": "работа в карьере?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прошлое сообщение",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск авто",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прошлое сообщение2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявки по авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-10-23T04:32:12.440Z",
  "id": "4bDwyIqs98ZQRquC",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "expo_driver_inline_2",
  "nodes": [
    {
      "parameters": {},
      "id": "d184da0c-3068-4d66-a7f1-7869478ae2f6",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -180,
        944.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы уверены, что хотите приступить к следующей перевозке?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "next_transportation"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "no_transfer_transportation"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "7b2d4b01-d8a7-4623-bfc0-363f40dcf34f",
      "name": "Завершить текущую перевозку?",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        600,
        744.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "last_message_text": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.text }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "d1f29fcb-cec3-45c5-8cc1-4a173aaa2c58",
      "name": "сохраняем текст сообщения",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        820,
        684.9384888466118
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $json.callback_query.from.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $json.last_message_text }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Начать рейс",
                    "additionalFields": {
                      "callback_data": "pick"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "e1333c98-0aaa-47a1-9833-7342c8ce16cf",
      "name": "прошлое сообщение",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        500,
        864.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=cars.cars",
        "operation": "getAll",
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "driver_id",
              "value": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}"
            }
          ]
        }
      },
      "id": "f5901d41-5f78-4da9-bd93-95fadde89d04",
      "name": "поиск авто",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        500,
        1024.9384888466118
      ],
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {},
      "id": "5089244a-b567-4db2-9bd0-7a938d8f2ec1",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1680,
        924.9384888466118
      ]
    },
    {
      "parameters": {
        "content": "## Вывод текущей перевозки",
        "height": 432.36801840109257,
        "width": 2587.9615410901815,
        "color": 6
      },
      "id": "6e91561a-7738-4575-87dc-3ccf9329b6bc",
      "name": "Sticky Note49",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1140,
        784.9384888466118
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/transportations_by_car",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number_car\": {{'\"'+ $('поиск авто').item.json.number_car +'\"'}}\n}",
        "options": {}
      },
      "id": "db95f34c-bd8f-44a1-8391-9da66635f226",
      "name": "получение перевозок",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1180,
        944.9384888466118
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nlet allItems = [];\n\nfor (let i = 0; i < items.length; i++) {\n    const { transportations, full_quarry_work } = items[i].json;\n\n    if (transportations && Array.isArray(transportations)) {\n        allItems = allItems.concat(transportations);\n    }\n    if (full_quarry_work && Array.isArray(full_quarry_work)) {\n        allItems = allItems.concat(full_quarry_work);\n    }\n}\n\nallItems = allItems.filter(item => item.hasOwnProperty('sequence'));\nallItems.sort((a, b) => a.sequence - b.sequence);\n\nreturn allItems.map(item => ({ json: item }));\n"
      },
      "id": "2945c0bb-83ea-44c6-a574-a7f260d9123b",
      "name": "Сортировка перевозок и работ в карьере1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        924.9384888466118
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.tg_id }}",
            "end_round_message_id": "={{ $json.result.message_id }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "e2f2c269-9596-45c8-936f-373c68428217",
      "name": "айди последнего сообщения2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        3400,
        924.9384888466118
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "content": "## Кнопка следующей перевозки",
        "height": 918.5981928669721,
        "width": 618.4840105643988,
        "color": 6
      },
      "id": "a33a6fec-ce80-49ad-af42-5a230677cf64",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.tg_id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Вы завершили перевозку. Ваша следующая перевозка:",
        "additionalFields": {}
      },
      "id": "9a203f12-6c61-452c-abb9-33b06f04e972",
      "name": "убираем кнопки",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        900,
        1024.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "e4d4f337-8ca9-42bd-9742-926c6385bb76",
      "name": "Loop Over Items3",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1940,
        1004.9384888466118
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=transportation.round",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.rounds }}"
            },
            {
              "fieldName": "driver",
              "operator": "notEqual",
              "value": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}"
            },
            {
              "fieldName": "driver",
              "operator": "notEqual",
              "value": "={{ null }}"
            }
          ]
        }
      },
      "id": "95eee7c4-2289-4b46-a936-207b6577a1a0",
      "name": "рейсы в перевозке",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        2160,
        1024.9384888466118
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "driver[1]",
        "options": {}
      },
      "id": "74bcbe63-778b-49ce-8343-68dd6db8a231",
      "name": "Remove Duplicates1",
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 1.1,
      "position": [
        2380,
        1024.9384888466118
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "driver[1]",
              "separateBy": "\n"
            }
          ]
        },
        "options": {
          "continueIfFieldNotFound": true
        }
      },
      "id": "399a60b1-84bd-497b-8621-9a591b577c7c",
      "name": "склеить имена водителей",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2560,
        1024.9384888466118
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "id": "e178db7f-dadf-48d7-bb66-fe4bbac333cf",
      "name": "Replace Me3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2800,
        1024.9384888466118
      ]
    },
    {
      "parameters": {
        "content": "## Вывод водителей с той же перевозкой",
        "height": 357.7855900491362,
        "width": 1115.923707913178,
        "color": 6
      },
      "id": "6a0ea33a-9daf-4987-8fc1-f68edf90f7f7",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1820,
        844.9384888466118
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "def4355b-3948-4eaf-91ce-bdfedf7fc99b",
      "name": "перевозки+имена",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2560,
        884.9384888466118
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "ab898071-c183-48b0-b7b8-9355eebe5abd",
              "leftValue": "={{ $('перевозки+имена').item.json.quarry_works[0] }}",
              "rightValue": "<i><b>1.</b> Работа ",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a335c703-05a1-4ea4-8306-d1e0e23f15ff",
      "name": "первой работа или перевозка",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2940,
        884.9384888466118
      ]
    },
    {
      "parameters": {
        "jsCode": "let combinedMessages = \"\";\n\nlet index = 1;\nfor (const item of $input.all()) {\n  const data = item.json;\n\n  const isQuarryWork = data.quarry && data.quarry.length > 1;\n\n  let message = \"\";\n\n  if (isQuarryWork) {\n    const quarry = data.quarry[1];\n    const requiredHours = data.required_hours || 0;\n    const comment = data.comment;\n\n    message = `Работа в карьере - <b>${quarry}</b>`;\n    if (data.end_condition === \"По часам\") {\n      message += `\\nНеобходимое количество часов - <b>${requiredHours}</b>`;\n    }\n    if (comment !== false) {\n      message += `\\nКомментарий - <i>${comment}</i>`;\n    }\n    message += `\\n\\n`;\n  } else {\n    const sender = data.sender && data.sender.length > 1 ? data.sender[1] : \"\";\n    const partner = data.partner && data.partner.length > 1 ? data.partner[1] : \"\";\n    const placeFrom = data.place_from && data.place_from.length > 1 ? data.place_from[1] : \"\";\n    const placeTo = data.place_to && data.place_to.length > 1 ? data.place_to[1] : \"\";\n    const material = data.material && data.material.length > 1 ? data.material[1] : \"\";\n    const comment = data.comment;\n    const endCondition = data.end_condition;\n    const requiredCubicMetre = data.required_cubic_metre|| 0;\n    const requiredTon = data.required_ton|| 0;\n\n    let route = placeFrom && placeTo ? `${placeFrom}-${placeTo}` : \"\";\n\n    message = ``;\n    \n    if (sender) message += ` Отправитель - <b>${sender}</b>`;\n    if (partner) message += `\\nПолучатель - <b>${partner}</b>`;\n    if (route) message += `\\nМаршрут - <b>${route}</b>`;\n    if (material) message += `\\nМатериал - <b>${material}</b>`;\n    \n    if (comment !== false) {\n      message += `\\nКомментарий - <i>${comment}</i>`;\n    }\n\n    if (endCondition === \"По перевезенным кубометрам\" && requiredCubicMetre > 0) {\n      message += `\\nТребуемое количество кубометров по перевозке - <b>${requiredCubicMetre}</b>`;\n    }\n\n    if (endCondition === \"По перевезенным тоннам\" && requiredTon > 0) {\n      message += `\\nТребуемое количество тонн по перевозке - <b>${requiredTon}</b>`;\n    }\n\n    message += (item.json.concatenated_driver1 ? \"\\n\\nВодители, выполняющие перевозку с вами:\\n\" + item.json.concatenated_driver1 : \"\");\n\n    message += `\\n\\n`;\n  }\n\n  if (index === 1) {\n    message = `<i>${message.trim()}</i>\\n\\n`;\n  }\n\n  combinedMessages += message;\n  index++;\n}\n\nreturn [{ json: { combinedMessages: combinedMessages.trim() } }];\n"
      },
      "id": "6d4c0c53-437e-4c66-a6f6-625e0a04a6ce",
      "name": "в единое сообщение",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2760,
        884.9384888466118
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "text": "={{ $json.combinedMessages }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к работе в карьере",
                    "additionalFields": {
                      "callback_data": "accept_quarry"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "277abe2d-8183-460b-a969-df23d61d8ec6",
      "name": "работа в карьере",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3200,
        804.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.tg_id }}",
        "text": "={{ $json.combinedMessages }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Начать рейс",
                    "additionalFields": {
                      "callback_data": "pick"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "c084991d-1fd6-4c65-9c0b-4f202300962e",
      "name": "первая перевозка",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3200,
        984.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://dev.everest.lamart.site/transfer_queue_transportation",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "car_id",
              "value": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "64ae4fd3-7807-4d79-84fa-d32eaf613ac6",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        700,
        1024.9384888466118
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.error.message }}",
                    "rightValue": "404 - \"{\\\"error\\\": \\\"Car queue not found or no has elements\\\"}\"",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "7eb4c5ba-70d0-4402-81ee-8383774c14a4",
      "name": "ошибки",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        860,
        1204.9384888466118
      ]
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "=В Odoo для авто {{ $('поиск авто').item.json.number_car }} не найдена перевозка или работа в карьере.\n\nОбратитесь к диспетчеру или логисту"
        }
      },
      "id": "693153de-0405-413f-9d4a-cfc762419632",
      "name": "Нет перевозки или работы в карьере",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1020,
        1204.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "cars.cars",
        "operation": "getAll",
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "driver_id",
              "value": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}"
            }
          ]
        }
      },
      "id": "d2280d1c-030e-46a8-9ad1-0fc7a6fb7e59",
      "name": "получим авто по водителю",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        736,
        1804.9384888466118
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "car_id",
              "value": "={{ $json.id }}"
            },
            {
              "fieldName": "status",
              "operator": "notEqual",
              "value": "Готово"
            }
          ]
        }
      },
      "id": "a49e126f-7a35-4856-9ba9-089365af42f9",
      "name": "получим все заявки",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        936,
        1804.9384888466118
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "a0512750-cabb-473b-a650-4e13eb2f16bb",
              "leftValue": "={{ $json.id }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "07d7fde8-3c7d-4704-b512-b2e27eeb32a6",
      "name": "есть ли неисправности1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1111,
        1804.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.create_date }}",
        "format": "custom",
        "customFormat": "dd.MM.yyyy HH:mm",
        "options": {
          "timezone": true
        }
      },
      "id": "53f4e3e9-8f65-47f3-9445-c7242d0e0d7b",
      "name": "форматируем время в удобный формат1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1391,
        1604.9384888466118
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "79fac96a-c026-4436-8872-f36e52192bb5",
      "name": "объединяем время и текст1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1631,
        1704.9384888466118
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "988c91e8-36b4-4f3f-9131-b8cf97b1dd63",
              "name": "=date_description",
              "value": "={{ $('объединяем время и текст1').item.json[\"formattedDate\"] }} - <b>{{ $('объединяем время и текст1').item.json[\"description_of_maintenance\"] }}</b>",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "06ad587d-bc6c-40c5-9d48-ea09c24700ff",
      "name": "Добавляем теги",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1856,
        1704.9384888466118
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "К выполнению",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "84c7a41e-05e5-4497-b42a-1e5102906729",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "В работе",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "dea7aa17-5f44-45d5-a497-9cea75e85820",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "Требуется проверка",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "id": "58e4f2d6-d9b9-4a2a-bebc-5de2e4eea66f",
      "name": "Разделяем по статусам",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2116,
        1704.9384888466118
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "date_description",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "bcb7c8f3-485e-4254-80c1-0160e8265805",
      "name": "добавим перевод на новую строку",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2536,
        1484.9384888466118
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fee6eb4-9862-4619-a904-ede2a98a73ae",
              "name": "concatenated_date_description",
              "value": "=<b>Можно взять в работу:</b>\n\n{{ $json.concatenated_date_description }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "5fe79875-34a3-4af3-ad14-531a95a87f5b",
      "name": "к выполнению2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2756,
        1484.9384888466118
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "date_description",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "aaeee7a6-56f8-4933-8078-5cb3f15fd181",
      "name": "добавим перевод на новую строку1",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2616,
        1664.9384888466118
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "date_description",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "6b75bc27-5aea-4489-a6a6-253db64fbfa9",
      "name": "добавим перевод на новую строку2",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2616,
        1844.9384888466118
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fee6eb4-9862-4619-a904-ede2a98a73ae",
              "name": "concatenated_date_description",
              "value": "=<b>В работе:</b>\n\n{{ $json.concatenated_date_description }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "75f8cf94-d34a-4741-aca2-50a6b432bcd2",
      "name": "в работе",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2836,
        1664.9384888466118
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fee6eb4-9862-4619-a904-ede2a98a73ae",
              "name": "concatenated_date_description",
              "value": "=<b>Ожидают проверки механиком:</b>\n\n{{ $json.concatenated_date_description }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "7f781f19-189d-44b5-a0f4-19645685c086",
      "name": "требуется проверка",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2836,
        1844.9384888466118
      ]
    },
    {
      "parameters": {},
      "id": "30043972-b671-4290-a360-716af2ef9a61",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3096,
        1624.9384888466118
      ]
    },
    {
      "parameters": {},
      "id": "ff243323-c877-4077-97c7-a04a808f257a",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3336,
        1684.9384888466118
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "concatenated_date_description",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "b3e96c4d-bcd5-45e7-aa22-ca6ae911a831",
      "name": "в один текст объединяем",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        3556,
        1684.9384888466118
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "car_id",
              "value": "={{ $('получим авто по водителю').item.json.id }}"
            },
            {
              "fieldName": "status",
              "value": "В работе"
            }
          ]
        }
      },
      "id": "2e783293-aa4a-436e-b656-49a51c360335",
      "name": "получим все заявки \"В работе\"",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        3801,
        1684.9384888466118
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "230d2a2f-75dd-40a3-a8c7-0ba67887863f",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "fb85b957-b886-4730-9a9f-5c9fdd0b5eae",
      "name": "Проверка есть ли такие заявки",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3981,
        1684.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('в один текст объединяем').item.json.concatenated_concatenated_date_description }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Создать заявку",
                    "additionalFields": {
                      "callback_data": "create_to"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Взять заявку в работу",
                    "additionalFields": {
                      "callback_data": "take_to"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить заявку",
                    "additionalFields": {
                      "callback_data": "finish_to"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "90f22457-33b7-49e3-8b6b-e4bc3df3ec75",
      "name": "Вывод с кнопкой \"завершить заявку\"",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4261,
        1624.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "content": "## Вывод всех заявок",
        "height": 774.298011427,
        "width": 3958.293696830338,
        "color": 6
      },
      "id": "5e7a3093-dd53-493d-9ec5-a90f75739225",
      "name": "Sticky Note28",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        1424.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('в один текст объединяем').item.json.concatenated_concatenated_date_description }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Создать заявку",
                    "additionalFields": {
                      "callback_data": "create_to"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Взять заявку в работу",
                    "additionalFields": {
                      "callback_data": "take_to"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "delete_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "595a6934-75c3-4b83-bf1b-45020539fabf",
      "name": "Вывод с кнопкой \"назад\"",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4256,
        1864.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "odoo_id": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "status": "inputing_create_to"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "18c97d4e-612b-497e-b51c-01cdf718a13a",
      "name": "меняем статус - ввод текста запроса",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        756,
        2284.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "status": "authorized"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "d0d3c9f4-5c60-4f7e-a1d9-9b325e1d20b3",
      "name": "возвращаем статус5",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        536,
        1804.9384888466118
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "content": "## Создание заявки для работ по авто",
        "height": 186.2926857992457,
        "width": 472.9182352408684
      },
      "id": "5733def4-ebf8-4739-b804-6034ad0906e6",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        700,
        2244.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Напишите <b>текстом</b> описание заявки для работы.",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "list_to"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "d5c9faf3-6daa-4c79-a1b0-c67dd523a80a",
      "name": "описание заявки для работы",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        996,
        2284.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.callback_query.from.id }}",
            "last_message_text": "={{ $json.callback_query.message.text }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "96e08c2e-11bc-40e9-ad64-6c62db2b7562",
      "name": "сохраняем текст сообщения1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        960,
        2524.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $json.callback_query.from.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $json.last_message_text }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить рейс",
                    "additionalFields": {
                      "callback_data": "Finish"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Отменить рейс",
                    "additionalFields": {
                      "callback_data": "cancel_round"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "38b32039-1ece-4fde-ab94-e7b545935cf2",
      "name": "прошлое сообщение1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1140,
        2724.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы уверены, что хотите отменить текущий рейс?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "cancel_round_accept"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "cancel_round_back"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "38228dc8-58b0-471b-b702-b10655fea11e",
      "name": "отменить рейс?",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1140,
        2524.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "content": "## Отмена рейсов",
        "height": 625.9423518573242,
        "width": 940.0523646774368,
        "color": 6
      },
      "id": "48a54225-2d93-47a5-8308-977f96a24b0e",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        580,
        2464.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $json.callback_query.from.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "text": "=Напишите причину отмены рейса:",
        "additionalFields": {}
      },
      "id": "cb7ff48b-2f68-4bc3-bf6f-61fbb74af67c",
      "name": "прошлое сообщение3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1060,
        2904.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "status": "inputing_cancel_round_coment"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "fe80ab08-e9ef-4396-8d75-28ba0f8c0473",
      "name": "статус=ввод комментария",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1280,
        2904.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "xrihBpyZE5y4OBiy",
          "name": "pg dev"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Часовой пояс Владивостока (UTC+10)\nconst timeZone = 'Asia/Vladivostok';\n\n// Получение текущего года и месяца\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = now.getMonth(); // Текущий месяц (от 0 до 11)\n\nfunction getWeeksOfMonth(year, month) {\n    const weeks = [];\n    \n    // Первая и последняя дата месяца\n    const firstDayOfMonth = new Date(Date.UTC(year, month, 1));\n    const lastDayOfMonth = new Date(Date.UTC(year, month + 1, 0));\n    \n    // Первая неделя начинается с первого дня месяца или ближайшего понедельника\n    let currentWeekStart = new Date(firstDayOfMonth);\n    \n    // Если первый день месяца не понедельник, сдвигаем на предыдущий понедельник\n    const dayOfWeek = currentWeekStart.getUTCDay();\n    if (dayOfWeek !== 1) {\n        currentWeekStart.setUTCDate(currentWeekStart.getUTCDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n    }\n    \n    while (currentWeekStart <= lastDayOfMonth) {\n        const currentWeekEnd = new Date(currentWeekStart);\n        currentWeekEnd.setUTCDate(currentWeekStart.getUTCDate() + 6);\n\n        // Добавляем начало и конец недели с учетом часового пояса\n        weeks.push({\n            weekStart: new Date(currentWeekStart.toLocaleString('en-US', { timeZone })),\n            weekEnd: new Date(currentWeekEnd.toLocaleString('en-US', { timeZone }))\n        });\n\n        // Переходим к следующей неделе\n        currentWeekStart.setUTCDate(currentWeekStart.getUTCDate() + 7);\n    }\n    \n    return weeks;\n}\n\nconst weeksOfMonth = getWeeksOfMonth(year, month);\n\nreturn weeksOfMonth;\n"
      },
      "id": "37ef4a75-8018-4b3a-add5-ee33e96587db",
      "name": "недели",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        3244.938488846612
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "db371d02-6c7c-4bcd-ac84-f5ac00a40045",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1200,
        3244.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "316f80f5-06a0-4896-941e-c94b12d947f2",
      "name": "Replace Me",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2720,
        3684.938488846612
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=driver.schedule",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "date",
              "operator": "greaterOrEqual",
              "value": "={{ $json.weekStart }}"
            },
            {
              "fieldName": "date",
              "operator": "lesserOrEqual",
              "value": "={{ $json.weekEnd }}"
            },
            {
              "fieldName": "driver",
              "value": "={{ $('Execute Workflow Trigger').all()[0].json.odoo_id }}"
            }
          ]
        }
      },
      "id": "42669f8e-d6e7-44d9-bc1d-fc2726335c51",
      "name": "графики",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1500,
        3384.938488846612
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "c5cd353c-8234-4c14-8892-baf82ca1563d",
      "name": "по возрастанию",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1920,
        3304.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4940aeb3-5f27-40c5-8a52-202f6205ef49",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5bd26374-3530-4594-bd23-ad9aa5687758",
      "name": "есть данные?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1700,
        3384.938488846612
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "5aaafca0-4eee-43f4-ba9e-07dc0b1f91d0",
      "name": "объединяем1",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2300,
        3524.938488846612
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f6926f9-2585-4381-b682-1c2958d4eb91",
              "name": "data",
              "value": "={{ $json.date.toDateTime().setLocale('ru').format('dd.MM ccc') }}: {{ $json.day_type[1] == \"Выходной день\" ? \"\" : $json.car[1] + \" - \" }}{{ $json.day_type[1] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "c89b2ba7-ef9d-4346-a427-e6af9d0718a0",
      "name": "создаём строку1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2100,
        3364.938488846612
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f6926f9-2585-4381-b682-1c2958d4eb91",
              "name": "data",
              "value": "=<b>{{ $('недели').item.json.weekStart.toDateTime().format('dd.MM') }} - {{ $('недели').item.json.weekEnd.toDateTime().format('dd.MM') }}</b>\nНет данных",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ddd1a6b3-8f17-4a0d-bf94-48123514122f",
      "name": "создаём строку2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1960,
        3544.938488846612
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "41059292-096c-4ce9-8077-188d3f8db20d",
              "name": "data",
              "value": "=<b>{{ $('Loop Over Items').item.json.weekStart.toDateTime().format('dd.MM') }} - {{ $('Loop Over Items').item.json.weekEnd.toDateTime().format('dd.MM') }}</b>\n{{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "23a78794-006a-45c2-afe5-cd8cbefe985f",
      "name": "Добавляем недели",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2520,
        3524.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=График на текущий месяц\n\n{{ $json.concatenated_data }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "back_to_week_schedule"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "9f2dfa88-1735-48ef-b818-e2198be7793a",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1700,
        3124.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data",
              "separateBy": "other",
              "customSeparator": "={{ '\\n\\n' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "bb33f50d-cf35-4f1d-87dd-05b1e8c89e4a",
      "name": "отделяем недели",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        1480,
        3144.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## График за месяц",
        "height": 713.4743802342305,
        "width": 1752.3999587655694,
        "color": 6
      },
      "id": "e4b05fa7-5f0f-45ba-b1cd-3cead54bc923",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1120,
        3124.938488846612
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0711410c-59a6-406a-a35f-6762937046c6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "list_to",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0711410c-59a6-406a-a35f-6762937046c6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "create_to",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "684e48f6-3eb4-4162-a56c-a5f69d8caa7d",
      "name": "заявки по авто",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        220,
        1944.9384888466118
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "cancel_round",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e14ed3b3-446f-4596-be20-58b9fdce7618",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "cancel_round_back",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cda9535a-3ff4-446a-911f-edbe0d2f9750",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "cancel_round_accept",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "13c181a7-f6f4-4cfa-9f76-b62bad83ec27",
      "name": "отмена рейсов",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        580,
        2724.938488846612
      ]
    },
    {
      "parameters": {
        "includeTime": false,
        "options": {}
      },
      "id": "b80edfda-8e8b-4421-8d73-67a2bfd46418",
      "name": "сегодняшняя дата",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        720,
        4044.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.currentDate }}",
        "format": "custom",
        "customFormat": "c",
        "options": {}
      },
      "id": "f3137273-fef5-43e5-b20f-a2d53184a922",
      "name": "какой сегодня день недели?",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        940,
        4044.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $('сегодняшняя дата').item.json.currentDate }}",
        "duration": "={{ 7 - $json.formattedDate}}",
        "outputFieldName": "endOfWeek",
        "options": {}
      },
      "id": "9ac28d4d-c1a0-4f7e-ba19-a7a298f220f2",
      "name": "конец недели",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1180,
        3924.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "subtractFromDate",
        "magnitude": "={{ $('сегодняшняя дата').item.json.currentDate }}",
        "duration": "={{ $json.formattedDate.toNumber() - 1 }}",
        "outputFieldName": "beginOfWeek",
        "options": {}
      },
      "id": "7f3b3f74-704c-408e-9835-a99db44943c9",
      "name": "начало недели",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1180,
        4144.938488846612
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "b7d43946-452e-4f98-a2ce-cdfcc8efc92e",
      "name": "объединяем",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2420,
        3904.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=График на текущую неделю ({{ $('начало недели').item.json.beginOfWeek.toDateTime().format('dd.MM') }} - {{ $('конец недели').item.json.endOfWeek.toDateTime().format('dd.MM') }})\n\n{{ $json.concatenated_data }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "График за месяц",
                    "additionalFields": {
                      "callback_data": "month_schedule"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "e491005a-ebb5-4a87-9de6-b9ea68763758",
      "name": "Telegram1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2600,
        4124.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f6926f9-2585-4381-b682-1c2958d4eb91",
              "name": "concatenated_data",
              "value": "Нет данных",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "5fb4b782-9cdd-4035-9d59-c4cc1f3c7d65",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2000,
        4124.938488846612
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e9355f27-7149-4cc4-8672-570d0fcf1912",
              "name": "data",
              "value": "={{ $json.date.toDateTime().setLocale('ru').format('dd.MM ccc') }}: {{ $json.day_type[1] == \"Выходной день\" ? \"\" : $json.car[1] + \" - \" }}{{ $json.day_type[1] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4e8b3497-bcc7-447a-a1ca-8592bde183a0",
      "name": "создаём строку",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2200,
        3904.938488846612
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=driver.schedule",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "date",
              "operator": "greaterOrEqual",
              "value": "={{ $json.beginOfWeek }}"
            },
            {
              "fieldName": "date",
              "operator": "lesserOrEqual",
              "value": "={{ $json.endOfWeek }}"
            },
            {
              "fieldName": "driver",
              "value": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}"
            }
          ]
        }
      },
      "id": "87511c1b-aa9c-4199-a01b-dca23f2188af",
      "name": "графики1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1580,
        4044.938488846612
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "ee0f2ed1-6c21-4f34-b2e1-929656661cc0",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1380,
        4044.938488846612
      ]
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "8a2dfcab-cdd1-420c-ad75-cc18588b60dd",
      "name": "по возрастанию1",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2000,
        3904.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4940aeb3-5f27-40c5-8a52-202f6205ef49",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e5b9cdf1-2cf9-492a-95bf-171357c51883",
      "name": "есть данные?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1800,
        4044.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## График недели",
        "height": 380.3105971190758,
        "width": 2109.5516091973923,
        "color": 6
      },
      "id": "5abfd206-5a2a-449c-b090-6668a7143c9d",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        684.644892905102,
        3900.520409576686
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "month_schedule",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "007f0b2f-857f-4bff-8730-4fc66f8151d6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "back_to_week_schedule",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "d89c91a7-18dd-4836-bcbc-d70e6d7528d1",
      "name": "график",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        460,
        3844.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "cfc3524d-ce2f-42a3-8094-5374029ad45a",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        860,
        4704.938488846612
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=transportation.round",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "time_of_start",
            "driver_rate",
            "driver_with_trailer"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "driver",
              "value": "={{ $json.odoo_id }}"
            },
            {
              "fieldName": "status",
              "value": "Завершен"
            }
          ]
        }
      },
      "id": "cbe9f42a-0e94-4f66-aeef-579cc0eecb37",
      "name": "Получаем рейсы",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        920,
        5424.938488846612
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=quarry.work",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "quarry_hours",
            "price_for_driver",
            "create_date",
            "start_time"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "driver",
              "value": "={{ $json.odoo_id }}"
            },
            {
              "fieldName": "status",
              "value": "Завершены"
            }
          ]
        }
      },
      "id": "2bb41cba-b2b8-4488-9eb2-1edc73b821e5",
      "name": "Получение работ в карьере2",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        940,
        5624.938488846612
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "060a27ca-8ac2-46ff-93ae-5619b8142f4e",
      "name": "Объединение рейсов в один файл",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1260,
        5404.938488846612
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "29b4ae1c-21a6-48a2-8763-4821cdc6f9cf",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        660,
        5524.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные из предыдущего кубика\nconst inputData = items.map(item => item.json);\n\n// Функция для добавления 10 часов ко времени\nfunction addHoursToTime(timeStr, hours) {\n    const dateObj = new Date(timeStr.replace(\" \", \"T\")); // Преобразуем строку времени в объект Date\n    dateObj.setHours(dateObj.getHours() + hours); // Добавляем 10 часов\n    return dateObj.toISOString().replace(\"T\", \" \").split(\".\")[0]; // Преобразуем обратно в строку и убираем миллисекунды\n}\n\n// Функция для подсчета заработка и количества рейсов по датам\nfunction calculateTotalsByDate(data) {\n    const totalsByDate = {};\n\n    data.forEach(entry => {\n        entry.data.forEach(round => {\n            const { driver_rate, driver_with_trailer, time_of_start } = round;\n\n            // Добавляем 10 часов ко времени\n            const adjustedTime = addHoursToTime(time_of_start, 10);\n\n            // Извлекаем только дату из скорректированного времени\n            const date = adjustedTime.split(\" \")[0];\n\n            // Инициализируем данные для каждой новой даты\n            if (!totalsByDate[date]) {\n                totalsByDate[date] = {\n                    total_count: 0,  // Общее количество рейсов\n                    total_earnings: 0  // Общий заработок\n                };\n            }\n\n            // Увеличиваем количество рейсов\n            totalsByDate[date].total_count++;\n\n            // Увеличиваем сумму заработка\n            totalsByDate[date].total_earnings += driver_rate;\n        });\n    });\n\n    // Преобразуем объект в массив для удобства обработки\n    return Object.keys(totalsByDate).map(date => ({\n        date: date,\n        total_count: totalsByDate[date].total_count,\n        total_earnings: totalsByDate[date].total_earnings\n    }));\n}\n\n// Обрабатываем данные\nconst processedData = calculateTotalsByDate(inputData);\n\n// Возвращаем результат для следующего кубика\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "a237a87c-3b86-40db-8c0f-8d9770d8ec06",
      "name": "считаем по дням кол-во рейсов и заработок",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        5404.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные из предыдущего кубика\nconst inputData = items.map(item => item.json);\n\n// Функция для обработки данных\nfunction calculateTotals(data) {\n    return data.map(entry => {\n        const { id, quarry_hours, price_for_driver, date, start_time } = entry;\n\n        // Если price_for_driver равен 0 или false, заработок равен 0\n        if (!price_for_driver) {\n            // Добавляем 10 часов к дате\n            const adjustedDate = new Date(start_time);\n            adjustedDate.setHours(adjustedDate.getHours() + 10); // Прибавляем 10 часов\n\n            return {\n                id: id,\n                quarry_hours: quarry_hours,  // Количество карьерных часов\n                total: 0,  // Заработок = 0\n                date: adjustedDate.toISOString(),  // Для вывода используем скорректированную дату\n                original_date: date  // Сохраняем оригинальную дату\n            };\n        }\n\n        // Цена водителя уже итоговая, просто передаем её в результат\n        const total = parseFloat(price_for_driver);\n\n        // Добавляем 10 часов к дате\n        const adjustedDate = new Date(start_time);\n        adjustedDate.setHours(adjustedDate.getHours() + 10); // Прибавляем 10 часов\n\n        return {\n            id: id,\n            quarry_hours: quarry_hours,  // Количество карьерных часов\n            total: total,  // Общий заработок = price_for_driver\n            date: adjustedDate.toISOString(),  // Для вывода используем скорректированную дату\n            original_date: date  // Сохраняем оригинальную дату\n        };\n    });\n}\n\n// Обрабатываем входные данные\nconst processedData = calculateTotals(inputData);\n\n// Возвращаем результат в формате JSON для следующего кубика\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "9524d5f8-1a3e-45ad-84f6-66b6ffebca88",
      "name": "считаем часы и заработок",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        5644.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "f6e8d5ba-e4a4-41e2-b281-6372d776ff12",
      "name": "соединяем рейсы и работы",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2020,
        5444.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные через items\nconst inputData = items.map(item => item.json);\n\n// Задаем текущую дату для тестирования\nconst today = new Date(); //'2024-10-11T00:00:00'\ntoday.setMinutes(today.getMinutes() + today.getTimezoneOffset() + (10 * 60));\n\n// Определяем начало текущей недели (понедельник текущей недели)\nconst startOfWeek = new Date(today);\nstartOfWeek.setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1)); // Учитываем воскресенье как последний день недели\n\n// Функция для обнуления времени в дате\nfunction resetTime(date) {\n    const newDate = new Date(date);\n    newDate.setHours(0, 0, 0, 0); // Убираем компоненты времени\n    return newDate;\n}\n\n// Функция для фильтрации данных по дням\nfunction getDailyReport(date) {\n    let totalCount = 0;      // Количество рейсов\n    let totalQuarryHours = 0; // Карьерные часы\n    let totalEarnings = 0;    // Общий заработок за день\n\n    const resetDate = resetTime(date);\n\n    inputData.forEach(entry => {\n        const entryDate = resetTime(new Date(entry.date));\n\n        // Сравниваем даты без учета времени\n        if (entryDate.toISOString().split('T')[0] === resetDate.toISOString().split('T')[0]) {\n            if (entry.total_count !== undefined && entry.total_earnings !== undefined) {\n                totalCount += entry.total_count;  // Суммируем количество рейсов\n                totalEarnings += entry.total_earnings; // Суммируем заработок\n            } else if (entry.quarry_hours !== undefined && entry.total !== undefined) {\n                totalQuarryHours += entry.quarry_hours; // Суммируем карьерные часы\n                totalEarnings += entry.total; // Суммируем заработок за работы в карьере\n            }\n        }\n    });\n\n    return {\n        count: totalCount,\n        quarry_hours: totalQuarryHours,\n        total: totalEarnings\n    };\n}\n\n// Функция для генерации отчета по дням недели\nfunction getCurrentWeekReport() {\n    let textMessage = '📊 <b>Отчет за текущую неделю</b>\\n\\n';\n\n    let currentDate = new Date(today);\n    while (currentDate >= startOfWeek) {\n        const dayReport = getDailyReport(currentDate);\n        const dayOfWeek = currentDate.toLocaleDateString('ru-RU', { weekday: 'long' });\n        const dateStr = currentDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n\n        textMessage += `📅 <b>${dayOfWeek} (${dateStr}):</b>\\n`;\n        if (dayReport.count === 0 && dayReport.quarry_hours === 0) {\n            textMessage += 'Не было перевозок\\n\\n';\n        } else {\n            textMessage += `🚚 Количество рейсов: ${dayReport.count}\\n`;\n            textMessage += `🕑 Карьерные часы: ${dayReport.quarry_hours} ч\\n`;\n            textMessage += `💵 Заработок: ${dayReport.total} руб.\\n\\n`;\n        }\n\n        // Переходим к предыдущему дню\n        currentDate.setDate(currentDate.getDate() - 1);\n    }\n\n    return textMessage;\n}\n\n// Функция для получения отчета за месяц\nfunction getMonthlyReport(startDate, endDate) {\n    let totalCount = 0;\n    let totalQuarryHours = 0;\n    let totalEarnings = 0;\n\n    const start = resetTime(startDate);\n    const end = resetTime(endDate);\n\n    inputData.forEach(entry => {\n        const entryDate = resetTime(new Date(entry.date));\n\n        if (entryDate >= start && entryDate <= end) {\n            if (entry.total_count !== undefined && entry.total_earnings !== undefined) {\n                totalCount += entry.total_count;\n                totalEarnings += entry.total_earnings;\n            } else if (entry.quarry_hours !== undefined && entry.total !== undefined) {\n                totalQuarryHours += entry.quarry_hours;\n                totalEarnings += entry.total;\n            }\n        }\n    });\n\n    return {\n        count: totalCount,\n        quarry_hours: totalQuarryHours,\n        total: totalEarnings\n    };\n}\n\n// Определяем начало и конец текущего месяца\nconst startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\nconst endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0); // Последний день месяца\n\n// Получаем отчет за текущий месяц\nconst currentMonthReport = getMonthlyReport(startOfMonth, today);\n\n// Проверка на вывод отчета за прошлый месяц\nlet previousMonthText = '';\nconst firstOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\nconst isInFirstTenDays = today >= firstOfMonth && today < new Date(today.getFullYear(), today.getMonth(), 11, 5, 0, 0);\n\n// Если нужно вывести отчет за прошлый месяц\nif (isInFirstTenDays) {\n    const startOfPreviousMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    const endOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Последний день прошлого месяца\n\n    const previousMonthReport = getMonthlyReport(startOfPreviousMonth, endOfPreviousMonth);\n\n    previousMonthText = `\n📊 <b>Отчет за прошлый месяц</b>\n\n🚚 Количество рейсов: ${previousMonthReport.count}\n🕑 Карьерные часы: ${previousMonthReport.quarry_hours} ч\n💵 Заработок: ${previousMonthReport.total} руб.\\n`;\n}\n\n// Формируем отчет за текущую неделю\nlet textMessage = getCurrentWeekReport();\n\n// Формируем отчет за текущий месяц\nlet currentMonthText = `📊 <b>Отчет за текущий месяц</b>\n\n🚚 Количество рейсов: ${currentMonthReport.count}\n🕑 Карьерные часы: ${currentMonthReport.quarry_hours} ч\n💵 Заработок: ${currentMonthReport.total} руб.\\n`;\n\n// Добавляем месячные отчеты\ntextMessage += currentMonthText;\n\n// Добавляем отчет за прошлый месяц в самом конце, если это необходимо\nif (previousMonthText) {\n    textMessage += previousMonthText;\n}\n\n// Возвращаем результат в формате JSON\nreturn [\n    {\n        json: {\n            message: textMessage\n        }\n    }\n];\n"
      },
      "id": "c0964297-d566-4f22-bb5d-3095d08f970a",
      "name": "сортируем все данные, считаем итоги, преобразуем в сообщение",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        5444.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $json.message }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "За месяц",
                    "additionalFields": {
                      "callback_data": "month_stats_reply"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "after_stats"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "bf8de9ee-7933-490c-9ff8-613c6ce400dc",
      "name": "вывод недельной статистики",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2620,
        5444.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=transportation.round",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "time_of_start",
            "driver_rate",
            "driver_with_trailer"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "driver",
              "value": "={{ $json.odoo_id }}"
            },
            {
              "fieldName": "status",
              "value": "Завершен"
            }
          ]
        }
      },
      "id": "8e9da9b6-1678-4a6f-a827-4c218143c095",
      "name": "Получаем рейсы1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1300,
        4484.938488846612
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=quarry.work",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "quarry_hours",
            "price_for_driver",
            "create_date",
            "start_time"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "driver",
              "value": "={{ $json.odoo_id }}"
            },
            {
              "fieldName": "status",
              "value": "Завершены"
            }
          ]
        }
      },
      "id": "43c1b68e-5890-4647-922a-0ed078027201",
      "name": "Получение работ в карьере",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1300,
        4684.938488846612
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "c4b9bcc6-bcbb-41ea-9690-f4839ed1da95",
      "name": "Объединение рейсов в один файл1",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1540,
        4484.938488846612
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=salary.salary",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "driver",
              "value": "={{ $json.odoo_id }}"
            }
          ]
        }
      },
      "id": "1c7f11c4-a5e3-43fb-9752-fcc984405b41",
      "name": "получаем из модуля зарплата водителя",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1300,
        4884.938488846612
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=salary.image",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "date_start",
            "date_end",
            "required_bonus_amount",
            "required_fine_amount",
            "required_comment"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.salary_constructor_bonus }}"
            }
          ]
        }
      },
      "id": "37b52bb1-797d-4744-8375-72186ed6f67b",
      "name": "получаем записи о премиях/штрафах",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1540,
        4884.938488846612
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "ITgOrhO4Hf2QcDtf",
          "name": "odoo dev"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из предыдущей ноды\nconst items = $input.all();\n\n// Функция для получения месяца из даты в формате \"YYYY-MM\"\nconst getMonth = (date) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = ('0' + (d.getMonth() + 1)).slice(-2); // Добавляем ведущий ноль к месяцу, если нужно\n  return `${year}-${month}`;\n};\n\n// Обрабатываем каждую запись\nconst result = items.map(item => {\n  const data = item.json;\n\n  // Получаем месяц из date_start (дата старта)\n  const month = getMonth(data.date_start);\n\n  // Возвращаем преобразованные данные\n  return {\n    id: data.id,\n    date: month, // Месяц, соответствующий дате старта\n    required_bonus_amount: data.required_bonus_amount,\n    required_fine_amount: data.required_fine_amount,\n    required_comment: data.required_comment\n  };\n});\n\nreturn result;\n"
      },
      "id": "6f034d11-dbbb-4d84-9d4b-13bf4c33a4be",
      "name": "преобразуем премии/штрафы",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1820,
        4884.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные из предыдущего кубика\nconst inputData = items.map(item => item.json);\n\n// Функция для добавления 10 часов ко времени\nfunction addHoursToTime(timeStr, hours) {\n    const dateObj = new Date(timeStr.replace(\" \", \"T\")); // Преобразуем строку времени в объект Date\n    dateObj.setHours(dateObj.getHours() + hours); // Добавляем 10 часов\n    return dateObj.toISOString().replace(\"T\", \" \").split(\".\")[0]; // Преобразуем обратно в строку и убираем миллисекунды\n}\n\n// Функция для подсчета заработка и количества рейсов по датам\nfunction calculateTotalsByDate(data) {\n    const totalsByDate = {};\n\n    data.forEach(entry => {\n        entry.data.forEach(round => {\n            const { driver_rate, driver_with_trailer, time_of_start } = round;\n\n            // Добавляем 10 часов ко времени\n            const adjustedTime = addHoursToTime(time_of_start, 10);\n\n            // Извлекаем только дату из скорректированного времени\n            const date = adjustedTime.split(\" \")[0];\n\n            // Инициализируем данные для каждой новой даты\n            if (!totalsByDate[date]) {\n                totalsByDate[date] = {\n                    total_count: 0,  // Общее количество рейсов\n                    total_earnings: 0  // Общий заработок\n                };\n            }\n\n            // Увеличиваем количество рейсов\n            totalsByDate[date].total_count++;\n\n            // Увеличиваем сумму заработка\n            totalsByDate[date].total_earnings += driver_rate;\n        });\n    });\n\n    // Преобразуем объект в массив для удобства обработки\n    return Object.keys(totalsByDate).map(date => ({\n        date: date,\n        total_count: totalsByDate[date].total_count,\n        total_earnings: totalsByDate[date].total_earnings\n    }));\n}\n\n// Обрабатываем данные\nconst processedData = calculateTotalsByDate(inputData);\n\n// Возвращаем результат для следующего кубика\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "0f245579-4b8c-4c55-bda8-f16d5e2057fd",
      "name": "обрабатываем рейсы",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1820,
        4484.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные из предыдущего кубика\nconst inputData = items.map(item => item.json);\n\n// Функция для обработки данных\nfunction calculateTotals(data) {\n    return data.map(entry => {\n        const { id, quarry_hours, price_for_driver, date, start_time } = entry;\n\n        // Если price_for_driver равен 0 или false, заработок равен 0\n        if (!price_for_driver) {\n            // Добавляем 10 часов к дате\n            const adjustedDate = new Date(start_time);\n            adjustedDate.setHours(adjustedDate.getHours() + 10); // Прибавляем 10 часов\n\n            return {\n                id: id,\n                quarry_hours: quarry_hours,  // Количество карьерных часов\n                total: 0,  // Заработок = 0\n                date: adjustedDate.toISOString(),  // Для вывода используем скорректированную дату\n                original_date: date  // Сохраняем оригинальную дату\n            };\n        }\n\n        // Цена водителя уже итоговая, просто передаем её в результат\n        const total = parseFloat(price_for_driver);\n\n        // Добавляем 10 часов к дате\n        const adjustedDate = new Date(start_time);\n        adjustedDate.setHours(adjustedDate.getHours() + 10); // Прибавляем 10 часов\n\n        return {\n            id: id,\n            quarry_hours: quarry_hours,  // Количество карьерных часов\n            total: total,  // Общий заработок = price_for_driver\n            date: adjustedDate.toISOString(),  // Для вывода используем скорректированную дату\n            original_date: date  // Сохраняем оригинальную дату\n        };\n    });\n}\n\n// Обрабатываем входные данные\nconst processedData = calculateTotals(inputData);\n\n// Возвращаем результат в формате JSON для следующего кубика\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "7f9189f7-5991-4840-87e5-8775cbca55a9",
      "name": "обрабатываем работы",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1660,
        4684.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "633e7c48-59ed-4157-8774-0af80995dcd4",
      "name": "рейсы+работы",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2120,
        4564.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "9bf482b9-7f7a-4b82-ae71-b92798362dba",
      "name": "добавляем еще премии/штрафы",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2400,
        4644.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные через items\nconst inputData = items.map(item => item.json);\n\n// Задаем текущую дату с учетом часового пояса Владивостока\nconst today = new Date();//'2024-10-07T00:00:00'\ntoday.setMinutes(today.getMinutes() + today.getTimezoneOffset() + (10 * 60)); // UTC +10 Владивосток\n\n// Функция для обнуления времени в дате\nfunction resetTime(date) {\n    const newDate = new Date(date);\n    newDate.setHours(0, 0, 0, 0); // Убираем компоненты времени\n    return newDate;\n}\n\n// Функция для фильтрации данных по дням\nfunction getDailyReport(date) {\n    let totalCount = 0;      // Количество рейсов\n    let totalQuarryHours = 0; // Карьерные часы\n    let totalEarnings = 0;    // Общий заработок за день\n\n    const resetDate = resetTime(date);\n\n    inputData.forEach(entry => {\n        const entryDate = resetTime(new Date(entry.date));\n\n        // Сравниваем даты без учета времени\n        if (entryDate.toISOString().split('T')[0] === resetDate.toISOString().split('T')[0]) {\n            if (entry.total_count !== undefined && entry.total_earnings !== undefined) {\n                totalCount += entry.total_count;  // Суммируем количество рейсов\n                totalEarnings += entry.total_earnings; // Суммируем заработок\n            } else if (entry.quarry_hours !== undefined && entry.total !== undefined) {\n                totalQuarryHours += entry.quarry_hours; // Суммируем карьерные часы\n                totalEarnings += entry.total; // Суммируем заработок за работы в карьере\n            }\n        }\n    });\n    return {\n        count: totalCount,\n        quarry_hours: totalQuarryHours,\n        total: totalEarnings\n    };\n}\n\n// Функция для получения отчета за неделю\nfunction getWeeklyReport(startDate, endDate) {\n    let totalCount = 0;\n    let totalQuarryHours = 0;\n    let totalEarnings = 0;\n\n    const start = resetTime(startDate);\n    const end = resetTime(endDate);\n\n    inputData.forEach(entry => {\n        const entryDate = resetTime(new Date(entry.date));\n\n        if (entryDate >= start && entryDate <= end) {\n            if (entry.total_count !== undefined && entry.total_earnings !== undefined) {\n                totalCount += entry.total_count;\n                totalEarnings += entry.total_earnings;\n            } else if (entry.quarry_hours !== undefined && entry.total !== undefined) {\n                totalQuarryHours += entry.quarry_hours;\n                totalEarnings += entry.total;\n            }\n        }\n    });\n    return {\n        count: totalCount,\n        quarry_hours: totalQuarryHours,\n        total: totalEarnings\n    };\n}\n\n// Функция для генерации срезов недели, где срезы заканчиваются воскресеньем\nfunction getWeeklySlices(startDate, endDate) {\n    let currentWeekStart = new Date(startDate);\n    let weeklyReports = [];\n    let totalWeeklyEarnings = 0;\n\n    while (currentWeekStart <= endDate) {\n        let currentWeekEnd = new Date(currentWeekStart);\n\n        // Определяем день недели (0 - воскресенье, 6 - суббота)\n        const dayOfWeek = currentWeekStart.getDay();\n\n        // Если это первый день, и он не понедельник, делаем срез только за один день\n        if (dayOfWeek === 0) {\n            currentWeekEnd = new Date(currentWeekStart); // Воскресенье, срез за 1 день\n        } else {\n            currentWeekEnd.setDate(currentWeekStart.getDate() + (7 - dayOfWeek)); // Заканчиваем срез в воскресенье\n        }\n\n        if (currentWeekEnd > endDate) {\n            currentWeekEnd = new Date(endDate); // Ограничиваем конец недели последним днем\n        }\n\n        const report = getWeeklyReport(currentWeekStart, currentWeekEnd);\n        totalWeeklyEarnings += report.total;\n\n        // Формируем текст недели с ведущими нулями для дня и месяца\n        let weekText = `📅 <b>Неделя с ${String(currentWeekStart.getDate()).padStart(2, '0')}.${String(currentWeekStart.getMonth() + 1).padStart(2, '0')} по ${String(currentWeekEnd.getDate()).padStart(2, '0')}.${String(currentWeekEnd.getMonth() + 1).padStart(2, '0')}:</b>\\n`;\n        weekText += `🚚 Количество рейсов: ${report.count}\\n`;\n        weekText += `🕑 Карьерные часы: ${report.quarry_hours} ч\\n`;\n        weekText += `💵 Заработок: ${report.total} руб.\\n\\n`;\n\n        weeklyReports.push(weekText);\n        currentWeekStart.setDate(currentWeekEnd.getDate() + 1); // Начинаем следующую неделю\n    }\n\n    return {\n        weeklyText: weeklyReports.reverse().join(''),\n        totalWeeklyEarnings: totalWeeklyEarnings\n    };\n}\n\n// Функция для получения отчета за прошлый месяц\nfunction getPreviousMonthReport() {\n    const previousMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    const endOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Последний день предыдущего месяца\n    return getWeeklySlices(previousMonth, endOfPreviousMonth);\n}\n\n// Функция для получения отчета за текущий месяц до текущего дня\nfunction getCurrentMonthReport() {\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    return getWeeklySlices(startOfMonth, today);\n}\n\n// Функция для подсчета бонусов, штрафов и комментариев\nfunction getMonthlyBonusesAndFines(month) {\n    let bonusAmount = 0;\n    let fineAmount = 0;\n    let comments = [];\n\n    inputData.forEach(entry => {\n        const entryMonth = entry.date;\n\n        if (entryMonth === month) {\n            if (entry.required_bonus_amount && entry.required_bonus_amount !== 0) {\n                bonusAmount += entry.required_bonus_amount;\n            }\n\n            if (entry.required_fine_amount && entry.required_fine_amount !== 0) {\n                fineAmount += entry.required_fine_amount;\n            }\n\n            if (entry.required_comment && entry.required_comment !== false) {\n                comments.push(entry.required_comment);\n            }\n        }\n    });\n\n    return {\n        bonus: bonusAmount,\n        fine: fineAmount,\n        comments: comments\n    };\n}\n\n// Основная логика выбора отчета\nlet textMessage = '';\nlet totalEarnings = 0;\n\nconst dayOfMonth = today.getDate();\nconst hourOfDay = today.getHours();\n\nconst currentMonth = `${today.getFullYear()}-${('0' + (today.getMonth() + 1)).slice(-2)}`;\n\n// Если день месяца с 1 по 11 и время до 5:00 по Владивостоку, показываем прошлый месяц\nif (dayOfMonth < 11 || (dayOfMonth === 11 && hourOfDay < 5)) {\n    textMessage += '📊 <b>Отчет за прошлый месяц</b>\\n\\n';\n    const report = getPreviousMonthReport();\n    textMessage += report.weeklyText;\n\n    const previousMonth = `${today.getFullYear()}-${('0' + today.getMonth()).slice(-2)}`;\n    const bonusesAndFines = getMonthlyBonusesAndFines(previousMonth);\n\n    if (bonusesAndFines.bonus > 0) {\n        textMessage += `💰 Премия: ${bonusesAndFines.bonus} руб.\\n`;\n    }\n    if (bonusesAndFines.fine > 0) {\n        textMessage += `⚠️ Штраф: ${bonusesAndFines.fine} руб.\\n`;\n    }\n    if (bonusesAndFines.comments.length > 0) {\n        textMessage += `📝 Комментарии: ${bonusesAndFines.comments.join(', ')}\\n`;\n    }\n\n    totalEarnings = report.totalWeeklyEarnings + bonusesAndFines.bonus - bonusesAndFines.fine;\n} else {\n    textMessage += '📊 <b>Отчет за текущий месяц</b>\\n\\n';\n    const report = getCurrentMonthReport();\n    textMessage += report.weeklyText;\n\n    const bonusesAndFines = getMonthlyBonusesAndFines(currentMonth);\n\n    if (bonusesAndFines.bonus > 0) {\n        textMessage += `💰 Премия: ${bonusesAndFines.bonus} руб.\\n`;\n    }\n    if (bonusesAndFines.fine > 0) {\n        textMessage += `⚠️ Штраф: ${bonusesAndFines.fine} руб.\\n`;\n    }\n    if (bonusesAndFines.comments.length > 0) {\n        textMessage += `📝 Комментарии: ${bonusesAndFines.comments.join(', ')}\\n`;\n    }\n\n    totalEarnings = report.totalWeeklyEarnings + bonusesAndFines.bonus - bonusesAndFines.fine;\n}\n\nconst finalTotal = totalEarnings;\ntextMessage += `\\n💵 <b>Сумма итого: ${finalTotal} руб.</b>`;\n\nreturn [\n    {\n        json: {\n            message: textMessage\n        }\n    }\n];"
      },
      "id": "cf8f17f0-6ae4-4963-9eaa-d172a81a8e60",
      "name": "формируем месячную статистику и преобразуем в сообщение",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2700,
        4644.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('формируем месячную статистику и преобразуем в сообщение').item.json.message }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "week_stats_back"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "8ab204ee-de5e-4bf8-9510-bc5725664bdc",
      "name": "выводим месячную статистику",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3220,
        4504.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('формируем месячную статистику и преобразуем в сообщение').item.json.message }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "stats"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "40d79b13-b02d-4974-a6fe-1947f713316c",
      "name": "выводим месячную статистику1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3220,
        4724.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.data }}",
                    "rightValue": "month_stats_reply",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a038aa73-8510-436e-bd16-830bbc32976b",
                    "leftValue": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.data }}",
                    "rightValue": "month_stats_inline",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "0c8fb467-d42d-43f6-8492-4e89f3b8a760",
      "name": "разделение запроса и реплай и инлайн",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        2960,
        4644.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## Возврат к недельной статистике реплай",
        "height": 517.269554762983,
        "width": 2216.548831746288
      },
      "id": "e5ace7b9-d2f0-49bd-b657-1c5bdeb60122",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        620,
        5304.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## Месячная статистика",
        "height": 674.7443857922335,
        "width": 2513.100860240324
      },
      "id": "9f2dfccf-47f0-4c31-b7b5-3c13c15eba9e",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        620,
        4424.938488846612
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "month_stats",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "985d41f2-d159-4d0f-8ec8-8e638182474a",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "week_stats_back",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "289a8004-b01f-4ebb-955b-e7048e57762e",
      "name": "инлайн кнопки для статистики",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        300,
        4704.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_car_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{$json.odoo_id}}\n}  ",
        "options": {}
      },
      "id": "450197fb-b6b9-40c7-b5ef-57761334c4c5",
      "name": "получаем номер авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        800,
        6084.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "5U3MvudgCGq43NbB",
          "mode": "id"
        },
        "options": {}
      },
      "id": "d40ee50e-c4da-4258-ab8a-fbe610a72422",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        2740,
        6264.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_car_queue",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"car_id\": {{$json.id}}\n}  ",
        "options": {}
      },
      "id": "ae57c19f-0fba-48ba-8c36-e721ca683be4",
      "name": "получаем перевозки из очереди авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1120,
        6084.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://dev.everest.lamart.site/get_rounds_by_transportation",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"transportation_id\": {{ $json.transportations[0].transportation }}\n}  ",
        "options": {}
      },
      "id": "057dcff9-73ea-4dba-aac3-8eca887fad9e",
      "name": "получаем рейсы в перевозке",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1420,
        6084.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "transportation_rounds",
        "options": {}
      },
      "id": "47eceb91-d47a-4da9-9081-d1ae67a77103",
      "name": "разделяем рейсы",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1700,
        6084.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1be79cd1-4df8-462a-bc43-2e3c34a8bf1f",
              "leftValue": "={{ $json.car[0] }}",
              "rightValue": "={{ $('получаем номер авто').item.json.id }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            },
            {
              "id": "0d370ade-d290-4e87-8089-096b280c37ee",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Выполняется",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "0a0d22de-b9ec-4ee1-98f3-d2c1c8119581",
      "name": "берем выполняющийся рейс нужного авто",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1940,
        6084.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "05f1b7dc-c784-4b43-b1d8-1b6ec695e050",
              "leftValue": "={{ $json.cargo_netto }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4b3d42e9-8208-4650-b7f6-613e485c7dbf",
      "name": "есть ли запись с весов",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2200,
        6084.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Подтвердите значение взвешивания - <b>{{ $json.cargo_netto }}</b> Нетто(Тонны)",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Подтвердить",
                    "additionalFields": {
                      "callback_data": "last"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Другое",
                    "additionalFields": {
                      "callback_data": "material_volume"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "134fa173-b3c3-4b7c-91c2-34df023e3a8b",
      "name": "подтверждение взвешивания",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2480,
        6044.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из ноды \"Execute Workflow Trigger\"\nconst triggerData = $node[\"Execute Workflow Trigger\"].json;\n\n// Проверяем и изменяем поле \"callback_query.data\"\nif (triggerData.callback_query && triggerData.callback_query.data === 'check_material_volume') {\n    triggerData.callback_query.data = 'material_volume';\n}\n\n// Возвращаем обновленные данные\nreturn triggerData;\n"
      },
      "id": "4b5ed73b-d2e8-43b8-a196-b55afde0e7fe",
      "name": "меняем callback на ввод объема",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        6264.938488846612
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "check_material_volume",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "47d1ba30-08ac-421b-9894-072cafad0d75",
      "name": "проверка наличия взвешивания",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        320,
        6224.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## Проверка записи о взвешивании в рейсе",
        "height": 404.17703383081584,
        "width": 2257.673384812532
      },
      "id": "9fedd14f-7880-4ad4-b82c-cf021f4b3864",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        680,
        6024.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "22d02c31-2fd8-494a-9406-9bc0830c1a93",
              "leftValue": "={{ $json.callback_query.message.reply_markup.inline_keyboard[0][0].callback_data }}",
              "rightValue": "quarry",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "307829d5-7ece-4c10-bd5e-368c548cf8db",
      "name": "работа в карьере?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        360,
        684.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы уверены, что хотите приступить к следующей перевозке?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "next_transportation"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "no_transfer_transportation_quarry"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "2dfc6511-a8d6-49c6-b663-d6add7d57376",
      "name": "Завершить для работы",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        600,
        544.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "transportation_to_tail",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0711410c-59a6-406a-a35f-6762937046c6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "no_transfer_transportation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d61e0f5b-e253-4f40-87e2-b52b4064f72f",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "next_transportation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d41500f9-0e68-45f9-b3c0-18f53e94799a",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "no_transfer_transportation_quarry",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "b419ae97-ac85-46f2-95b6-0fe40c170289",
      "name": "следующая перевозка",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        80,
        944.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $json.callback_query.from.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $json.last_message_text }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к работе в карьере",
                    "additionalFields": {
                      "callback_data": "accept_quarry"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "4837cf4c-e6ea-4126-a11d-fc110ee8e254",
      "name": "прошлое сообщение2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        520,
        1224.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "zIPbVZ3veqdzh1DY",
          "name": "EXPO Bot"
        }
      }
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "update_id": 100632206,
          "callback_query": {
            "id": "3010587258172832547",
            "from": {
              "id": 700956969,
              "is_bot": false,
              "first_name": "Алексей",
              "username": "Chronos196",
              "language_code": "ru"
            },
            "message": {
              "message_id": 24816,
              "from": {
                "id": 7063451965,
                "is_bot": true,
                "first_name": "Everest n8n",
                "username": "myn8nbotbot"
              },
              "chat": {
                "id": 700956969,
                "first_name": "Алексей",
                "username": "Chronos196",
                "type": "private"
              },
              "date": 1729583112,
              "text": "На сегодня Вам назначены перевозки в следующем порядке:\n\n1. Работа в карьере - Карьер Ключевое\nКомментарий - 123\n\n2. Отправитель - Эверест\nПолучатель - Новая компания\nМаршрут - Карьер Ключевое-Карьер Ключевое\nМатериал - Неназначенный (Не указан)\nКомментарий - 123",
              "entities": [
                {
                  "offset": 0,
                  "length": 55,
                  "type": "bold"
                },
                {
                  "offset": 57,
                  "length": 22,
                  "type": "italic"
                },
                {
                  "offset": 57,
                  "length": 2,
                  "type": "bold"
                },
                {
                  "offset": 79,
                  "length": 33,
                  "type": "italic"
                },
                {
                  "offset": 79,
                  "length": 15,
                  "type": "bold"
                },
                {
                  "offset": 114,
                  "length": 2,
                  "type": "bold"
                },
                {
                  "offset": 131,
                  "length": 7,
                  "type": "bold"
                },
                {
                  "offset": 152,
                  "length": 14,
                  "type": "bold"
                },
                {
                  "offset": 177,
                  "length": 31,
                  "type": "bold"
                },
                {
                  "offset": 220,
                  "length": 25,
                  "type": "bold"
                },
                {
                  "offset": 260,
                  "length": 3,
                  "type": "italic"
                }
              ],
              "reply_markup": {
                "inline_keyboard": [
                  [
                    {
                      "text": "Приступить к работе в карьере",
                      "callback_data": "accept_quarry"
                    }
                  ],
                  [
                    {
                      "text": "Приступить к следующей перевозке",
                      "callback_data": "transportation_to_tail"
                    }
                  ]
                ]
              }
            },
            "chat_instance": "1908726007480408494",
            "data": "transportation_to_tail"
          },
          "tg_id": "700956969",
          "odoo_id": 2,
          "status": "authorized",
          "only_mech": false,
          "mech_photo": false,
          "end_request_id": null,
          "materials_photo": false,
          "end_request_hours": null,
          "car_id_while_inputing": 18,
          "fuel_liters": null,
          "weight_measure": "1 м3 ",
          "logist_alert_text": null,
          "logist_recipient_name": null,
          "transportation_for_certificate": null,
          "count_weight_photo": null,
          "count_weight_photo_sent": null,
          "current_quarry_hours": 5,
          "end_round_message_id": 24816,
          "last_message_text": "Отправитель - Эверест\nПолучатель - Новая компания\nМаршрут - Карьер Ключевое-Карьер Ключевое\nМатериал - Неназначенный (Не указан)\nКомментарий - 123",
          "logist_notifications": false,
          "cookie": "session_id=88ccf62b42920ec8fc3a7e36c1bbc079208fa499; Expires=Fri, 17 Oct 2025 05:43:43 GMT; Max-Age=604800; HttpOnly; Path=/"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-10-23T04:26:48.010Z",
      "updatedAt": "2024-10-23T04:26:48.010Z",
      "id": "JCe8bZJMnidbNOwE",
      "name": "EXPO"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-10-23T04:37:41.672Z",
  "versionId": "657380dc-04a7-4036-9148-87d5e3d8abc2"
}