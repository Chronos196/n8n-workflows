{
  "active": false,
  "connections": {
    "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º2": {
      "main": [
        [
          {
            "node": "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª2": {
      "main": [
        [
          {
            "node": "Code11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort5": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code11": {
      "main": [
        [
          {
            "node": "Sort5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-09-23T03:59:04.428Z",
  "id": "Eipvywgx8V0qOJDn",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "temp",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const inputData = items.map(item => item.json);\n\n// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É\nconst today = new Date();\ntoday.setMinutes(today.getMinutes() + today.getTimezoneOffset() + (10 * 60)); // UTC +10 Vladivostok\n\n// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏)\nconst startOfWeek = new Date(today);\nstartOfWeek.setDate(today.getDate() - today.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏\n\n// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞\nconst startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\nconst endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);\n\nconsole.log(today, '\\n', startOfWeek, '\\n', startOfMonth, '\\n', endOfMonth)\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –¥–∞—Ç–∞ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è\nfunction isBeforeToday(dateStr) {\n    const date = new Date(dateStr);\n    return date >= startOfMonth && date <= today;\n}\n\n// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏\nconst weeklyReport = {};\nconst pastWeeksReport = {};\n\n// –ó–∞–ø–æ–ª–Ω—è–µ–º –æ–±—ä–µ–∫—Ç weeklyReport –∏ pastWeeksReport\nfor (let i = 0; i < 7; i++) {\n    const date = new Date(startOfWeek);\n    date.setDate(startOfWeek.getDate() + i);\n    const dateStr = date.toISOString().split('T')[0];\n    weeklyReport[dateStr] = { count: 0, quarry_hours: 0, total: 0 };\n\n    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –ø—Ä–æ—à–ª—ã—Ö –Ω–µ–¥–µ–ª—å\n    if (date >= startOfMonth && date <= today) {\n        const weekStart = new Date(startOfWeek);\n        weekStart.setDate(startOfWeek.getDate() - 7); // –ù–∞—á–∞–ª–æ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏\n        const weekEnd = new Date(startOfWeek);\n        weekEnd.setDate(startOfWeek.getDate() - 1); // –ö–æ–Ω–µ—Ü –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–∏\n\n        // –î–æ–±–∞–≤–ª—è–µ–º –≤ pastWeeksReport\n        while (weekStart >= startOfMonth) {\n            const weekStartStr = weekStart.toISOString().split('T')[0];\n            pastWeeksReport[weekStartStr] = { count: 0, quarry_hours: 0, total: 0 };\n            weekStart.setDate(weekStart.getDate() - 7);\n        }\n    }\n}\n\n// –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏\ninputData.forEach(entry => {\n    if (isBeforeToday(entry.date)) {\n        const dateStr = entry.date;\n        if (weeklyReport[dateStr]) {\n            if (entry.count !== undefined) {\n                weeklyReport[dateStr].count += entry.count;\n            }\n            if (entry.quarry_hours !== undefined) {\n                weeklyReport[dateStr].quarry_hours += entry.quarry_hours;\n            }\n            if (entry.total !== undefined) {\n                weeklyReport[dateStr].total += entry.total;\n            }\n        }\n    }\n});\n\n// –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—à–ª—ã—Ö –Ω–µ–¥–µ–ª—å\ninputData.forEach(entry => {\n    const date = new Date(entry.date);\n    if (date >= startOfMonth && date <= today) {\n        const weekStart = new Date(date);\n        weekStart.setDate(date.getDate() - date.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ–¥–µ–ª–∏ –¥–∞—Ç—ã\n        const weekStartStr = weekStart.toISOString().split('T')[0];\n        if (pastWeeksReport[weekStartStr]) {\n            if (entry.count !== undefined) {\n                pastWeeksReport[weekStartStr].count += entry.count;\n            }\n            if (entry.quarry_hours !== undefined) {\n                pastWeeksReport[weekStartStr].quarry_hours += entry.quarry_hours;\n            }\n            if (entry.total !== undefined) {\n                pastWeeksReport[weekStartStr].total += entry.total;\n            }\n        }\n    }\n});\n\n// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è\nlet textMessage = 'üìä <b>–û—Ç—á–µ—Ç –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é</b>\\n\\n';\n\n// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É\nconst sortedDates = Object.keys(weeklyReport)\n    .filter(dateStr => new Date(dateStr) <= today)\n    .sort((a, b) => new Date(b) - new Date(a)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –∫ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫—É\n\nif (sortedDates.length === 0) {\n    textMessage += '–ù–µ –±—ã–ª–æ –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.\\n\\n';\n} else {\n    sortedDates.forEach(dateStr => {\n        const date = new Date(dateStr);\n        const dayOfWeek = date.toLocaleDateString('ru-RU', { weekday: 'long' });\n        const report = weeklyReport[dateStr];\n        textMessage += `üìÖ <b>${dayOfWeek} (${dateStr}):</b>\\n`;\n        if (report.count === 0 && report.quarry_hours === 0) {\n            textMessage += '–ù–µ –±—ã–ª–æ –ø–µ—Ä–µ–≤–æ–∑–æ–∫\\n\\n';\n        } else {\n            textMessage += `üöö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤: ${report.count}\\n`;\n            textMessage += `üïë –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —á–∞—Å—ã: ${report.quarry_hours} —á\\n`;\n            textMessage += `üíµ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: ${report.total} —Ä—É–±.\\n\\n`;\n        }\n    });\n}\n\n// –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–µ –Ω–µ–¥–µ–ª–∏ –º–µ—Å—è—Ü–∞\nconst hasPastWeeks = Object.keys(pastWeeksReport).length > 0;\nif (hasPastWeeks) {\n    textMessage += 'üìä <b>–û—Ç—á–µ—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–µ –Ω–µ–¥–µ–ª–∏ –º–µ—Å—è—Ü–∞</b>\\n\\n';\n\n    const sortedPastWeeks = Object.keys(pastWeeksReport)\n        .sort((a, b) => new Date(b) - new Date(a)); // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –∫ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–º –Ω–µ–¥–µ–ª—è–º\n\n    sortedPastWeeks.forEach(weekStartStr => {\n        const weekStartDate = new Date(weekStartStr);\n        const weekEndDate = new Date(weekStartDate);\n        weekEndDate.setDate(weekEndDate.getDate() + 6); // –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏\n        const weekStartFormatted = weekStartDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'numeric' });\n        const weekEndFormatted = weekEndDate.toLocaleDateString('ru-RU', { day: 'numeric', month: 'numeric' });\n\n        textMessage += `üìÖ <b>–ù–µ–¥–µ–ª—è —Å ${weekStartFormatted} –ø–æ ${weekEndFormatted}:</b>\\n`;\n        textMessage += `üîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤: ${pastWeeksReport[weekStartStr].count}\\n`;\n        textMessage += `üîπ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —á–∞—Å—ã: ${pastWeeksReport[weekStartStr].quarry_hours} —á\\n`;\n        textMessage += `üîπ –ó–∞—Ä–∞–±–æ—Ç–æ–∫: ${pastWeeksReport[weekStartStr].total} —Ä—É–±.\\n\\n`;\n    });\n}\n\n// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON\nreturn [\n    {\n        json: {\n            message: textMessage\n        }\n    }\n];\n"
      },
      "id": "eeb5a329-574e-4d01-92c9-3031562c1cfe",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3040,
        500
      ]
    },
    {
      "parameters": {
        "content": "## –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ \n–ü–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ Postgres",
        "height": 626.577500188101,
        "width": 3182.3458029008684,
        "color": 6
      },
      "id": "3e69b68e-aad9-415c-9ff0-fffb21d9504f",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        480,
        180
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "transportation.round",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "driver",
              "value": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}"
            },
            {
              "fieldName": "status",
              "value": "–ó–∞–≤–µ—Ä—à–µ–Ω"
            }
          ]
        }
      },
      "id": "2f7f0677-87a6-4beb-9fae-210b3c7ffb05",
      "name": "–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–∞–º2",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1360,
        260
      ],
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "1f0e95c9-95e8-4fb0-baa3-a218b4e0227c",
      "name": "–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–π—Å–æ–≤ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª2",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1640,
        260
      ]
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "id",
              "order": "descending"
            }
          ]
        },
        "options": {}
      },
      "id": "05a0f036-d8ed-4289-bace-f2bbb42d4ab3",
      "name": "Sort5",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2140,
        280
      ]
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫—É–±–∏–∫–∞\nconst inputData = items.map(item => item.json);\n\n// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö\nfunction calculateTotals(data) {\n    return data.map(entry => {\n        const { id, total_count, with_trailer_count, driver_rate, trailer_driver_rate, date } = entry;\n\n        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ –±–µ–∑ –ø—Ä–∏—Ü–µ–ø–∞\n        const without_trailer_count = total_count - with_trailer_count;\n\n        // –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ —Ä–µ–π—Å—ã –±–µ–∑ –ø—Ä–∏—Ü–µ–ø–∞\n        const total_without_trailer = without_trailer_count * driver_rate;\n\n        // –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ —Ä–µ–π—Å—ã —Å –ø—Ä–∏—Ü–µ–ø–æ–º\n        const total_with_trailer = with_trailer_count * trailer_driver_rate;\n\n        // –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ä–µ–π—Å–æ–≤\n        const total = total_without_trailer + total_with_trailer;\n\n        return {\n            id: id,\n            count: total_count,\n            total: total,\n            date: date\n        };\n    });\n}\n\n// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ\nconst processedData = calculateTotals(inputData);\n\n// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É–±–∏–∫–∞\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "ce4bfb47-b005-4eed-94c3-0534d040c99a",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2600,
        440
      ]
    },
    {
      "parameters": {
        "jsCode": "// –ü–æ–ª—É—á–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫—É–±–∏–∫–∞\nconst input = items[0].json;\n\nconst inputData = input.data;\n\nfunction processTransportations(data) {\n    const transportations = {};\n\n    data.forEach(entry => {\n        const transportId = entry.transportation[0];\n        const driverWithTrailer = entry.driver_with_trailer;\n\n        if (!transportations[transportId]) {\n            transportations[transportId] = {\n                totalCount: 0,\n                withTrailerCount: 0\n            };\n        }\n\n        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤\n        transportations[transportId].totalCount += 1;\n\n        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤ —Å –ø—Ä–∏—Ü–µ–ø–æ–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å\n        if (driverWithTrailer) {\n            transportations[transportId].withTrailerCount += 1;\n        }\n    });\n\n    return Object.keys(transportations).map(transportId => {\n        return {\n            id: transportId,\n            total_count: transportations[transportId].totalCount,\n            with_trailer_count: transportations[transportId].withTrailerCount\n        };\n    });\n}\n\nconst processedData = processTransportations(inputData);\n\n// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—É–±–∏–∫–∞\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "2ab3e3eb-5537-4ce4-954a-9ba0ea00f419",
      "name": "Code11",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1860,
        260
      ]
    },
    {
      "parameters": {},
      "id": "871a7ca0-b9da-4bdd-8a13-374386eb4884",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        100,
        460
      ]
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "update_id": 628020938,
          "message": {
            "message_id": 10305,
            "from": {
              "id": 5269458784,
              "is_bot": false,
              "first_name": "Niki",
              "language_code": "ru"
            },
            "chat": {
              "id": 5269458784,
              "first_name": "Niki",
              "type": "private"
            },
            "date": 1727071855,
            "text": "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
          },
          "tg_id": "5269458784",
          "odoo_id": 9,
          "status": "authorized",
          "only_mech": false,
          "mech_photo": false,
          "end_request_id": null,
          "materials_photo": false,
          "end_request_hours": null,
          "car_id_while_inputing": 43,
          "fuel_liters": 230,
          "weight_measure": "27,48 –¢–æ–Ω–Ω—ã ",
          "logist_alert_text": null,
          "logist_recipient_name": null,
          "transportation_for_certificate": null,
          "count_weight_photo": null,
          "count_weight_photo_sent": null,
          "current_quarry_hours": 10,
          "end_round_message_id": 10280,
          "last_message_text": null,
          "cookie": "session_id=a8a7f10172a44bfeeaff36d4facabad749787b40; Expires=Tue, 23 Sep 2025 06:10:56 GMT; Max-Age=604800; HttpOnly; Path=/"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-09-23T07:17:50.160Z",
  "versionId": "a2b7c546-fef6-49fa-9d2c-ae8bf7bf43c2"
}