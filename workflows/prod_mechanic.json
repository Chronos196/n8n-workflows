{
  "active": false,
  "connections": {
    "статус=ввод комментария": {
      "main": [
        [
          {
            "node": "отклонение заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "новое сообщение": {
      "main": [
        [
          {
            "node": "удаляем старое сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "удаляем старое сообщение": {
      "main": [
        [
          {
            "node": "статус=ввод комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "номер заявки": {
      "main": [
        [
          {
            "node": "актуальный статус заявки",
            "type": "main",
            "index": 0
          },
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "актуальный статус заявки": {
      "main": [
        [
          {
            "node": "можно ли изменить статус",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "можно ли изменить статус": {
      "main": [
        [
          {
            "node": "есть ли изображение",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "уже обработана",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли изображение": {
      "main": [
        [
          {
            "node": "новое сообщение",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ввод комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ввод комментария": {
      "main": [
        [
          {
            "node": "статус=ввод комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "комментарий отправлен": {
      "main": [
        [
          {
            "node": "поиск водителя по заявке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск водителя по заявке": {
      "main": [
        [
          {
            "node": "поиск айди водителя",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск айди водителя": {
      "main": [
        [
          {
            "node": "отправка водителю комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "новое сообщение1": {
      "main": [
        [
          {
            "node": "удаляем старое сообщение1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "удаляем старое сообщение1": {
      "main": [
        [
          {
            "node": "принятие заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "номер заявки1": {
      "main": [
        [
          {
            "node": "актуальный статус заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "актуальный статус заявки1": {
      "main": [
        [
          {
            "node": "можно ли изменить статус1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "можно ли изменить статус1": {
      "main": [
        [
          {
            "node": "есть ли изображение1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "уже обработана1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли изображение1": {
      "main": [
        [
          {
            "node": "новое сообщение1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ввод комментария1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ввод комментария1": {
      "main": [
        [
          {
            "node": "принятие заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "проверка типа сообщения",
            "type": "main",
            "index": 0
          },
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка типа сообщения": {
      "main": [
        [
          {
            "node": "статус механика",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "инлайн-кнопки для механика",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отправка водителю комментария": {
      "main": [
        [
          {
            "node": "возвращаем дефолтный статус",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через неделю": {
      "main": [
        [
          {
            "node": "дата и время 23:59",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "округляем": {
      "main": [
        [
          {
            "node": "объединяем доки+дата с разницей во времени",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "объединяем доки+дата с разницей во времени": {
      "main": [
        [
          {
            "node": "склоняем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склоняем": {
      "main": [
        [
          {
            "node": "сколько дней до окончания срока",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склеиваем": {
      "main": [
        [
          {
            "node": "объединяем в один список",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "объединяем": {
      "main": [
        [
          {
            "node": "отправка сообщения1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "если истекло": {
      "main": [
        [
          {
            "node": "объединяем в один список",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "объединяем в один список": {
      "main": [
        [
          {
            "node": "объединяем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:59": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:1": {
      "main": [
        [
          {
            "node": "дата через 14 дней",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:60": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сколько дней до окончания срока": {
      "main": [
        [
          {
            "node": "если истекло",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "склеиваем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:2": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:3": {
      "main": [
        [
          {
            "node": "дата через 21 день",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:61": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через 8 дней": {
      "main": [
        [
          {
            "node": "дата и время 23:1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через 14 дней": {
      "main": [
        [
          {
            "node": "дата и время 23:",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через 15 дней": {
      "main": [
        [
          {
            "node": "дата и время 23:3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через 21 день": {
      "main": [
        [
          {
            "node": "дата и время 23:2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата сегодня": {
      "main": [
        [
          {
            "node": "дата и время 23:61",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата сегодня1": {
      "main": [
        [
          {
            "node": "дата и время 23:60",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей": {
      "main": [
        [
          {
            "node": "первая страница слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей1": {
      "main": [
        [
          {
            "node": "первая страница слесарей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Сборка списка слесарей": {
      "main": [
        [
          {
            "node": "Вывод списка слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Сборка списка слесарей1": {
      "main": [
        [
          {
            "node": "Вывод списка слесарей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей2": {
      "main": [
        [
          {
            "node": "следующая страница слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей3": {
      "main": [
        [
          {
            "node": "возврат к первой странице",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Выбор слесаря": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделение на дни для документов": {
      "main": [
        [
          {
            "node": "дата через неделю",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "дата через 8 дней",
            "type": "main",
            "index": 0
          },
          {
            "node": "дата сегодня1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "дата через 15 дней",
            "type": "main",
            "index": 0
          },
          {
            "node": "дата сегодня",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "возврат к выбору периода",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "удаления сообщения с выбором",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности1": {
      "main": [
        [
          {
            "node": "Есть ли заявки на проверке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Удаление прошлого сообщения2": {
      "main": [
        [
          {
            "node": "Удаление прошлого сообщения3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности": {
      "main": [
        [
          {
            "node": "обработка страниц с выбором заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "инлайн-кнопки для механика": {
      "main": [
        [
          {
            "node": "номер заявки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "номер заявки1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "разделение на дни для документов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности2": {
      "main": [
        [
          {
            "node": "генерация сообщения для просмотра заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обработка страниц с выбором заявки": {
      "main": [
        [
          {
            "node": "отправляем сообщение 5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "генерация сообщения для просмотра заявки": {
      "main": [
        [
          {
            "node": "отправляем сообщение 6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор заявки(первая страница)": {
      "main": [
        [
          {
            "node": "отправляем сообщение 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем текст сообщения": {
      "main": [
        [
          {
            "node": "поиск слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем текст сообщения1": {
      "main": [
        [
          {
            "node": "поиск слесарей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск тг айди механиков": {
      "main": [
        [
          {
            "node": "формируем сообщения для возврата к заявке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем сообщение с заявкой": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем сообщение с заявкой1": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первая страница слесарей": {
      "main": [
        [
          {
            "node": "отправляем сообщение 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первая страница слесарей1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "следующая страница слесарей": {
      "main": [
        [
          {
            "node": "отправляем сообщение ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "формируем сообщения для возврата к заявке": {
      "main": [
        [
          {
            "node": "отправляем сообщение 8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возврат к первой странице": {
      "main": [
        [
          {
            "node": "отправляем сообщение 4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка кнопок": {
      "main": [
        [
          {
            "node": "выбор периода документов",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности3": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор заявки(первая страница)1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности4": {
      "main": [
        [
          {
            "node": "выбор заявки(первая страница)2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор заявки(первая страница)2": {
      "main": [
        [
          {
            "node": "отправляем сообщение 10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявки на проверке": {
      "main": [
        [
          {
            "node": "Удаление прошлого сообщения2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "обработка всех заявок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности5": {
      "main": [
        [
          {
            "node": "данные сотрудника",
            "type": "main",
            "index": 0
          },
          {
            "node": "объединяем заявки и сотрудника",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "генерация сообщения для просмотра заявки1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "данные сотрудника": {
      "main": [
        [
          {
            "node": "объединяем заявки и сотрудника",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "объединяем заявки и сотрудника": {
      "main": [
        [
          {
            "node": "генерация сообщения для просмотра заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "сохраняем сообщение с заявкой",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "сохраняем сообщение с заявкой1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск слесарей2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск слесарей3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "слесарю назначена работа",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск тг айди механиков",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Выбор слесаря",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявки на проверке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обработка всех заявок": {
      "main": [
        [
          {
            "node": "получим все неисправности4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки на проверке": {
      "main": [
        [
          {
            "node": "выбор заявки(первая страница)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок на проверке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению": {
      "main": [
        [
          {
            "node": "выбор заявки(первая страница)1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разница в днях": {
      "main": [
        [
          {
            "node": "округляем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы с истекающим сроком1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы с истекающим сроком2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "документы с истекающим сроком3": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы с истекающим сроком4": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "документы с истекающим сроком": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "разница в днях",
            "type": "main",
            "index": 0
          },
          {
            "node": "объединяем доки+дата с разницей во времени",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "статус механика": {
      "main": [
        [
          {
            "node": "комментарий отправлен",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Проверка старта1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка старта1": {
      "main": [
        [
          {
            "node": "Приветственное сообщений",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Проверка кнопок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-02T13:25:31.226Z",
  "id": "S2OjoS3zQHyTX4Jz",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "prod_mechanic",
  "nodes": [
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "status": "inputing_reject_text",
            "end_request_id": "={{ $('номер заявки').item.json.TO_number }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "7aa7542e-4be8-405f-a166-d0b6d390ca88",
      "name": "статус=ввод комментария",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1680,
        1760
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "file": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}",
        "additionalFields": {
          "caption": "Напишите для водителя комментарий к заявке:"
        }
      },
      "id": "9015aa66-da86-4012-8892-a6f2259c812e",
      "name": "новое сообщение",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1280,
        1640
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
      },
      "id": "356b48d5-23de-4f9e-bb69-b000da260ed2",
      "name": "удаляем старое сообщение",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1460,
        1640
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Отклонение заявки",
        "height": 514.5918601391712,
        "width": 1635.0976739201933,
        "color": 6
      },
      "id": "80187843-bd47-420a-9b5f-87a276fc369f",
      "name": "Sticky Note41",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        360,
        1600
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7157f53b-6dc0-408e-b176-20681be56507",
              "name": "TO_number",
              "value": "={{ $json.callback_query.message.reply_markup.inline_keyboard[0][0].callback_data.substring(10) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "cc9f1d8e-83bd-4f8e-a099-c1d376f2651b",
      "name": "номер заявки",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        420,
        1860
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=technical.maintenance",
        "operation": "getAll",
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.TO_number }}"
            }
          ]
        }
      },
      "id": "82ff4c62-c957-4f85-9b6c-dc04e7c1ed7d",
      "name": "актуальный статус заявки",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        640,
        1860
      ],
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "233e5f21-81d4-45cd-95c3-4a90228acb88",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Требуется проверка",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1fda5a0b-0a88-4b0b-91ed-44f4b773ef16",
      "name": "можно ли изменить статус",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        860,
        1860
      ]
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Заявка уже была обработана"
        }
      },
      "id": "86986006-c5f8-499b-9da6-d4e5bdad70b8",
      "name": "уже обработана",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1080,
        1940
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8573591f-d67f-46fb-a1bc-d3a70cd9bc6c",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b1c7960e-296a-40e2-a7d5-02e19febd860",
      "name": "есть ли изображение",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1080,
        1760
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Напишите для водителя комментарий к заявке:",
        "additionalFields": {}
      },
      "id": "aad8d123-d415-4a08-96e4-7e5d69d5828c",
      "name": "ввод комментария",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1360,
        1840
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Комментарий отправлен водителю",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "23a8b60f-b1cc-4479-9b09-f0b7699071f0",
      "name": "комментарий отправлен",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        540,
        520
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "get",
        "customResourceId": "={{ $('Execute Workflow Trigger').item.json.end_request_id }}",
        "options": {
          "fieldsList": []
        }
      },
      "id": "2651da83-c621-49e5-a603-eb7dee73d060",
      "name": "поиск водителя по заявке",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        760,
        520
      ],
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "where": {
          "values": [
            {
              "column": "odoo_id",
              "value": "={{ $json.created_by[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e3090e71-c3b6-4ccb-a1c6-f60d6673d8f2",
      "name": "поиск айди водителя",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        980,
        520
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Отправка комментария водителю",
        "height": 242.01551900336753,
        "width": 1126.0213425732532,
        "color": 6
      },
      "id": "292f9776-d026-4266-b4ef-07eb2f94293f",
      "name": "Sticky Note43",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "file": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}",
        "additionalFields": {
          "caption": "Заявка подтверждена, водитель получит уведомление"
        }
      },
      "id": "973f2ac2-38f4-4184-b040-bd79f3798c55",
      "name": "новое сообщение1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1280,
        2200
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
      },
      "id": "6c32c2f5-5016-4c68-ac0c-8109bb86762d",
      "name": "удаляем старое сообщение1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1460,
        2200
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Принятие заявки",
        "height": 514.5918601391712,
        "width": 1415.7294837541995,
        "color": 6
      },
      "id": "86473feb-b663-45d2-81bd-a93611e8d209",
      "name": "Sticky Note44",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        380,
        2160
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7157f53b-6dc0-408e-b176-20681be56507",
              "name": "TO_number",
              "value": "={{ $json.callback_query.message.reply_markup.inline_keyboard[0][0].callback_data.substring(10) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "4d6f5b61-af18-4ad7-bf66-4729126f0fb0",
      "name": "номер заявки1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        420,
        2420
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.TO_number }}"
            }
          ]
        }
      },
      "id": "76c4cbc1-225d-4594-8639-35994700c27e",
      "name": "актуальный статус заявки1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        640,
        2420
      ],
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "233e5f21-81d4-45cd-95c3-4a90228acb88",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Требуется проверка",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7ba6483b-daea-489f-bf29-7fb1a6d4a0c7",
      "name": "можно ли изменить статус1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        860,
        2420
      ]
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Заявка уже была обработана"
        }
      },
      "id": "3b78bac4-33a2-455e-b37c-029b30de097e",
      "name": "уже обработана1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1080,
        2500
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8573591f-d67f-46fb-a1bc-d3a70cd9bc6c",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ed3c9e45-43ad-4bcd-af75-96f6a3b318cc",
      "name": "есть ли изображение1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1080,
        2320
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Заявка подтверждена, водитель получит уведомление",
        "additionalFields": {}
      },
      "id": "55a9af49-52f8-4ae1-a315-5437a82dc7d0",
      "name": "ввод комментария1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1360,
        2400
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "status": "authorized",
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "70cb4822-d1d5-4bc8-af4e-8bf00bdb2342",
      "name": "возвращаем дефолтный статус",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1420,
        520
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {},
      "id": "d6a3547f-e5a8-4b30-8c1e-528b282c1aa7",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -280,
        1840
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "11c45e0d-196b-47f1-821e-bee57c9f070b",
              "leftValue": "={{ $json.message.text }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b5684a38-03c9-4abf-aaa8-2b8b7ce8cd63",
      "name": "проверка типа сообщения",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        60,
        1780
      ]
    },
    {
      "parameters": {
        "errorMessage": "3333"
      },
      "id": "8de9457d-dafa-4cae-a8ba-a81a1556ff90",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -80,
        2080
      ],
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "={{ $json.tg_id }}",
        "text": "=<b>Работа не принята</b>\n\n<i>{{ $('поиск водителя по заявке').item.json.description_of_maintenance }}</i>\n\nКомментарий механика: {{ $('Execute Workflow Trigger').item.json.message.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "e00eed9b-bfe0-4443-8cee-8ddf554fa50a",
      "name": "отправка водителю комментария",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1200,
        520
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/reject_maintenance_by_mechanic",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"maintenance_id\": {{ $('номер заявки').item.json.TO_number }}\n}",
        "options": {}
      },
      "id": "aab3674d-3bd5-455c-81ed-efaf81a9f2d7",
      "name": "отклонение заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1880,
        1760
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/accept_maintenance_by_mechanic",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"maintenance_id\": {{ $('номер заявки1').item.json.TO_number }}\n}",
        "options": {}
      },
      "id": "b6da233f-b222-432b-8688-5c17876294f0",
      "name": "принятие заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1680,
        2320
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 7,
        "options": {}
      },
      "id": "a190c5b7-4729-4c66-931f-8a15f659429c",
      "name": "дата через неделю",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        480,
        2840
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0bd3f1ff-9963-406f-b40f-8c9e47ba7e30",
              "name": "timeDifference",
              "value": "={{ $json.timeDifference.days.round() }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "ab9655ef-23bf-4e5e-b81a-7ea357b645eb",
      "name": "округляем",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1520,
        2840
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "4e639669-0203-4499-ba61-78db51f0fd53",
      "name": "объединяем доки+дата с разницей во времени",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1680,
        2980
      ]
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor item in _input.all():\n    days = abs(item.json.timeDifference)\n    if days % 100 // 10 == 1:\n        item.json.sklonenie = \"дней\"\n    elif days % 10 == 1:\n        item.json.sklonenie = \"день\"\n    elif days % 10 in [2, 3, 4]:\n        item.json.sklonenie = \"дня\"\n    else:\n        item.json.sklonenie = \"дней\"\nreturn _input.all()"
      },
      "id": "269b4d62-495c-4641-9a00-ef147fddce64",
      "name": "склоняем",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1880,
        2980
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "386f4fe1-4858-4421-a50e-867e5ca497fc",
              "name": "message",
              "value": "=⚠️Через {{ $json.timeDifference }} {{ $json.sklonenie }} истекает срок документа <b>{{ $json.display_name }}</b>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "5d122158-c91a-4499-91b5-5fa94d19d0fa",
      "name": "склеиваем",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2380,
        3000
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "message",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "5da98d59-ace8-4c1b-8e36-cfc8e8bf2bb9",
      "name": "объединяем",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2800,
        2980
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3cd5ce67-7030-49fa-b1d7-63e5baca1d30",
              "name": "message",
              "value": "=❗ {{ -$json[\"timeDifference\"] }} {{ $json[\"sklonenie\"] }} назад истёк срок действия документа <b>{{ $json.type_of_document_id[1] }}</b> (был действителен до {{ $json.expiration_date }}) <b>({{ $json.car_id[1] }})</b>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "d883f6dc-91aa-444c-a469-9b376eea814c",
      "name": "если истекло",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2380,
        2820
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "1fa94355-9a3c-4f49-ab70-f15207b46053",
      "name": "объединяем в один список",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2600,
        2980
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('объединяем').item.json.concatenated_message }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "view_date"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "dced3017-6a7f-4af7-aef9-9338f6fc51e6",
      "name": "отправка сообщения1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3000,
        2980
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Истекшие документы и документы за 7 дней до истечения",
        "height": 369.39864609379947,
        "width": 2774.539456615861
      },
      "id": "b8f096c6-c549-4a47-8b60-572ecf91230e",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        220,
        2791
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd, 23:59:59",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "0b2279d2-1777-4477-8ec1-6ba1de0c8925",
      "name": "дата и время 23:59",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        660,
        2840
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd, 23:59:59",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "d80988ab-2b8d-4585-a963-1ffc7ff9fb0c",
      "name": "дата и время 23:",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1020,
        3180
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd, 00:00:00",
        "outputFieldName": "newformattedDate1",
        "options": {}
      },
      "id": "42663657-d50d-470d-8720-4a337fcc4127",
      "name": "дата и время 23:1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        660,
        3180
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.currentDate }}",
        "format": "=yyyy-MM-dd, 00:00:00",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "8fed7fda-a1f3-4a63-a1df-8061232908b2",
      "name": "дата и время 23:60",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        680,
        3340
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.timeDifference }}",
                    "rightValue": 0,
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "4d8ac404-b74b-4df3-8919-0de5596a2e53",
                    "leftValue": "={{ $json.timeDifference }}",
                    "rightValue": 31,
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "1d18cced-7292-42f3-ab72-836bc7840071",
      "name": "сколько дней до окончания срока",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2060,
        2980
      ]
    },
    {
      "parameters": {
        "content": "## Истекшие документы и документы за 8-14 дней до истечения",
        "height": 369.39864609379947,
        "width": 1215.0811098210288
      },
      "id": "db860ff6-9541-45eb-a440-642e0010f388",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        220,
        3140
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd, 23:59:59",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "812290af-9925-4642-8cd3-829647fbd431",
      "name": "дата и время 23:2",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1020,
        3540
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd, 00:00:00",
        "outputFieldName": "newformattedDate1",
        "options": {}
      },
      "id": "946b96d4-6598-4334-9181-53e6d5859471",
      "name": "дата и время 23:3",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        660,
        3540
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.currentDate }}",
        "format": "=yyyy-MM-dd, 00:00:00",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "47b43a4b-4e23-4311-998f-f61872dc978c",
      "name": "дата и время 23:61",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        680,
        3700
      ]
    },
    {
      "parameters": {},
      "id": "66b421b9-ba05-45b6-9b21-2c70f73b1413",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1500,
        3640
      ]
    },
    {
      "parameters": {
        "content": "## Истекшие документы и документы за 15-21 дней до истечения",
        "height": 369.39864609379947,
        "width": 1215.0811098210288
      },
      "id": "d0491b73-b35a-4f32-8adc-dced42c4e488",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        220,
        3500
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 8,
        "options": {}
      },
      "id": "8ed1eb75-b14c-4a6d-9eae-12db4c8fb565",
      "name": "дата через 8 дней",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        500,
        3180
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 14,
        "options": {}
      },
      "id": "5d4ae2da-bfa1-4a3d-8ef0-435d9000c77c",
      "name": "дата через 14 дней",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        840,
        3180
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 15,
        "options": {}
      },
      "id": "2e2661a8-effc-4a7b-8048-eff8e3fa1e94",
      "name": "дата через 15 дней",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        500,
        3540
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 21,
        "options": {}
      },
      "id": "6957f597-4185-4540-87bb-b9077ebdbf5b",
      "name": "дата через 21 день",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        840,
        3540
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "a1197a02-e099-43eb-b67e-4515ae8a2786",
      "name": "дата сегодня",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        500,
        3700
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "506f1eaa-b411-468c-ba76-e8a229d3068d",
      "name": "дата сегодня1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        500,
        3340
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Выберите за какой период хотите проверить документы:",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "1-7 дней",
                    "additionalFields": {
                      "callback_data": "7_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "8-14 дней",
                    "additionalFields": {
                      "callback_data": "14_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "15-21 день",
                    "additionalFields": {
                      "callback_data": "21_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "delete_date"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "d28498c5-675c-459c-aa2b-9a1ae3a1cae7",
      "name": "возврат к выбору периода",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        480,
        3920
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}"
      },
      "id": "bad572bb-6815-456d-84b8-7004b066cfe6",
      "name": "удаления сообщения с выбором",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        480,
        4100
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Проверка сроков документов",
        "height": 1516.856820405149,
        "width": 2918.594993693928,
        "color": 5
      },
      "id": "6bb9f260-7fde-4682-818b-f18ac40f43d0",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        180,
        2740
      ]
    },
    {
      "parameters": {
        "content": "## Блок сценария для механика",
        "height": 663.0853866973607,
        "width": 1711.598132943094
      },
      "id": "788c4554-c765-41bd-aa94-3fba971b38d3",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        680,
        723.7135324537455
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Вы авторизовались как механик",
        "replyMarkup": "replyKeyboard",
        "replyKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Документы",
                    "additionalFields": {}
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Заявки на проверке",
                    "additionalFields": {}
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Все заявки",
                    "additionalFields": {}
                  }
                ]
              }
            }
          ]
        },
        "replyKeyboardOptions": {
          "resize_keyboard": true
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "d235c396-297b-4aca-a29a-c1e390121a10",
      "name": "Приветственное сообщений",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        840,
        840
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Выберите за какой период хотите проверить документы:",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "1-7 дней",
                    "additionalFields": {
                      "callback_data": "7_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "8-14 дней",
                    "additionalFields": {
                      "callback_data": "14_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "15-21 день",
                    "additionalFields": {
                      "callback_data": "21_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "delete_date"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "98f38faf-b9f2-49c5-9d1c-5ca86b3692d7",
      "name": "выбор периода документов",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1140,
        860
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=cars.cars",
        "operation": "getAll",
        "options": {
          "fieldsList": [
            "id"
          ]
        }
      },
      "id": "ca3b21a8-524a-4df7-9970-effae1f2d7a9",
      "name": "Odoo",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1900,
        2320
      ],
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "",
                    "rightValue": "",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "123c8216-85cc-4f8f-b10b-5f03278ed010",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        780,
        1620
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "hr.employee",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "name"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "job_title",
              "value": "Слесарь"
            }
          ]
        }
      },
      "id": "ca323c44-05e2-4338-a638-d7ef4156ae05",
      "name": "поиск слесарей",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1680,
        4520
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "hr.employee",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "name"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "job_title",
              "value": "Слесарь"
            }
          ]
        }
      },
      "id": "605de194-5982-4919-822d-c5684d1499ec",
      "name": "поиск слесарей1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1720,
        4760
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные\nconst jsonData = items.map(item => item.json); // Входные данные из предыдущей ноды\n\n// Если jsonData — это объект с массивом внутри, например { data: [...] }\nconst data = Array.isArray(jsonData) ? jsonData : jsonData.data || [];\n\n// Инициализируем переменную для формирования сообщения\nlet message = '';\n\n// Пробегаем по каждому объекту в массиве и добавляем нумерацию\ndata.forEach((item, index) => {\n  message += `${index + 1}. ${item.name} (ID: ${item.id})\\n`;  // Нумерация элементов и перенос строки\n});\n\n// Возвращаем результат\nreturn [{ json: { message: message } }];\n"
      },
      "id": "f9624fcc-c4db-4004-9a0b-1d943d8561e1",
      "name": "Сборка списка слесарей",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2960,
        4380
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные\nconst jsonData = items.map(item => item.json); // Входные данные из предыдущей ноды\n\n// Если jsonData — это объект с массивом внутри, например { data: [...] }\nconst data = Array.isArray(jsonData) ? jsonData : jsonData.data || [];\n\n// Инициализируем переменную для формирования сообщения\nlet message = '';\n\n// Пробегаем по каждому объекту в массиве и добавляем нумерацию\ndata.forEach((item, index) => {\n  message += `${index + 1}. ${item.name} (ID: ${item.id})\\n`;  // Нумерация элементов и перенос строки\n});\n\n// Возвращаем результат\nreturn [{ json: { message: message } }];"
      },
      "id": "717160e6-34ac-424b-9e21-fdbcbef792c1",
      "name": "Сборка списка слесарей1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3160,
        4540
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "text": "=Список слесарей:\n{{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "0a80934e-cf13-4bac-91cf-d6da855e041d",
      "name": "Вывод списка слесарей",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3420,
        4340
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "text": "=Список слесарей:\n{{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "8dba4dc6-d1ba-4ad1-ae3f-4b92da4fc2a0",
      "name": "Вывод списка слесарей1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3460,
        4580
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "7310518c-a729-4f26-a364-fbcbb7f5655c",
      "name": "отправляем сообщение 2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2120,
        4520
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "hr.employee",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "name"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "job_title",
              "value": "Слесарь"
            }
          ]
        }
      },
      "id": "70dd9d41-20d2-4ac9-944c-8da58f890846",
      "name": "поиск слесарей2",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1200,
        5000
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "33faf85f-bd25-4677-b19a-ff460a71707f",
      "name": "отправляем сообщение ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1620,
        5000
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "1df1ff4c-8e22-4461-b87f-3856a64d1b12",
      "name": "отправляем сообщение 3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2140,
        4760
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "hr.employee",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "name"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "job_title",
              "value": "Слесарь"
            }
          ]
        }
      },
      "id": "79e772bd-4012-4ba4-bb0e-bdfc0fffa2d9",
      "name": "поиск слесарей3",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1260,
        5200
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "89d8fcd7-62ac-4273-9ca4-61facdeb94c1",
      "name": "отправляем сообщение 4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1760,
        5200
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "hr.employee",
        "operation": "getAll",
        "returnAll": true,
        "options": {
          "fieldsList": [
            "id",
            "name"
          ]
        },
        "filterRequest": {
          "filter": [
            {
              "fieldName": "job_title",
              "value": "Слесарь"
            },
            {
              "fieldName": "id",
              "value": "={{ $json.callback_query.data.split('_')[1] }}"
            }
          ]
        }
      },
      "id": "7adbae28-6da7-4369-a039-88837e3d1ed0",
      "name": "Выбор слесаря",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1020,
        5800
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Вы уверены, что хотите назначить работу слесарю <b>{{ $json.name }}</b>",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назначить",
                    "additionalFields": {
                      "callback_data": "give_work"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "first_page"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "1a044db6-e117-4e72-88ad-939ce4bd9ecd",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1240,
        5800
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "7_days",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "29768801-6a74-4a14-be52-f00a8c557555",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "14_days",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "ddb933c9-04c7-4d8e-b07e-779c610e9c46",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "21_days",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "e674fd05-e952-48d5-b7aa-7cc405f40766",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "view_date",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "c9f6d1ed-bbdf-43ea-9a3f-ad3ac67cc13d",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "delete_date",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "42044fa3-c938-438a-a093-d981edb5f29f",
      "name": "разделение на дни для документов",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        -80,
        3060
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "status",
              "value": "Требуется проверка"
            }
          ]
        }
      },
      "id": "2dc2f7aa-14e5-4086-b422-33ef64ffba99",
      "name": "получим все неисправности1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1340,
        880
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "418fbad1-e32a-4f8c-b368-19eb9c71b8c1",
      "name": "отправляем сообщение 1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2100,
        780
      ]
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
      },
      "id": "15b469f0-bbc2-434e-a063-70b5b4ed7590",
      "name": "Удаление прошлого сообщения2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        600,
        6340
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id - 1}}"
      },
      "id": "c1dddf48-da02-4fd4-91fe-f1a4bcaf33d2",
      "name": "Удаление прошлого сообщения3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        860,
        6340
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "status",
              "value": "Требуется проверка"
            }
          ]
        }
      },
      "id": "2e872eca-1375-4f48-9404-cf1ad5b7ba97",
      "name": "получим все неисправности",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        580,
        6640
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "4b3a1f19-e15a-48c6-b044-bbb50ecc8e53",
      "name": "отправляем сообщение 5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1000,
        6640
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.callback_query.data.split('_')[1] }}"
            }
          ]
        }
      },
      "id": "60e75058-effd-4e54-8ad8-eb2d7badfa8e",
      "name": "получим все неисправности2",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        600,
        6900
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "reject_TO",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0dad3c43-0653-485e-bdde-074fb8ca6551",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "accept_TO",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "d2aabe05-63b3-4356-9683-a068525dc654",
      "name": "инлайн-кнопки для механика",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        180,
        2200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "3789300f-6a75-4c58-8019-cc8644aa9807",
      "name": "отправляем сообщение 6",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1020,
        6900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    // Используем startIndex для корректного отображения номера\n    const buttonIndex = startIndex + index + 1;\n\n    return {\n        text: `${buttonIndex}. ${carInfo} - ${truncatedDescription}`,\n        callback_data: `item_${item.json.id}_page_${page}` // Добавляем номер страницы в callback_data\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"del_maintenances\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Заявки на проверке:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки на проверке:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "a3ebfd0a-3c66-4ca2-8099-855d4fd69a62",
      "name": "обработка страниц с выбором заявки",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        6640
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Получаем данные о колбэке из Execute Workflow Trigger\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nconst callbackData = callbackQuery ? callbackQuery.data : null;\n\n// Проверяем, был ли получен callbackData\nif (!callbackData) {\n    throw new Error(\"Callback data is undefined. Cannot proceed.\");\n}\n\n// Извлекаем message_id из callback_query\nconst messageId = callbackQuery.message.message_id;\n\n// Обработка выбора заявки\nconst selectedMatch = callbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Получаем информацию о выбранной заявке\n    const selectedRequest = items.find(item => item.json.id == itemId);\n    \n    // Извлекаем необходимые данные из JSON\n    const {\n        description_of_maintenance,\n        hours_for_maintenance,\n        car_id\n    } = selectedRequest.json;\n\n    // Формируем текст сообщения\n    const carName = car_id[1].split(' - ')[0]; // Получаем только номер авто\n    const hours = hours_for_maintenance; // Количество часов\n\n    // Формируем ссылку на заявку в Odoo\n    const odooLink = `https://everest.lamart.site/web#id=${itemId}&model=technical.maintenance&view_type=form`;\n\n    // Полное сообщение\n    const messageText = `Проверьте качество работы и количество выставленных часов:\\n\\n` +\n        `${carName} - ${hours} ч. - ${description_of_maintenance}\\n` +\n        `<a href=\"${odooLink}\">Ссылка на заявку в Odoo</a>`;\n\n    // Получаем chat_id из callback_query\n    const chatId = callbackQuery.from.id;\n\n    // Токен бота\n    const token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n    // URL для редактирования сообщения через API Telegram\n    const url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n    // Создаем объект с inline-клавиатурой в один столбик\n    const inlineKeyboard = {\n        inline_keyboard: [\n            [\n                { text: \"Принять заявку✅\", callback_data: `accept_TO_${itemId}` } // Добавляем ID заявки\n            ],\n            [\n                { text: \"Отклонить заявку❌\", callback_data: `reject_TO_${itemId}` } // Добавляем ID заявки\n            ],\n            [\n                { text: \"Назад\", callback_data: `page_${returnPage}` } // Устанавливаем номер страницы в колбэк\n            ]\n        ]\n    };\n\n    // Формируем сообщение для редактирования\n    const message = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: messageText,\n        parse_mode: 'HTML', // Указываем, что текст содержит HTML\n        reply_markup: inlineKeyboard // Добавляем inline-клавиатуру\n    };\n\n    // Возвращаем данные для запроса\n    return [\n        {\n            json: {\n                url,\n                message\n            }\n        }\n    ];\n}\n"
      },
      "id": "60fdd83f-6b7e-4199-a2cb-c876ab2447b6",
      "name": "генерация сообщения для просмотра заявки",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        6900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    return {\n        text: `${startIndex + index + 1}. ${carInfo} - ${truncatedDescription}`, // Используем startIndex для правильной нумерации\n        callback_data: `item_${item.json.id}_page_${page}` // Добавляем номер страницы\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"del_maintenances\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.message.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/sendMessage`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    text: \"Заявки на проверке:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки на проверке:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "98a3f499-cfcf-4afd-8cae-5d8053958092",
      "name": "выбор заявки(первая страница)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1880,
        780
      ]
    },
    {
      "parameters": {
        "content": "## Просмотр заявок на проверке",
        "height": 917.8024205958236,
        "width": 812.6383905410449
      },
      "id": "03daac80-4a25-405d-98ae-ca37b24ae7b0",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        207,
        6211
      ]
    },
    {
      "parameters": {
        "content": "## Удаление сообщений",
        "height": 230.02744518719146,
        "width": 496.32687483613483,
        "color": 5
      },
      "id": "10034064-8310-4a3f-8e69-1f93c398c867",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        6300
      ]
    },
    {
      "parameters": {
        "content": "## Обработка страниц с выбором заявки",
        "height": 230.02744518719146,
        "width": 611.2775867471851,
        "color": 5
      },
      "id": "ee4913b7-6c70-420a-b5df-46c4450d16f9",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        300,
        6580
      ]
    },
    {
      "parameters": {
        "content": "## Вывод информации о заявке",
        "height": 230.02744518719146,
        "width": 611.2775867471851,
        "color": 5
      },
      "id": "8b107473-dcdd-40a0-bc17-b77f8b467635",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        320,
        6840
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "last_message_text": "={{ $json.fullMessage }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "0b4f7d5c-1896-49fb-b152-d2af03b56cc1",
      "name": "сохраняем текст сообщения",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1440,
        4520
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "last_message_text": "={{ $json.fullMessage }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "b07f7b43-9fd9-4e50-91e2-c2c5df30cbd3",
      "name": "сохраняем текст сообщения1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1500,
        4760
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "tg_id",
              "value": "={{ $json.callback_query.from.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "53babbf7-2678-452c-a1f5-dbbafd7a552c",
      "name": "поиск тг айди механиков",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1140,
        5540
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все данные из предыдущей ноды\nconst items = $input.all();\n\n// Проходим по каждому элементу\nreturn items.map(item => {\n  const inputData = item.json; // Получаем json для каждого элемента\n  \n  // Проверяем, что в данных есть callback_query и message\n  if (!inputData.callback_query || !inputData.callback_query.message) {\n    throw new Error(\"Нет callback_query или message в данных\");\n  }\n\n  const message = inputData.callback_query.message;\n\n  // Сохраняем полную структуру сообщения\n  const fullMessage = {\n    message_id: message.message_id,\n    from: message.from,\n    chat: message.chat,\n    date: message.date,\n    edit_date: message.edit_date,\n    text: message.text,\n    entities: message.entities,\n    link_preview_options: message.link_preview_options,\n    reply_markup: message.reply_markup,\n    // Можно добавить дополнительные поля, если необходимо\n  };\n\n  // Возвращаем результат для каждого элемента\n  return {\n    json: {\n      fullMessage: fullMessage,\n    }\n  };\n});\n"
      },
      "id": "9f822ce5-7c25-4587-bcf4-550ead3643d6",
      "name": "сохраняем сообщение с заявкой",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1160,
        4520
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все данные из предыдущей ноды\nconst items = $input.all();\n\n// Проходим по каждому элементу\nreturn items.map(item => {\n  const inputData = item.json; // Получаем json для каждого элемента\n  \n  // Проверяем, что в данных есть callback_query и message\n  if (!inputData.callback_query || !inputData.callback_query.message) {\n    throw new Error(\"Нет callback_query или message в данных\");\n  }\n\n  const message = inputData.callback_query.message;\n\n  // Сохраняем полную структуру сообщения\n  const fullMessage = {\n    message_id: message.message_id,\n    from: message.from,\n    chat: message.chat,\n    date: message.date,\n    edit_date: message.edit_date,\n    text: message.text,\n    entities: message.entities,\n    link_preview_options: message.link_preview_options,\n    reply_markup: message.reply_markup,\n    // Можно добавить дополнительные поля, если необходимо\n  };\n\n  // Возвращаем результат для каждого элемента\n  return {\n    json: {\n      fullMessage: fullMessage,\n    }\n  };\n});\n"
      },
      "id": "b0035ae0-e4b9-4518-bcc0-8559e7c15f1a",
      "name": "сохраняем сообщение с заявкой1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1260,
        4760
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 5;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page\" }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "da3cd8f7-46d1-422d-ba4e-b45742859564",
      "name": "первая страница слесарей",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        4520
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 5;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page\" }]);\n}\n\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "1e3a5ebb-f018-496b-beda-78b4b69d0a8c",
      "name": "первая страница слесарей1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1960,
        4760
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 5;\n\n// Определяем, сколько элементов будем выводить, начиная с 6-го элемента (индекс 5)\nconst displayItems = items.slice(maxItemsPerPage); // Берем элементы, начиная с 6-го\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов, начиная с 6\nconst buttons = displayItems.map((item, index) => ({\n    text: `${maxItemsPerPage + index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем, начиная с 6\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Предыдущая страница\", если есть элементы на предыдущей странице\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: \"first_page\" }]);\n}\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "98c003c1-a405-4c1d-a59b-cf9afcae8a73",
      "name": "следующая страница слесарей",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1400,
        5000
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "3d91311b-5b1c-4d85-80e5-51f8c918e37c",
      "name": "отправляем сообщение 7",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2460,
        5080
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "496cf514-7483-4135-90ba-243f17371c74",
      "name": "отправляем сообщение 8",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1660,
        5540
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все данные из предыдущей ноды\nconst items = $input.all();\n\nreturn items.map(item => {\n  const inputData = item.json; // Получаем json для каждого элемента\n  \n  // Извлекаем last_message_text и парсим его как JSON\n  const lastMessageText = inputData.last_message_text; \n  if (!lastMessageText) {\n    throw new Error(\"Не найдено поле last_message_text\");\n  }\n\n  // Парсим строку JSON в объект\n  const messageData = JSON.parse(lastMessageText);\n\n  // Получаем текст сообщения\n  let messageText = messageData.text;\n  const entities = messageData.entities || [];\n\n  // Формируем текст с учётом всех entities\n  let formattedText = \"\";\n  let lastOffset = 0;\n\n  // Проходим по всем entities и добавляем их в итоговый текст\n  entities.forEach(entity => {\n    // Добавляем текст до текущего entity\n    formattedText += messageText.substring(lastOffset, entity.offset);\n\n    // Форматируем текст в зависимости от типа entity\n    switch (entity.type) {\n      case 'bold':\n        formattedText += `<b>${messageText.substring(entity.offset, entity.offset + entity.length)}</b>`;\n        break;\n      case 'italic':\n        formattedText += `<i>${messageText.substring(entity.offset, entity.offset + entity.length)}</i>`;\n        break;\n      case 'phone_number':\n        formattedText += `<a href=\"tel:${messageText.substring(entity.offset, entity.offset + entity.length)}\">${messageText.substring(entity.offset, entity.offset + entity.length)}</a>`;\n        break;\n      case 'text_link':\n        const url = entity.url; // Получаем URL из entity\n        formattedText += `<a href=\"${url}\">${messageText.substring(entity.offset, entity.offset + entity.length)}</a>`;\n        break;\n      default:\n        formattedText += messageText.substring(entity.offset, entity.offset + entity.length);\n        break;\n    }\n\n    // Обновляем lastOffset для следующей итерации\n    lastOffset = entity.offset + entity.length;\n  });\n\n  // Добавляем оставшийся текст после последнего entity\n  formattedText += messageText.substring(lastOffset);\n\n  // Получаем инлайн-кнопки\n  const inlineKeyboard = messageData.reply_markup.inline_keyboard || [];\n\n  // Получаем chat_id пользователя, который запустил workflow\n  const chatId = inputData.tg_id;\n\n  // Получаем ID сообщения\n  const messageId = messageData.message_id;\n\n  // Токен бота\n  const token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n  // URL для отправки сообщения через API Telegram\n  const url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n  // Формируем сообщение для отправки\n  const message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: formattedText, // Текст сообщения с HTML-ссылками\n    parse_mode: 'HTML',\n    reply_markup: {\n      inline_keyboard: inlineKeyboard // Инлайн-кнопки\n    }\n  };\n\n  // Возвращаем результат для каждого элемента\n  return {\n    json: {\n      url,\n      message\n    }\n  };\n});\n"
      },
      "id": "2b3ad67e-09f1-48f7-b8fb-f68d28da38f9",
      "name": "формируем сообщения для возврата к заявке",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1380,
        5540
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Слесарю назначена работа",
        "additionalFields": {}
      },
      "id": "a6cead06-c955-48b7-9aaf-20b855b62702",
      "name": "слесарю назначена работа",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1080,
        5320
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 5;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page\" }]);\n}\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "66fdb8a7-14cf-4b05-aee7-38207412e3c9",
      "name": "возврат к первой странице",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        5200
      ]
    },
    {
      "parameters": {
        "content": "## Вывод и назначение слесарей",
        "height": 1615.7958077300927,
        "width": 2062.437759244588
      },
      "id": "58b1965b-51fe-4403-84a3-a5736ab8e056",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        660,
        4369.404988100566
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопки \"провести ТО\"",
        "height": 230.02744518719146,
        "width": 1529.933601506939,
        "color": 5
      },
      "id": "9356525b-ff13-460b-a510-10b8ad4d211b",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        920,
        4460
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопки \"Взять в ремонт\"",
        "height": 230.02744518719146,
        "width": 1529.933601506939,
        "color": 5
      },
      "id": "a640f584-9b50-4698-87fd-3d48d1695694",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1060,
        4700
      ]
    },
    {
      "parameters": {
        "content": "## Переключение на следующую страницу слесарей",
        "height": 197.08380449648854,
        "width": 739.2862249300688,
        "color": 5
      },
      "id": "55702650-7e12-4f5d-818d-12b8df495922",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1100,
        4940
      ]
    },
    {
      "parameters": {
        "content": "## Возврат к предыдущей страницы слесарей",
        "height": 197.08380449648854,
        "width": 739.2862249300688,
        "color": 5
      },
      "id": "cfdcaf26-6859-4794-8f47-7eee72ccefc6",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1200,
        5160
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопки \"Назад\"",
        "height": 197.08380449648854,
        "width": 739.2862249300688,
        "color": 5
      },
      "id": "6439ca04-ed80-4b17-a435-6506f9ea5735",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1100,
        5500
      ]
    },
    {
      "parameters": {
        "content": "## Уточнение по выбору слесаря",
        "height": 197.08380449648854,
        "width": 488.0909646634591,
        "color": 5
      },
      "id": "ce3e1910-6c94-4dfb-b2ee-fa28e26e792f",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        960,
        5740
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "Документы",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "883202d0-9665-45c9-b4a4-894176a88fa7",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "Заявки на проверке",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "78b17236-46b7-4c0e-adbf-0f90ce06934d",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "Все заявки",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "e9585cec-ac14-473b-a527-17e5315657d8",
      "name": "Проверка кнопок",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1000,
        1200
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "status",
              "value": "К выполнению"
            }
          ]
        }
      },
      "id": "079402f0-b7e0-4e1b-be85-df573241a165",
      "name": "получим все неисправности3",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1340,
        1120
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    return {\n        text: `${startIndex + index + 1}. ${carInfo} - ${truncatedDescription}`, // Используем startIndex для правильной нумерации\n        callback_data: `all_item_${item.json.id}_page_${page}` // Добавляем номер страницы\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `all_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `all_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"del_maintenances\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.message.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/sendMessage`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    text: \"Заявки, ожидающие выполнения:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки, ожидающие выполнения:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}\n"
      },
      "id": "6d3d4302-52d8-45b0-a5b0-fbba38859148",
      "name": "выбор заявки(первая страница)1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1820,
        1120
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "800aa14a-21a2-4347-a7c6-9871b1c48f5f",
      "name": "отправляем сообщение 9",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2120,
        1120
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "status",
              "value": "К выполнению"
            }
          ]
        }
      },
      "id": "53ddbb50-c2d7-49fa-9dbf-44a55b21dc61",
      "name": "получим все неисправности4",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        280,
        7380
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    // Используем startIndex для корректного отображения номера\n    const buttonIndex = startIndex + index + 1;\n\n    return {\n        text: `${buttonIndex}. ${carInfo} - ${truncatedDescription}`,\n        callback_data: `all_item_${item.json.id}_page_${page}` // Добавляем номер страницы в callback_data\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `all_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `all_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"del_maintenances\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Заявки, ожидающие выполнения:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки, ожидающие выполнения:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "5cdf0a95-076c-4ac9-a060-1c796fb74e68",
      "name": "выбор заявки(первая страница)2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        7380
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "a35546ee-14be-4114-871e-e7ee2be1bdf6",
      "name": "отправляем сообщение 10",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        720,
        7380
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "del_maintenances",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fe17b5e-971b-414d-b1e2-82872f01feae",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"page_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cab21627-7a55-4569-b357-b424c3905103",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"item_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "3654888a-0602-4ab8-aee2-258f1e73d4ee",
      "name": "заявки на проверке",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -140,
        6600
      ]
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "technical.maintenance",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "id",
              "value": "={{ $json.callback_query.data.split('_')[2] }}"
            }
          ]
        }
      },
      "id": "c9ba8d56-370e-49c5-a6a1-dc1fc29cd5f2",
      "name": "получим все неисправности5",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        180,
        7600
      ],
      "alwaysOutputData": true,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Получаем данные о колбэке из Execute Workflow Trigger\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nconst callbackData = callbackQuery ? callbackQuery.data : null;\n\n// Проверяем, был ли получен callbackData\nif (!callbackData) {\n    throw new Error(\"Callback data is undefined. Cannot proceed.\");\n}\n\n// Извлекаем message_id из callback_query\nconst messageId = callbackQuery.message.message_id;\n\n// Обработка выбора заявки\nconst selectedMatch = callbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Получаем информацию о выбранной заявке\n    const selectedRequest = items.find(item => item.json.id == itemId);\n    // Извлекаем необходимые данные из JSON\n    const {\n        description_of_maintenance,\n        car_id,\n        created_by\n    } = selectedRequest.json;\n\n    const descriptionText = description_of_maintenance === \"Нет описания\" \n        ? `${description_of_maintenance} (Смотреть фото в Odoo)` \n        : description_of_maintenance;\n\n    // Формируем текст сообщения\n    const carName = car_id[1].split(' - ')[0]; // Получаем только номер авто\n\n    // Ищем данные о водителе\n    const driverData = items.find(item => item.json.resource_id && item.json.resource_id[1] === created_by[1]);\n    \n    // Если данные о водителе найдены, извлекаем имя и телефон\n    const name = driverData ? driverData.json.name : 'Неизвестный водитель';\n    const mobile_phone = driverData ? driverData.json.mobile_phone : 'Телефон не указан';\n\n    // Формируем ссылку на заявку в Odoo\n    const odooLink = `https://everest.lamart.site/web#id=${itemId}&model=technical.maintenance&view_type=form`;\n\n    // Полное сообщение\n    const messageText = `У автомобиля: <b>${carName}</b>, водитель <b>${name}</b> <a href=\"tel:${mobile_phone}\">${mobile_phone}</a> проблема:\\n\\n` +\n        `<i>${descriptionText}</i>\\n\\n` +\n        `<a href=\"${odooLink}\">Ссылка на заявку в Odoo</a>`;\n\n    // Получаем chat_id из callback_query\n    const chatId = callbackQuery.from.id;\n\n    // Токен бота\n    const token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n    // URL для редактирования сообщения через API Telegram\n    const url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n    // Создаем объект с inline-клавиатурой в один столбик\n    const inlineKeyboard = {\n        inline_keyboard: [\n            [\n                { text: \"Провести ТО\", callback_data: `do_to` } // Добавляем ID заявки\n            ],\n            [\n                { text: \"Взять в ремонт\", callback_data: `take_to_fix` } // Добавляем ID заявки\n            ],\n            [\n                { text: \"Назад\", callback_data: `all_page_${returnPage}` } // Устанавливаем номер страницы в колбэк\n            ]\n        ]\n    };\n\n    // Формируем сообщение для редактирования\n    const message = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: messageText,\n        parse_mode: 'HTML', // Указываем, что текст содержит HTML\n        reply_markup: inlineKeyboard // Добавляем inline-клавиатуру\n    };\n\n    // Возвращаем данные для запроса\n    return [\n        {\n            json: {\n                url,\n                message\n            }\n        }\n    ];\n}\n"
      },
      "id": "927466e9-e601-4bdf-87bd-1fc42fb05f07",
      "name": "генерация сообщения для просмотра заявки1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        860,
        7620
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "b77d49f5-02cf-4435-bfd0-7029e1e77277",
      "name": "отправляем сообщение 11",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1060,
        7620
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_driver_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "driver_id",
              "value": "={{ $json.created_by[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5138a119-603b-4624-8a45-ecc685326c1a",
      "name": "данные сотрудника",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        400,
        7720
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "6ad2df09-ab9e-471d-b118-1c80fcd952d8",
      "name": "объединяем заявки и сотрудника",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        640,
        7620
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "=do_to",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3fc6507a-dbe4-408d-a18c-d24ce772b571",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "take_to_fix",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "501b491c-9e53-4a06-9131-ace4e5475acd",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "next_page",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8988c080-1e70-40e4-9c6b-8589fbcd5eb4",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "first_page",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "83dc5f20-fad0-4049-83de-82591dd2e8f1",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "give_work",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "336ee09b-4d4b-4b2e-ae32-d0bfb1a4f681",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "get_maintenance_mess",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2927aeed-e424-44be-8f57-36e5dc1ae679",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"locksmith_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "4b776cc7-99e9-4f97-b382-363a51ae0834",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        0,
        4700
      ]
    },
    {
      "parameters": {
        "content": "## Вывод первой страницы заявок \"Требуется проверка\"",
        "height": 307.94693315000904,
        "width": 951.2414729127986,
        "color": 5
      },
      "id": "8ecf9a35-a223-4a9c-8ab1-665775380b41",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1320,
        735.8813706882281
      ]
    },
    {
      "parameters": {
        "content": "## Вывод первой страницы заявок \"К выполнению\"",
        "height": 304.6481633730767,
        "width": 977.6316311282565,
        "color": 5
      },
      "id": "d4cc9ed1-9ddd-4a9f-bca6-6903e1935e71",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1320,
        1071.7530755576695
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"all_page_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "107a6bca-cf08-46fa-9b50-c1e5d62a596f",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"all_item_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "f93fcd17-f824-4609-8155-a0d185d07ab5",
      "name": "обработка всех заявок",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -200,
        7600
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопок у \"Все заявки\"",
        "height": 616.3642937714515,
        "width": 1106.1858989577363
      },
      "id": "3d1c8383-248d-4175-aae7-f3bfd8fdd40f",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        120,
        7300
      ]
    },
    {
      "parameters": {
        "content": "## Обработка страниц с заявками",
        "height": 190.84341479968202,
        "width": 640.9643923958661,
        "color": 5
      },
      "id": "8ebfdd77-b696-40f6-8361-bca3f150340b",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        220,
        7340
      ]
    },
    {
      "parameters": {
        "content": "## Подробный вывод заявки",
        "height": 311.6467894317699,
        "width": 1065.0613458914934,
        "color": 5
      },
      "id": "967c79f9-f2ca-4abf-b39f-777beffd569d",
      "name": "Sticky Note20",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        7560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности1').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "42bc753b-0376-4c4f-9083-294dfa19dccc",
      "name": "Есть ли заявки на проверке",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1560,
        880
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "На данный момент нет заявок, требующих проверки!",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "f7f9face-dc25-43e8-9e54-d46f2c466c5f",
      "name": "нет заявок на проверке",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1980,
        920
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности3').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "df842e36-b162-4d70-970a-2da250dd3113",
      "name": "Есть ли заявки к выполнению",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1540,
        1180
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "d33f9a08-eb9d-4a2d-8a30-a340cb1911ca",
      "name": "нет заявок к выполнению",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1980,
        1240
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "getTimeBetweenDates",
        "startDate": "={{ $today }}",
        "endDate": "={{ $json.expiration_date }}",
        "options": {}
      },
      "id": "a568861f-06a0-4019-a55d-f2c7b571ab1f",
      "name": "разница в днях",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1340,
        2840
      ]
    },
    {
      "parameters": {},
      "id": "8b95bd69-1953-4fb8-ba9e-73c1125d1432",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1500,
        3280
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Нет истекающих документов!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "view_date"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "b7f538d9-87a8-4157-867f-6260277f5ec1",
      "name": "отправка сообщения",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1860,
        3260
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "documents.documents",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "expiration_date",
              "operator": "lesserOrEqual",
              "value": "={{ $json.newformattedDate }}"
            },
            {
              "fieldName": "expiration_date",
              "operator": "greaterOrEqual",
              "value": "={{ $('дата и время 23:1').item.json.newformattedDate1 }}"
            }
          ]
        }
      },
      "id": "27b0cd3d-18ea-49fd-8761-ef5b7fa52dff",
      "name": "документы с истекающим сроком1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1260,
        3180
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "documents.documents",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "expiration_date",
              "operator": "lesserOrEqual",
              "value": "={{ $json.newformattedDate }}"
            }
          ]
        }
      },
      "id": "ab82011e-f659-4860-b3f6-9dcf4a8c9c86",
      "name": "документы с истекающим сроком2",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        880,
        3340
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "documents.documents",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "expiration_date",
              "operator": "lesserOrEqual",
              "value": "={{ $json.newformattedDate }}"
            },
            {
              "fieldName": "expiration_date",
              "operator": "greaterOrEqual",
              "value": "={{ $('дата и время 23:3').item.json.newformattedDate1 }}"
            }
          ]
        }
      },
      "id": "32edc9fc-0f39-4e30-890e-932aff3686a6",
      "name": "документы с истекающим сроком3",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1260,
        3540
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "documents.documents",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "expiration_date",
              "operator": "lesserOrEqual",
              "value": "={{ $json.newformattedDate }}"
            }
          ]
        }
      },
      "id": "08a05104-322f-4733-93d5-d16cc9751160",
      "name": "документы с истекающим сроком4",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        880,
        3700
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "documents.documents",
        "operation": "getAll",
        "returnAll": true,
        "options": {},
        "filterRequest": {
          "filter": [
            {
              "fieldName": "expiration_date",
              "operator": "lesserOrEqual",
              "value": "={{ $json.newformattedDate }}"
            }
          ]
        }
      },
      "id": "17c7cbc3-a9b5-4465-aa60-35d8e86f98ce",
      "name": "документы с истекающим сроком",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        860,
        2840
      ],
      "alwaysOutputData": false,
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "expiration_date"
            }
          ]
        },
        "options": {}
      },
      "id": "5396d9d9-9393-4905-8d91-e062b153b25a",
      "name": "Sort",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1060,
        2840
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "inputing_reject_text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "42386fc6-e310-4ebd-bb5b-555d0eeb71d9",
      "name": "статус механика",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        380,
        1260
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "={{ \"/start\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "758a3809-90b6-4b21-8cd5-39db856874bf",
      "name": "Проверка старта1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        740,
        1240
      ]
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "update_id": 100632557,
          "callback_query": {
            "id": "2800172963424984192",
            "from": {
              "id": 7094417017,
              "is_bot": false,
              "first_name": "Сергей",
              "last_name": "Косолапов",
              "username": "sergio_kf",
              "language_code": "ru"
            },
            "message": {
              "message_id": 25084,
              "from": {
                "id": 7063451965,
                "is_bot": true,
                "first_name": "Everest n8n",
                "username": "myn8nbotbot"
              },
              "chat": {
                "id": 7094417017,
                "first_name": "Сергей",
                "last_name": "Косолапов",
                "username": "sergio_kf",
                "type": "private"
              },
              "date": 1729705998,
              "edit_date": 1729707087,
              "text": "Выберите за какой период хотите проверить документы:",
              "reply_markup": {
                "inline_keyboard": [
                  [
                    {
                      "text": "1-7 дней",
                      "callback_data": "7_days"
                    }
                  ],
                  [
                    {
                      "text": "8-14 дней",
                      "callback_data": "14_days"
                    }
                  ],
                  [
                    {
                      "text": "15-21 день",
                      "callback_data": "21_days"
                    }
                  ],
                  [
                    {
                      "text": "Назад",
                      "callback_data": "delete_date"
                    }
                  ]
                ]
              }
            },
            "chat_instance": "-3242410479096206559",
            "data": "14_days"
          },
          "tg_id": "7094417017",
          "odoo_id": 22,
          "status": "authorized",
          "only_mech": false,
          "mech_photo": false,
          "end_request_id": 569,
          "materials_photo": false,
          "end_request_hours": null,
          "car_id_while_inputing": 24,
          "fuel_liters": null,
          "weight_measure": "15 Тонны ",
          "logist_alert_text": null,
          "logist_recipient_name": null,
          "transportation_for_certificate": null,
          "count_weight_photo": null,
          "count_weight_photo_sent": null,
          "current_quarry_hours": null,
          "end_round_message_id": 22183,
          "last_message_text": "{\"message_id\":24933,\"from\":{\"id\":7063451965,\"is_bot\":true,\"first_name\":\"Everest n8n\",\"username\":\"myn8nbotbot\"},\"chat\":{\"id\":7094417017,\"first_name\":\"Сергей\",\"last_name\":\"Косолапов\",\"username\":\"sergio_kf\",\"type\":\"private\"},\"date\":1729594048,\"edit_date\":1729594106,\"text\":\"У автомобиля: А 657 АА, водитель Сергей Косолапов +79227408630 проблема\\n\\nтест заявка\\n\\nСсылка на заявку в Odoo\",\"entities\":[{\"offset\":14,\"length\":8,\"type\":\"bold\"},{\"offset\":33,\"length\":16,\"type\":\"bold\"},{\"offset\":50,\"length\":12,\"type\":\"phone_number\"},{\"offset\":73,\"length\":11,\"type\":\"italic\"},{\"offset\":86,\"length\":23,\"type\":\"text_link\",\"url\":\"https://everest.lamart.site/web#id=580&model=technical.maintenance&view_type=form\"}],\"link_preview_options\":{\"url\":\"https://everest.lamart.site/web\"},\"reply_markup\":{\"inline_keyboard\":[[{\"text\":\"Провести ТО\",\"callback_data\":\"do_to\"}],[{\"text\":\"Взять в ремонт\",\"callback_data\":\"take_to_fix\"}],[{\"text\":\"Назад\",\"callback_data\":\"all_page_2\"}]]}}",
          "logist_notifications": false,
          "cookie": "session_id=88ccf62b42920ec8fc3a7e36c1bbc079208fa499; Expires=Fri, 17 Oct 2025 05:43:43 GMT; Max-Age=604800; HttpOnly; Path=/"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Vladivostok",
    "saveManualExecutions": false,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-08-26T14:50:05.418Z",
      "updatedAt": "2024-08-26T14:50:05.418Z",
      "id": "6aWMzdObOVIXsJ6y",
      "name": "production"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-11-02T13:26:26.667Z",
  "versionId": "722549ab-76b6-4422-8b3f-e69ed138f871"
}