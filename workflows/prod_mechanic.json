{
  "active": false,
  "connections": {
    "статус=ввод комментария": {
      "main": [
        [
          {
            "node": "отклонение заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "новое сообщение": {
      "main": [
        [
          {
            "node": "удаляем старое сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "удаляем старое сообщение": {
      "main": [
        [
          {
            "node": "статус=ввод комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "номер заявки": {
      "main": [
        [
          {
            "node": "актуальный статус заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "можно ли изменить статус": {
      "main": [
        [
          {
            "node": "есть ли изображение",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "уже обработана",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли изображение": {
      "main": [
        [
          {
            "node": "новое сообщение",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ввод комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ввод комментария": {
      "main": [
        [
          {
            "node": "статус=ввод комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск айди водителя": {
      "main": [
        [
          {
            "node": "отправка водителю комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "новое сообщение1": {
      "main": [
        [
          {
            "node": "удаляем старое сообщение1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "удаляем старое сообщение1": {
      "main": [
        [
          {
            "node": "принятие заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "номер заявки1": {
      "main": [
        [
          {
            "node": "актуальный статус заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "можно ли изменить статус1": {
      "main": [
        [
          {
            "node": "есть ли изображение1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "уже обработана1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли изображение1": {
      "main": [
        [
          {
            "node": "новое сообщение1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ввод комментария1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ввод комментария1": {
      "main": [
        [
          {
            "node": "принятие заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отправка водителю комментария": {
      "main": [
        [
          {
            "node": "возвращаем дефолтный статус",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через неделю": {
      "main": [
        [
          {
            "node": "дата и время 23:59",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "округляем": {
      "main": [
        [
          {
            "node": "объединяем доки+дата с разницей во времени",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "объединяем доки+дата с разницей во времени": {
      "main": [
        [
          {
            "node": "склоняем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склоняем": {
      "main": [
        [
          {
            "node": "сколько дней до окончания срока",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склеиваем": {
      "main": [
        [
          {
            "node": "объединяем в один список",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "объединяем": {
      "main": [
        [
          {
            "node": "отправка сообщения1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "если истекло": {
      "main": [
        [
          {
            "node": "объединяем в один список",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "объединяем в один список": {
      "main": [
        [
          {
            "node": "объединяем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:59": {
      "main": [
        [
          {
            "node": "документы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:": {
      "main": [
        [
          {
            "node": "документы1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:1": {
      "main": [
        [
          {
            "node": "дата через 14 дней",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:60": {
      "main": [
        [
          {
            "node": "документы2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сколько дней до окончания срока": {
      "main": [
        [
          {
            "node": "если истекло",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "склеиваем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:2": {
      "main": [
        [
          {
            "node": "документы3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:3": {
      "main": [
        [
          {
            "node": "дата через 21 день",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата и время 23:61": {
      "main": [
        [
          {
            "node": "документы4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через 8 дней": {
      "main": [
        [
          {
            "node": "дата и время 23:1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через 14 дней": {
      "main": [
        [
          {
            "node": "дата и время 23:",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через 15 дней": {
      "main": [
        [
          {
            "node": "дата и время 23:3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата через 21 день": {
      "main": [
        [
          {
            "node": "дата и время 23:2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата сегодня": {
      "main": [
        [
          {
            "node": "дата и время 23:61",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "дата сегодня1": {
      "main": [
        [
          {
            "node": "дата и время 23:60",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Сборка списка слесарей": {
      "main": [
        [
          {
            "node": "Вывод списка слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Сборка списка слесарей1": {
      "main": [
        [
          {
            "node": "Вывод списка слесарей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделение на дни для документов": {
      "main": [
        [
          {
            "node": "дата через неделю",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "дата через 8 дней",
            "type": "main",
            "index": 0
          },
          {
            "node": "дата сегодня1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "дата через 15 дней",
            "type": "main",
            "index": 0
          },
          {
            "node": "дата сегодня",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "возврат к выбору периода",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "удаления сообщения с выбором",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Удаление прошлого сообщения2": {
      "main": [
        [
          {
            "node": "Удаление прошлого сообщения3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "инлайн-кнопки для механика": {
      "main": [
        [
          {
            "node": "номер заявки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "номер заявки1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "разделение на дни для документов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обработка страниц с выбором заявки": {
      "main": [
        [
          {
            "node": "отправляем сообщение 5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "генерация сообщения для просмотра заявки": {
      "main": [
        [
          {
            "node": "отправляем сообщение 6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор заявки(первая страница)": {
      "main": [
        [
          {
            "node": "отправляем сообщение 1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем текст сообщения": {
      "main": [
        [
          {
            "node": "поиск слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем текст сообщения1": {
      "main": [
        [
          {
            "node": "поиск слесарей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск тг айди механиков": {
      "main": [
        [
          {
            "node": "формируем сообщения для возврата к заявке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем сообщение с заявкой": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем сообщение с заявкой1": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первая страница слесарей": {
      "main": [
        [
          {
            "node": "отправляем сообщение 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первая страница слесарей1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "следующая страница слесарей": {
      "main": [
        [
          {
            "node": "отправляем сообщение ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "формируем сообщения для возврата к заявке": {
      "main": [
        [
          {
            "node": "отправляем сообщение 8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возврат к первой странице": {
      "main": [
        [
          {
            "node": "отправляем сообщение 4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "генерация сообщения для просмотра заявки1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "данные сотрудника": {
      "main": [
        [
          {
            "node": "объединяем заявки и сотрудника",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "объединяем заявки и сотрудника": {
      "main": [
        [
          {
            "node": "генерация сообщения для просмотра заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки на проверке": {
      "main": [
        [
          {
            "node": "выбор заявки(первая страница)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок на проверке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разница в днях": {
      "main": [
        [
          {
            "node": "округляем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort": {
      "main": [
        [
          {
            "node": "разница в днях",
            "type": "main",
            "index": 0
          },
          {
            "node": "объединяем доки+дата с разницей во времени",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Проверка старта1": {
      "main": [
        [
          {
            "node": "Приветственное сообщений",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Проверка кнопок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности": {
      "main": [
        [
          {
            "node": "получим все неисправности1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности1": {
      "main": [
        [
          {
            "node": "Есть ли заявки на проверке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности2": {
      "main": [
        [
          {
            "node": "получим все неисправности",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности": {
      "main": [
        [
          {
            "node": "обработка страниц с выбором заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявки на проверке": {
      "main": [
        [
          {
            "node": "Удаление прошлого сообщения2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "неисправности2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "обработка всех заявок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Stop and Error",
            "type": "main",
            "index": 0
          },
          {
            "node": "Проверка типа входных данных",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности2": {
      "main": [
        [
          {
            "node": "генерация сообщения для просмотра заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности3": {
      "main": [
        [
          {
            "node": "получим все неисправности4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности4": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности5": {
      "main": [
        [
          {
            "node": "объединяем заявки и сотрудника",
            "type": "main",
            "index": 0
          },
          {
            "node": "данные сотрудника",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "актуальный статус заявки1": {
      "main": [
        [
          {
            "node": "можно ли изменить статус1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "актуальный статус заявки": {
      "main": [
        [
          {
            "node": "можно ли изменить статус",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск водителя по заявке": {
      "main": [
        [
          {
            "node": "поиск айди водителя",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей": {
      "main": [
        [
          {
            "node": "первая страница слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей1": {
      "main": [
        [
          {
            "node": "первая страница слесарей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей2": {
      "main": [
        [
          {
            "node": "убираем выбранных слесарей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей3": {
      "main": [
        [
          {
            "node": "убираем выбранных слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы1": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы с истекающим сроком1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы2": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы с истекающим сроком2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "документы3": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы с истекающим сроком5": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы4": {
      "main": [
        [
          {
            "node": "документы с истекающим сроком4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы с истекающим сроком4": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Sort1": {
      "main": [
        [
          {
            "node": "выбор авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности4": {
      "main": [
        [
          {
            "node": "получим все неисправности6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности6": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sort3": {
      "main": [
        [
          {
            "node": "выбор авто1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению1": {
      "main": [
        [
          {
            "node": "Sort1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению2": {
      "main": [
        [
          {
            "node": "Sort3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "для доступа по индексу",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документы с истекающим сроком": {
      "main": [
        [
          {
            "node": "для доступа по индексу",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "документов нет?": {
      "main": [
        [
          {
            "node": "Нет документов",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "для доступа по индексу",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "уберём нулевые",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "уберём нулевые": {
      "main": [
        [
          {
            "node": "Sort",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "для доступа по индексу": {
      "main": [
        [
          {
            "node": "документов нет?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отправляем сообщение 3": {
      "main": [
        [
          {
            "node": "берем id заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отправляем сообщение 8": {
      "main": [
        [
          {
            "node": "удаляем id заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности7": {
      "main": [
        [
          {
            "node": "все слесари1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "берем id заявки": {
      "main": [
        [
          {
            "node": "сохраняем id заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "слесарю назначена работа": {
      "main": [
        [
          {
            "node": "удаляем id заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "все слесари": {
      "main": [
        [
          {
            "node": "убираем выбранных слесарей5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "все слесари1": {
      "main": [
        [
          {
            "node": "нужный слесарь1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "нужный слесарь1": {
      "main": [
        [
          {
            "node": "выбранный слесарь",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск тг айди слесаря": {
      "main": [
        [
          {
            "node": "Отправка заявки слесарю",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возвращаем дефолтный статус": {
      "main": [
        [
          {
            "node": "получаем роль кто выполнил заявку",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем роль кто выполнил заявку": {
      "main": [
        [
          {
            "node": "слесарь/водитель",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "берем id заявки1": {
      "main": [
        [
          {
            "node": "сохраняем id заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отправляем сообщение 2": {
      "main": [
        [
          {
            "node": "берем id заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "назначение слесаря": {
      "main": [
        [
          {
            "node": "слесарю назначена работа",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "удаляем id заявки1": {
      "main": [
        [
          {
            "node": "получаем текущее время + ожидаемое время",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности8": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим все неисправности10": {
      "main": [
        [
          {
            "node": "Есть ли заявки к выполнению4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению3": {
      "main": [
        [
          {
            "node": "сортируем по дате и срочности",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Есть ли заявки к выполнению4": {
      "main": [
        [
          {
            "node": "сортируем по дате и срочности1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет заявок к выполнению4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обработка всех заявок": {
      "main": [
        [
          {
            "node": "неисправности3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "неисправности4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ремонт или ТО1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "обработка всех заявок по выбранному авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "находим авто": {
      "main": [
        [
          {
            "node": "неисправности по авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "находим авто1": {
      "main": [
        [
          {
            "node": "неисправности по авто1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности по авто": {
      "main": [
        [
          {
            "node": "получим все неисправности8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сортируем по дате и срочности": {
      "main": [
        [
          {
            "node": "вывод заявок по авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сортируем по дате и срочности1": {
      "main": [
        [
          {
            "node": "вывод заявок по авто1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "вывод заявок по авто": {
      "main": [
        [
          {
            "node": "отправляем сообщение 13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "вывод заявок по авто1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор авто": {
      "main": [
        [
          {
            "node": "отправляем сообщение 10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбор авто1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "статус механика": {
      "main": [
        [
          {
            "node": "поиск водителя по заявке",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "проверка на число5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "проверка на число",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "подтверждение проблемы",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "форматируем номер",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "проверка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка на число5": {
      "main": [
        [
          {
            "node": "Обработка числа и склонения",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "часы введены неверно2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возвращаем дефолтный статус1": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ожидаемое время ремонта": {
      "main": [
        [
          {
            "node": "все слесари",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем текущее время + ожидаемое время": {
      "main": [
        [
          {
            "node": "ожидаемое время ремонта",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "введите часы": {
      "main": [
        [
          {
            "node": "меняем статус на ввод часов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Обработка числа и склонения": {
      "main": [
        [
          {
            "node": "возвращаем дефолтный статус1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка кнопок": {
      "main": [
        [
          {
            "node": "выбор периода документов",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "неисправности",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ремонт или ТО",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ремонт или ТО2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "статус механика",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем выбранных слесарей": {
      "main": [
        [
          {
            "node": "возврат к первой странице",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем выбранных слесарей1": {
      "main": [
        [
          {
            "node": "следующая страница слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей4": {
      "main": [
        [
          {
            "node": "убираем выбранных слесарей2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем выбранных слесарей2": {
      "main": [
        [
          {
            "node": "возврат к первой странице1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возврат к первой странице1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей5": {
      "main": [
        [
          {
            "node": "убираем выбранных слесарей3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем выбранных слесарей3": {
      "main": [
        [
          {
            "node": "склеиваем имена слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей6": {
      "main": [
        [
          {
            "node": "убираем выбранных слесарей4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем выбранных слесарей4": {
      "main": [
        [
          {
            "node": "возврат к первой странице2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возврат к первой странице2": {
      "main": [
        [
          {
            "node": "отправляем сообщение 9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "сохраняем сообщение с заявкой",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "сохраняем сообщение с заявкой1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск слесарей2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск слесарей3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "назначение слесаря",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск тг айди механиков",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получим все неисправности7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявки на проверке1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявки на проверке1": {
      "main": [
        [
          {
            "node": "введите часы",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "склеиваем json слесарей",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск слесарей5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "обнуляем список слесарей",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск слесарей7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "поиск слесарей8",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявки на проверке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем выбранных слесарей5": {
      "main": [
        [
          {
            "node": "поиск тг айди слесаря",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обработка всех заявок по выбранному авто": {
      "main": [
        [
          {
            "node": "находим авто",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "находим авто1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "выполнение заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склеиваем json слесарей": {
      "main": [
        [
          {
            "node": "обновляем json",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обновляем json": {
      "main": [
        [
          {
            "node": "поиск слесарей4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавляем слесаря в массив": {
      "main": [
        [
          {
            "node": "обновляем список слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склеиваем имена слесарей": {
      "main": [
        [
          {
            "node": "берем название заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "берем название заявки": {
      "main": [
        [
          {
            "node": "подтверждение слесарей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обнуляем список слесарей": {
      "main": [
        [
          {
            "node": "поиск слесарей6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбранный слесарь": {
      "main": [
        [
          {
            "node": "добавляем слесаря в массив",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "слесарь/водитель": {
      "main": [
        [
          {
            "node": "комментарий отправлен слесарю",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "комментарий отправлен1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "следующая страница слесарей1": {
      "main": [
        [
          {
            "node": "отправляем сообщение 14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возврат к первой странице3": {
      "main": [
        [
          {
            "node": "отправляем сообщение 16",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей7": {
      "main": [
        [
          {
            "node": "убираем выбранных слесарей7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "поиск слесарей8": {
      "main": [
        [
          {
            "node": "убираем выбранных слесарей6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем выбранных слесарей6": {
      "main": [
        [
          {
            "node": "возврат к первой странице3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем выбранных слесарей7": {
      "main": [
        [
          {
            "node": "следующая страница слесарей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "номер выбранной заявки": {
      "main": [
        [
          {
            "node": "обновим статус на \"в работе\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обновим статус на \"в работе\"": {
      "main": [
        [
          {
            "node": "заявка взята в работу",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "если есть ошибки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "номер выбранной заявки1": {
      "main": [
        [
          {
            "node": "получим актуальный статус заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявка в работе?": {
      "main": [
        [
          {
            "node": "нужно вписать часы",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявка уже изменена",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "нужно вписать часы": {
      "main": [
        [
          {
            "node": "обновим статус и номер текущей заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "завершён процесс заявки1": {
      "main": [
        [
          {
            "node": "меняем на статус отправки фотографии",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "завершён процесс заявки": {
      "main": [
        [
          {
            "node": "принятие заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "нужно ли приложить фото?1": {
      "main": [
        [
          {
            "node": "возвращаем статус3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявка взята в работу": {
      "main": [
        [
          {
            "node": "удаляем id заявки2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "введите часы1": {
      "main": [
        [
          {
            "node": "меняем статус на ввод часов1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "часы введены неверно",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "часы введены неверно1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получим актуальный статус заявки": {
      "main": [
        [
          {
            "node": "заявка в работе?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обновляем заявку": {
      "main": [
        [
          {
            "node": "нужно ли приложить фото?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "если есть ошибки2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "нужно ли приложить фото?": {
      "main": [
        [
          {
            "node": "возвращаем статус2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка на число": {
      "main": [
        [
          {
            "node": "обновляем заявку",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "часы введены неверно3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка медиа": {
      "main": [
        [
          {
            "node": "статус механика1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Проверка старта1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File1": {
      "main": [
        [
          {
            "node": "загрузка фото исправления",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получение фото из тг1": {
      "main": [
        [
          {
            "node": "Extract from File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Фото доставлено2": {
      "main": [
        [
          {
            "node": "меняем статус на обычный",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "загрузка фото исправления": {
      "main": [
        [
          {
            "node": "Фото доставлено2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем кнопку \"назад\" у прикрепления фото": {
      "main": [
        [
          {
            "node": "получение фото из тг1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "принятие заявки1": {
      "main": [
        [
          {
            "node": "убираем номер заявки из пг",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "неисправности по авто1": {
      "main": [
        [
          {
            "node": "получим все неисправности10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем текущее время + ожидаемое время1": {
      "main": [
        [
          {
            "node": "ожидаемое время ремонта1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "удаляем id заявки2": {
      "main": [
        [
          {
            "node": "получаем текущее время + ожидаемое время1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка типа входных данных": {
      "main": [
        [
          {
            "node": "Проверка медиа",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "инлайн-кнопки для механика",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "меняем статус на обычный": {
      "main": [
        [
          {
            "node": "принятие заявки2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "статус механика1": {
      "main": [
        [
          {
            "node": "убираем кнопку \"назад\" у прикрепления фото",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "убираем кнопку \"назад\" у прикрепления фото1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выполнение заявки": {
      "main": [
        [
          {
            "node": "введите часы1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "номер выбранной заявки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "номер выбранной заявки1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "завершён процесс заявки1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "завершён процесс заявки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нужно ли приложить фото?1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбран ремонт": {
      "main": [
        [
          {
            "node": "обновляем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "выбрано ТО": {
      "main": [
        [
          {
            "node": "обновляем1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "выбран ремонт",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ремонт или ТО3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "выбрано ТО",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявка срочная?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "срочная/не срочная",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "введите описание",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нужно ли фото?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ввод номера авто",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прикрепите фото",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "введите дату",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Ищем автомобиль по номеру1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "создание заявки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "подтверждение отмены",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявка отменена",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "задаём не срочную заявку": {
      "main": [
        [
          {
            "node": "обновляем2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "задаём срочную заявку": {
      "main": [
        [
          {
            "node": "обновляем3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявка не срочная": {
      "main": [
        [
          {
            "node": "задаём не срочную заявку",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявка срочная": {
      "main": [
        [
          {
            "node": "задаём срочную заявку",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "срочная/не срочная": {
      "main": [
        [
          {
            "node": "заявка не срочная",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявка срочная",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "введите описание": {
      "main": [
        [
          {
            "node": "обновляем4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "нужно ли фото?": {
      "main": [
        [
          {
            "node": "обновляем10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ввод номера авто": {
      "main": [
        [
          {
            "node": "обновляем6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "введите дату": {
      "main": [
        [
          {
            "node": "обновляем8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ищем автомобиль по номеру1": {
      "main": [
        [
          {
            "node": "ТО/Ремонт",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ТО/Ремонт": {
      "main": [
        [
          {
            "node": "подтверждение заявки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "подтверждение заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создание заявки": {
      "main": [
        [
          {
            "node": "ожидаемое время ремонта2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "прикрепите фото": {
      "main": [
        [
          {
            "node": "обновляем11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли фото?": {
      "main": [
        [
          {
            "node": "загрузка фото неисправности",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявка создана",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "загрузка фото неисправности": {
      "main": [
        [
          {
            "node": "заявка создана",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ожидаемое время ремонта2": {
      "main": [
        [
          {
            "node": "есть ли фото?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "форматируем номер": {
      "main": [
        [
          {
            "node": "Ищем автомобиль по номеру",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ищем автомобиль по номеру": {
      "main": [
        [
          {
            "node": "проверка правильности номера",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Автомобиль отсутствует",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка правильности номера": {
      "main": [
        [
          {
            "node": "задаём id авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка": {
      "main": [
        [
          {
            "node": "корректно?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "корректно?": {
      "main": [
        [
          {
            "node": "вы ввели дату",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "неверная дата",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "вы ввели дату": {
      "main": [
        [
          {
            "node": "задаём дату",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "задаём дату": {
      "main": [
        [
          {
            "node": "обновляем9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "подтверждение проблемы": {
      "main": [
        [
          {
            "node": "задаём проблему",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "задаём проблему": {
      "main": [
        [
          {
            "node": "обновляем5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "задаём id авто": {
      "main": [
        [
          {
            "node": "обновляем7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "задаём фото",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получение фото из тг": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обновляем12": {
      "main": [
        [
          {
            "node": "фото прикреплено",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем кнопку \"назад\" у прикрепления фото1": {
      "main": [
        [
          {
            "node": "получение фото из тг",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "задаём фото": {
      "main": [
        [
          {
            "node": "обновляем12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявка создана": {
      "main": [
        [
          {
            "node": "обновляем13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-01-20T16:29:00.054Z",
  "id": "6aRSKCUb3Bu8wEZa",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "prod_mechanic",
  "nodes": [
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "status": "inputing_reject_text",
            "end_request_id": "={{ $('номер заявки').item.json.TO_number }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "19f6ab72-e80d-4547-8644-b3bff2fe0956",
      "name": "статус=ввод комментария",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2340,
        4900
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "file": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}",
        "additionalFields": {
          "caption": "Напишите для водителя комментарий к заявке:"
        }
      },
      "id": "679f1d2a-27c6-48d7-9ef1-201f933d9f92",
      "name": "новое сообщение",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1940,
        4780
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
      },
      "id": "1d7fe170-ae99-47d4-a641-7b3b656c0371",
      "name": "удаляем старое сообщение",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2120,
        4780
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Отклонение заявки",
        "height": 514.5918601391712,
        "width": 1635.0976739201933,
        "color": 6
      },
      "id": "718c4a09-6c08-48c7-b94b-1492f0cef0d7",
      "name": "Sticky Note41",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1020,
        4740
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7157f53b-6dc0-408e-b176-20681be56507",
              "name": "TO_number",
              "value": "={{ $json.callback_query.message.reply_markup.inline_keyboard[0][0].callback_data.substring(10) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "264b3763-e0cf-48f4-a05e-d3189dcc8246",
      "name": "номер заявки",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1080,
        5000
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "233e5f21-81d4-45cd-95c3-4a90228acb88",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Требуется проверка",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "4588d124-3a4c-45de-9d01-81f3660f2074",
      "name": "можно ли изменить статус",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1520,
        5000
      ]
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Заявка уже была обработана"
        }
      },
      "id": "ffe37308-3197-4e07-b583-30dd7532e266",
      "name": "уже обработана",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1740,
        5080
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8573591f-d67f-46fb-a1bc-d3a70cd9bc6c",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bfe856cf-5c83-4b08-bbd2-0de297547e60",
      "name": "есть ли изображение",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1740,
        4900
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Напишите для водителя комментарий к заявке:",
        "additionalFields": {}
      },
      "id": "a5b7aba2-7ca1-42a5-8c54-501d80ba9a3a",
      "name": "ввод комментария",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2020,
        4980
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "where": {
          "values": [
            {
              "column": "odoo_id",
              "value": "={{ $json.completed_by[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "530d3e76-9368-4ac3-9615-4ed0e27296d6",
      "name": "поиск айди водителя",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3720,
        1580
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Отправка комментария водителю",
        "height": 242.01551900336753,
        "width": 1646.276269162899,
        "color": 6
      },
      "id": "fb767ff2-4c82-4ab7-ab39-acaa26f8183c",
      "name": "Sticky Note43",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3400,
        1520
      ]
    },
    {
      "parameters": {
        "operation": "sendPhoto",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "file": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}",
        "additionalFields": {
          "caption": "Заявка подтверждена, водитель получит уведомление"
        }
      },
      "id": "5f8c8881-108b-4a1e-90cf-a1a74ad78af1",
      "name": "новое сообщение1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1940,
        5340
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
      },
      "id": "e44dfc7f-ed21-4cfc-9f9b-3cf79626c30a",
      "name": "удаляем старое сообщение1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2120,
        5340
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Принятие заявки",
        "height": 514.5918601391712,
        "width": 1415.7294837541995,
        "color": 6
      },
      "id": "515bc8a9-ebbc-4720-bca7-19df9e95aec4",
      "name": "Sticky Note44",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1040,
        5300
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7157f53b-6dc0-408e-b176-20681be56507",
              "name": "TO_number",
              "value": "={{ $json.callback_query.message.reply_markup.inline_keyboard[0][0].callback_data.substring(10) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "16272714-7054-4869-8f5a-f4dd4a2d2f25",
      "name": "номер заявки1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1080,
        5560
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "233e5f21-81d4-45cd-95c3-4a90228acb88",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Требуется проверка",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d1e224a8-e936-40b4-aab2-9658828aa0c4",
      "name": "можно ли изменить статус1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1520,
        5560
      ]
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Заявка уже была обработана"
        }
      },
      "id": "759ed0d2-8e3a-47cb-a7e1-a19f114e5d3d",
      "name": "уже обработана1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1740,
        5640
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "8573591f-d67f-46fb-a1bc-d3a70cd9bc6c",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "661729f1-3039-4611-abe6-9d260a3048e2",
      "name": "есть ли изображение1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1740,
        5460
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Заявка подтверждена, водитель получит уведомление",
        "additionalFields": {}
      },
      "id": "f90bbca1-b6f8-49bc-a5b5-596f9169206e",
      "name": "ввод комментария1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2020,
        5540
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "status": "authorized",
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "2acb049f-3237-455a-8754-1f911528d01d",
      "name": "возвращаем дефолтный статус",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        4160,
        1580
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "errorMessage": "3333"
      },
      "id": "767754fc-fb9c-4f94-9aa0-0bb6bcfcb50b",
      "name": "Stop and Error",
      "type": "n8n-nodes-base.stopAndError",
      "typeVersion": 1,
      "position": [
        -700,
        5300
      ],
      "disabled": true
    },
    {
      "parameters": {
        "chatId": "={{ $json.tg_id }}",
        "text": "=<b>Работа не принята</b>\n\n<i>{{ $('поиск водителя по заявке').item.json.description_of_maintenance }}</i>\n\nКомментарий механика: {{ $('Execute Workflow Trigger').item.json.message.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "a5346065-cb47-4705-be49-58a3a7794dfa",
      "name": "отправка водителю комментария",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3960,
        1580
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/reject_maintenance_by_mechanic",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"maintenance_id\": {{ $('номер заявки').item.json.TO_number }}\n}",
        "options": {}
      },
      "id": "b543cf15-c611-4bfd-a748-7922dd51eda3",
      "name": "отклонение заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2540,
        4900
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/accept_maintenance_by_mechanic",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"maintenance_id\": {{ $('номер заявки1').item.json.TO_number }}\n}",
        "options": {}
      },
      "id": "a75276f4-92ab-461c-86ed-0810a7a02dda",
      "name": "принятие заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2340,
        5460
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 7,
        "options": {}
      },
      "id": "6937a809-cbe4-44d0-a3a7-7174f461f82e",
      "name": "дата через неделю",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1340,
        5980
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0bd3f1ff-9963-406f-b40f-8c9e47ba7e30",
              "name": "timeDifference",
              "value": "={{ $json.timeDifference.days.round() }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "bb8f8c2d-ca92-49ac-af39-5eebb8e96ffc",
      "name": "округляем",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        3260,
        5980
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "337b6fdc-995d-4c96-8f4b-329089d4bdcc",
      "name": "объединяем доки+дата с разницей во времени",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3420,
        6120
      ]
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor item in _input.all():\n    days = abs(item.json.timeDifference)\n    if days % 100 // 10 == 1:\n        item.json.sklonenie = \"дней\"\n    elif days % 10 == 1:\n        item.json.sklonenie = \"день\"\n    elif days % 10 in [2, 3, 4]:\n        item.json.sklonenie = \"дня\"\n    else:\n        item.json.sklonenie = \"дней\"\nreturn _input.all()"
      },
      "id": "0b297d88-8ea9-4f4c-ab57-78abcf614f36",
      "name": "склоняем",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3620,
        6120
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "386f4fe1-4858-4421-a50e-867e5ca497fc",
              "name": "message",
              "value": "=⚠️Через {{ $json.timeDifference }} {{ $json.sklonenie }} истекает срок документа <b>{{ $json.display_name }}</b>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f6bad625-51e3-4608-ac74-3d759f5a19b5",
      "name": "склеиваем",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        4120,
        6140
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "message",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "8e5f623e-4bca-40b9-a8e4-2a30f354eba5",
      "name": "объединяем",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        4540,
        6120
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3cd5ce67-7030-49fa-b1d7-63e5baca1d30",
              "name": "message",
              "value": "=❗ {{ -$json[\"timeDifference\"] }} {{ $json[\"sklonenie\"] }} назад истёк срок действия документа <b>{{ $json.type_of_document_id[1] }}</b> (был действителен до {{ $json.expiration_date }}) <b>({{ $json.car_id[1] }})</b>",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "02d6b725-b90e-4cfc-a64e-ba1521d61b29",
      "name": "если истекло",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        4120,
        5960
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "02510e81-851c-49d9-9213-4e3b24dc6aa7",
      "name": "объединяем в один список",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        4340,
        6120
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('объединяем').item.json.concatenated_message }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "view_date"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "c3d2b485-9b9e-4b0c-a362-57f2b032c141",
      "name": "отправка сообщения1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4740,
        6120
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Истекшие документы и документы за 7 дней до истечения",
        "height": 369.39864609379947,
        "width": 2774.539456615861
      },
      "id": "20ee7a81-0b4f-4c72-b27e-b981d61c7ecf",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1080,
        5931
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd, 23:59:59",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "e2507064-5e51-43af-a70b-3b7c1137d365",
      "name": "дата и время 23:59",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1520,
        5980
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd 23:59:59",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "e2f79ea8-8a53-4aae-913c-6bf2a61c1a27",
      "name": "дата и время 23:",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1880,
        6320
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd 00:00:00",
        "outputFieldName": "newformattedDate1",
        "options": {}
      },
      "id": "6e69d446-e3a0-45ea-9344-428f4a2e15a0",
      "name": "дата и время 23:1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1520,
        6320
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.currentDate }}",
        "format": "=yyyy-MM-dd 00:00:00",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "329f393c-4510-47fc-9328-23523e56f9e2",
      "name": "дата и время 23:60",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1540,
        6480
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.timeDifference }}",
                    "rightValue": 0,
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "4d8ac404-b74b-4df3-8919-0de5596a2e53",
                    "leftValue": "={{ $json.timeDifference }}",
                    "rightValue": 31,
                    "operator": {
                      "type": "number",
                      "operation": "lte"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "eec63b9f-9fe2-4529-8c2c-85aeae756ddf",
      "name": "сколько дней до окончания срока",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        3800,
        6120
      ]
    },
    {
      "parameters": {
        "content": "## Истекшие документы и документы за 8-14 дней до истечения",
        "height": 369.39864609379947,
        "width": 1215.0811098210288
      },
      "id": "d23f6783-365e-4e4e-9a14-d8ec795258e1",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1080,
        6280
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd 23:59:59",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "0c1576f5-3784-4742-89d3-46a8ccff9d08",
      "name": "дата и время 23:2",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1880,
        6680
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.newDate }}",
        "format": "=yyyy-MM-dd 00:00:00",
        "outputFieldName": "newformattedDate1",
        "options": {}
      },
      "id": "62932cdd-030b-48ab-8e42-b523a3d2942e",
      "name": "дата и время 23:3",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1520,
        6680
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.currentDate }}",
        "format": "=yyyy-MM-dd 00:00:00",
        "outputFieldName": "newformattedDate",
        "options": {}
      },
      "id": "c57e2550-5606-47b8-b5fb-fb10b7ea49a5",
      "name": "дата и время 23:61",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1540,
        6840
      ]
    },
    {
      "parameters": {},
      "id": "fec7f967-7065-4c24-a2d9-c5275fd48b02",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2360,
        6780
      ]
    },
    {
      "parameters": {
        "content": "## Истекшие документы и документы за 15-21 дней до истечения",
        "height": 369.39864609379947,
        "width": 1215.0811098210288
      },
      "id": "d97e20e7-4168-4881-95ac-d7f7b46dcbbe",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1080,
        6640
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 8,
        "options": {}
      },
      "id": "52cc741b-ca6d-45bf-9ee3-e3fa7f9228b0",
      "name": "дата через 8 дней",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1360,
        6320
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 14,
        "options": {}
      },
      "id": "4f1cb37a-b47c-40d4-b2aa-d0569a3bac03",
      "name": "дата через 14 дней",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1700,
        6320
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 15,
        "options": {}
      },
      "id": "b6335d48-8107-417a-9618-417666022aa7",
      "name": "дата через 15 дней",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1360,
        6680
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $today }}",
        "duration": 21,
        "options": {}
      },
      "id": "659c9923-43ea-4f37-a74b-0a6e796125bd",
      "name": "дата через 21 день",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1700,
        6680
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "ce80b4bf-b34d-4a3f-80e9-2431e098745c",
      "name": "дата сегодня",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1360,
        6840
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "240c3b58-6d97-44b5-a4a5-91992f0a9a0d",
      "name": "дата сегодня1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1360,
        6480
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Выберите за какой период хотите проверить документы:",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "1-7 дней",
                    "additionalFields": {
                      "callback_data": "7_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "8-14 дней",
                    "additionalFields": {
                      "callback_data": "14_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "15-21 день",
                    "additionalFields": {
                      "callback_data": "21_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "delete_date"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "5483affb-4e76-4239-8833-31ce47e30a3a",
      "name": "возврат к выбору периода",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1340,
        7060
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}"
      },
      "id": "85452ab9-3d15-43f1-99c0-cb451fa30fa7",
      "name": "удаления сообщения с выбором",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1340,
        7240
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Проверка сроков документов",
        "height": 1516.856820405149,
        "width": 2918.594993693928,
        "color": 5
      },
      "id": "e3b1df25-a6a3-4201-a290-13bd8e7210d7",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1040,
        5880
      ]
    },
    {
      "parameters": {
        "content": "## Блок сценария для механика",
        "height": 663.0853866973607,
        "width": 1711.598132943094
      },
      "id": "e6419c03-7f40-4b59-a964-da93e6584437",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4200,
        4500
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Вы авторизовались как механик",
        "replyMarkup": "replyKeyboard",
        "replyKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Документы",
                    "additionalFields": {}
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Заявки на проверке",
                    "additionalFields": {}
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Все заявки",
                    "additionalFields": {}
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Создать заявку",
                    "additionalFields": {}
                  }
                ]
              }
            }
          ]
        },
        "replyKeyboardOptions": {
          "resize_keyboard": true
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "54702908-67e2-4d9b-8519-06b0bedd23f1",
      "name": "Приветственное сообщений",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4360,
        4620
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Выберите за какой период хотите проверить документы:",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "1-7 дней",
                    "additionalFields": {
                      "callback_data": "7_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "8-14 дней",
                    "additionalFields": {
                      "callback_data": "14_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "15-21 день",
                    "additionalFields": {
                      "callback_data": "21_days"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "delete_date"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "c75ed2eb-850c-423b-986d-8fc5014d64d8",
      "name": "выбор периода документов",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4640,
        4620
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные\nconst jsonData = items.map(item => item.json); // Входные данные из предыдущей ноды\n\n// Если jsonData — это объект с массивом внутри, например { data: [...] }\nconst data = Array.isArray(jsonData) ? jsonData : jsonData.data || [];\n\n// Инициализируем переменную для формирования сообщения\nlet message = '';\n\n// Пробегаем по каждому объекту в массиве и добавляем нумерацию\ndata.forEach((item, index) => {\n  message += `${index + 1}. ${item.name} (ID: ${item.id})\\n`;  // Нумерация элементов и перенос строки\n});\n\n// Возвращаем результат\nreturn [{ json: { message: message } }];\n"
      },
      "id": "c63a6001-228d-44dc-8383-707161523203",
      "name": "Сборка списка слесарей",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3620,
        7520
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные\nconst jsonData = items.map(item => item.json); // Входные данные из предыдущей ноды\n\n// Если jsonData — это объект с массивом внутри, например { data: [...] }\nconst data = Array.isArray(jsonData) ? jsonData : jsonData.data || [];\n\n// Инициализируем переменную для формирования сообщения\nlet message = '';\n\n// Пробегаем по каждому объекту в массиве и добавляем нумерацию\ndata.forEach((item, index) => {\n  message += `${index + 1}. ${item.name} (ID: ${item.id})\\n`;  // Нумерация элементов и перенос строки\n});\n\n// Возвращаем результат\nreturn [{ json: { message: message } }];"
      },
      "id": "bb7aef27-34c5-4078-b6a0-778320a86cd4",
      "name": "Сборка списка слесарей1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3820,
        7680
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "text": "=Список слесарей:\n{{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "c86b4e9e-151a-4c70-b303-999538a1f30c",
      "name": "Вывод списка слесарей",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4080,
        7480
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "text": "=Список слесарей:\n{{ $json.message }}",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "3092e738-48b0-4010-a994-2b882e3098a2",
      "name": "Вывод списка слесарей1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4120,
        7720
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "ce31fcda-2922-4d71-aa1d-d5cc83ede93b",
      "name": "отправляем сообщение 2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2780,
        7660
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "6bbdae64-cbff-49b1-8126-42ad11a59a0c",
      "name": "отправляем сообщение ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2560,
        8140
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "779797af-cb04-436d-8f6d-3581604bf730",
      "name": "отправляем сообщение 3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2800,
        7900
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "af3070b0-38c0-4fb8-8437-a8232bf87ad2",
      "name": "отправляем сообщение 4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2640,
        8340
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "7_days",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "29768801-6a74-4a14-be52-f00a8c557555",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "14_days",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "ddb933c9-04c7-4d8e-b07e-779c610e9c46",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "21_days",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "e674fd05-e952-48d5-b7aa-7cc405f40766",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "view_date",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "c9f6d1ed-bbdf-43ea-9a3f-ad3ac67cc13d",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "delete_date",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "5003af94-05fe-4a44-a66b-7beceac1e86c",
      "name": "разделение на дни для документов",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        580,
        6200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "a6ec9f73-257a-4cbd-bbfa-9380cbf4ad44",
      "name": "отправляем сообщение 1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        5620,
        4560
      ]
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
      },
      "id": "f5b37a08-9214-4d18-b508-5724783056fd",
      "name": "Удаление прошлого сообщения2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1220,
        10840
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "deleteMessage",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id - 1}}"
      },
      "id": "1646740e-2ca3-4ffa-863d-ab77aa9d8a9a",
      "name": "Удаление прошлого сообщения3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1480,
        10840
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "reject_TO",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0dad3c43-0653-485e-bdde-074fb8ca6551",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "accept_TO",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "92fa1a1c-c3b3-488b-b3ad-8cac6302cc7c",
      "name": "инлайн-кнопки для механика",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        840,
        5340
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "aeaf1a44-3eec-4988-a7af-eff23c16631a",
      "name": "отправляем сообщение 6",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1640,
        11400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    // Используем startIndex для корректного отображения номера\n    const buttonIndex = startIndex + index + 1;\n\n    return {\n        text: `${buttonIndex}. ${carInfo} - ${truncatedDescription}`,\n        callback_data: `item_${item.json.id}_page_${page}` // Добавляем номер страницы в callback_data\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"del_maintenances\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Заявки на проверке:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки на проверке:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "139e0e53-5076-4852-8ab1-b98c052e4e09",
      "name": "обработка страниц с выбором заявки",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        11140
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Получаем данные о колбэке из Execute Workflow Trigger\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nconst callbackData = callbackQuery ? callbackQuery.data : null;\n\n// Проверяем, был ли получен callbackData\nif (!callbackData) {\n    throw new Error(\"Callback data is undefined. Cannot proceed.\");\n}\n\n// Извлекаем message_id из callback_query\nconst messageId = callbackQuery.message.message_id;\n\n// Обработка выбора заявки\nconst selectedMatch = callbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Получаем информацию о выбранной заявке\n    const selectedRequest = items.find(item => item.json.id == itemId);\n    \n    // Извлекаем необходимые данные из JSON\n    const {\n        description_of_maintenance,\n        hours_for_maintenance,\n        car_id,\n        completed_by,\n    } = selectedRequest.json;\n\n    const employee = completed_by[1];\n    // Формируем текст сообщения\n    const carName = car_id[1].split(' - ')[0]; // Получаем только номер авто\n    const hours = hours_for_maintenance; // Количество часов\n\n    // Формируем ссылку на заявку в Odoo\n    const odooLink = `https://everest.lamart.site/web#id=${itemId}&model=technical.maintenance&view_type=form`;\n\n    // Полное сообщение\n    const messageText = `Проверьте качество работы и количество выставленных часов:\\n\\n` +\n        `${carName} - ${hours} ч. - ${employee} - ${description_of_maintenance}`;\n\n    // Получаем chat_id из callback_query\n    const chatId = callbackQuery.from.id;\n\n    // Токен бота\n    const token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n    // URL для редактирования сообщения через API Telegram\n    const url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n    // Создаем объект с inline-клавиатурой в один столбик\n    const inlineKeyboard = {\n        inline_keyboard: [\n            [\n                { text: \"Принять заявку✅\", callback_data: `accept_TO_${itemId}` } // Добавляем ID заявки\n            ],\n            [\n                { text: \"Отклонить заявку❌\", callback_data: `reject_TO_${itemId}` } // Добавляем ID заявки\n            ],\n            [\n                { text: \"Назад\", callback_data: `page_${returnPage}` } // Устанавливаем номер страницы в колбэк\n            ]\n        ]\n    };\n\n    // Формируем сообщение для редактирования\n    const message = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: messageText,\n        parse_mode: 'HTML', // Указываем, что текст содержит HTML\n        reply_markup: inlineKeyboard // Добавляем inline-клавиатуру\n    };\n\n    // Возвращаем данные для запроса\n    return [\n        {\n            json: {\n                url,\n                message\n            }\n        }\n    ];\n}\n"
      },
      "id": "6f027c19-455a-4ad9-8718-1e9bf4e1ca7a",
      "name": "генерация сообщения для просмотра заявки",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        11400
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    return {\n        text: `${startIndex + index + 1}. ${carInfo} - ${truncatedDescription}`, // Используем startIndex для правильной нумерации\n        callback_data: `item_${item.json.id}_page_${page}` // Добавляем номер страницы\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"del_maintenances\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.message.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/sendMessage`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    text: \"Заявки на проверке:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки на проверке:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "8f42e5e7-4760-4cbe-b99a-f6421eaf6c5f",
      "name": "выбор заявки(первая страница)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        5400,
        4560
      ]
    },
    {
      "parameters": {
        "content": "## Просмотр заявок на проверке",
        "height": 917.8024205958236,
        "width": 879.4657892736892
      },
      "id": "f7123bb4-96ed-494e-b736-404424c30b75",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        900,
        10720
      ]
    },
    {
      "parameters": {
        "content": "## Удаление сообщений",
        "height": 230.02744518719146,
        "width": 496.32687483613483,
        "color": 5
      },
      "id": "ab503c89-f4cd-4f08-b7a3-8f6aa41276c5",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        940,
        10800
      ]
    },
    {
      "parameters": {
        "content": "## Обработка страниц с выбором заявки",
        "height": 230.02744518719146,
        "width": 611.2775867471851,
        "color": 5
      },
      "id": "8b69a234-b044-4e75-90bc-9c7b6335f225",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        920,
        11080
      ]
    },
    {
      "parameters": {
        "content": "## Вывод информации о заявке",
        "height": 230.02744518719146,
        "width": 611.2775867471851,
        "color": 5
      },
      "id": "d5bf9860-8ea8-4c7b-aa10-e2c740d9a83a",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        940,
        11340
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "last_message_text": "={{ $json.fullMessage }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "80653532-94fb-454a-90dc-40e02b87d029",
      "name": "сохраняем текст сообщения",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2100,
        7660
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "last_message_text": "={{ $json.fullMessage }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "e37eaddc-aaff-4f95-ac8c-26af96038fb1",
      "name": "сохраняем текст сообщения1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2160,
        7900
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "tg_id",
              "value": "={{ $json.callback_query.from.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "ba948388-2658-4e92-a9f3-02ded2a918e1",
      "name": "поиск тг айди механиков",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1760,
        8780
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все данные из предыдущей ноды\nconst items = $input.all();\n\n// Проходим по каждому элементу\nreturn items.map(item => {\n  const inputData = item.json; // Получаем json для каждого элемента\n  \n  // Проверяем, что в данных есть callback_query и message\n  if (!inputData.callback_query || !inputData.callback_query.message) {\n    throw new Error(\"Нет callback_query или message в данных\");\n  }\n\n  const message = inputData.callback_query.message;\n\n  // Сохраняем полную структуру сообщения\n  const fullMessage = {\n    message_id: message.message_id,\n    from: message.from,\n    chat: message.chat,\n    date: message.date,\n    edit_date: message.edit_date,\n    text: message.text,\n    entities: message.entities,\n    link_preview_options: message.link_preview_options,\n    reply_markup: message.reply_markup,\n    // Можно добавить дополнительные поля, если необходимо\n  };\n\n  // Возвращаем результат для каждого элемента\n  return {\n    json: {\n      fullMessage: fullMessage,\n    }\n  };\n});\n"
      },
      "id": "fb9bcb85-f55b-4e05-9596-bfed325c0f06",
      "name": "сохраняем сообщение с заявкой",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1820,
        7660
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все данные из предыдущей ноды\nconst items = $input.all();\n\n// Проходим по каждому элементу\nreturn items.map(item => {\n  const inputData = item.json; // Получаем json для каждого элемента\n  \n  // Проверяем, что в данных есть callback_query и message\n  if (!inputData.callback_query || !inputData.callback_query.message) {\n    throw new Error(\"Нет callback_query или message в данных\");\n  }\n\n  const message = inputData.callback_query.message;\n\n  // Сохраняем полную структуру сообщения\n  const fullMessage = {\n    message_id: message.message_id,\n    from: message.from,\n    chat: message.chat,\n    date: message.date,\n    edit_date: message.edit_date,\n    text: message.text,\n    entities: message.entities,\n    link_preview_options: message.link_preview_options,\n    reply_markup: message.reply_markup,\n    // Можно добавить дополнительные поля, если необходимо\n  };\n\n  // Возвращаем результат для каждого элемента\n  return {\n    json: {\n      fullMessage: fullMessage,\n    }\n  };\n});\n"
      },
      "id": "5f762b74-dadc-41ee-a12f-8972d7be4e2f",
      "name": "сохраняем сообщение с заявкой1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        7900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 4;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n      [{ text: \"Выполнить самому\", callback_data: \"take_maintenance\" }],\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page\" }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "1f5d2402-2014-4dec-ae8a-cab38641a3d6",
      "name": "первая страница слесарей",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        7660
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 4;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n      [{ text: \"Выполнить самому\", callback_data: \"take_maintenance\" }],\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page\" }]);\n}\n\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "fdbbe89a-0baf-41f4-a5d0-ff70aace994b",
      "name": "первая страница слесарей1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2620,
        7900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 4;\n\n// Определяем, сколько элементов будем выводить, начиная с 6-го элемента (индекс 5)\nconst displayItems = items.slice(maxItemsPerPage); // Берем элементы, начиная с 6-го\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов, начиная с 6\nconst buttons = displayItems.map((item, index) => ({\n    text: `${maxItemsPerPage + index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем, начиная с 6\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Предыдущая страница\", если есть элементы на предыдущей странице\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: \"first_page\" }]);\n}\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "70a22814-959a-4ad9-9a4a-41286c0adabe",
      "name": "следующая страница слесарей",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2340,
        8140
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "117f1c72-ebbc-43bf-920b-eace0c34953d",
      "name": "отправляем сообщение 8",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2240,
        8780
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все данные из предыдущей ноды\nconst items = $input.all();\n\nreturn items.map(item => {\n  const inputData = item.json; // Получаем json для каждого элемента\n  \n  // Извлекаем last_message_text и парсим его как JSON\n  const lastMessageText = inputData.last_message_text; \n  if (!lastMessageText) {\n    throw new Error(\"Не найдено поле last_message_text\");\n  }\n\n  // Парсим строку JSON в объект\n  const messageData = JSON.parse(lastMessageText);\n\n  // Получаем текст сообщения\n  let messageText = messageData.text;\n  const entities = messageData.entities || [];\n\n  // Формируем текст с учётом всех entities\n  let formattedText = \"\";\n  let lastOffset = 0;\n\n  // Проходим по всем entities и добавляем их в итоговый текст\n  entities.forEach(entity => {\n    // Добавляем текст до текущего entity\n    formattedText += messageText.substring(lastOffset, entity.offset);\n\n    // Форматируем текст в зависимости от типа entity\n    switch (entity.type) {\n      case 'bold':\n        formattedText += `<b>${messageText.substring(entity.offset, entity.offset + entity.length)}</b>`;\n        break;\n      case 'italic':\n        formattedText += `<i>${messageText.substring(entity.offset, entity.offset + entity.length)}</i>`;\n        break;\n      case 'phone_number':\n        formattedText += `<a href=\"tel:${messageText.substring(entity.offset, entity.offset + entity.length)}\">${messageText.substring(entity.offset, entity.offset + entity.length)}</a>`;\n        break;\n      case 'text_link':\n        const url = entity.url; // Получаем URL из entity\n        formattedText += `<a href=\"${url}\">${messageText.substring(entity.offset, entity.offset + entity.length)}</a>`;\n        break;\n      default:\n        formattedText += messageText.substring(entity.offset, entity.offset + entity.length);\n        break;\n    }\n\n    // Обновляем lastOffset для следующей итерации\n    lastOffset = entity.offset + entity.length;\n  });\n\n  // Добавляем оставшийся текст после последнего entity\n  formattedText += messageText.substring(lastOffset);\n\n  // Получаем инлайн-кнопки\n  const inlineKeyboard = messageData.reply_markup.inline_keyboard || [];\n\n  // Получаем chat_id пользователя, который запустил workflow\n  const chatId = inputData.tg_id;\n\n  // Получаем ID сообщения\n  const messageId = messageData.message_id;\n\n  // Токен бота\n  const token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n  // URL для отправки сообщения через API Telegram\n  const url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n  // Формируем сообщение для отправки\n  const message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: formattedText, // Текст сообщения с HTML-ссылками\n    parse_mode: 'HTML',\n    reply_markup: {\n      inline_keyboard: inlineKeyboard // Инлайн-кнопки\n    }\n  };\n\n  // Возвращаем результат для каждого элемента\n  return {\n    json: {\n      url,\n      message\n    }\n  };\n});\n"
      },
      "id": "e9abcc4a-873a-4516-ab26-2de5dcb81ccb",
      "name": "формируем сообщения для возврата к заявке",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        8780
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "=Слесарям назначена работа!",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "49817a2b-a52b-4484-a0cc-946453ff2d94",
      "name": "слесарю назначена работа",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1860,
        8560
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 4;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n      [{ text: \"Выполнить самому\", callback_data: \"take_maintenance\" }],\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page\" }]);\n}\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "8aaa6de1-93e0-4f45-8df4-e49e814953a1",
      "name": "возврат к первой странице",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2400,
        8340
      ]
    },
    {
      "parameters": {
        "content": "## Вывод и назначение слесарей",
        "height": 3073,
        "width": 2062
      },
      "id": "497bcdad-4766-4e14-978f-a0d286ef43c5",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1460,
        7560
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопки \"провести ТО\"",
        "height": 230.02744518719146,
        "width": 1748.1852210828465,
        "color": 5
      },
      "id": "f86a0822-35bf-4c81-80ed-a51900220e9b",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1580,
        7600
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопки \"Взять в ремонт\"",
        "height": 230.02744518719146,
        "width": 1649.3542990107376,
        "color": 5
      },
      "id": "bd310006-84df-45e2-ba63-c48dfd077281",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1720,
        7840
      ]
    },
    {
      "parameters": {
        "content": "## Переключение на следующую страницу слесарей",
        "height": 197.08380449648854,
        "width": 934.8345624339241,
        "color": 5
      },
      "id": "33bdc415-151f-4918-901c-a9f251a987f3",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1760,
        8080
      ]
    },
    {
      "parameters": {
        "content": "## Возврат к предыдущей страницы слесарей",
        "height": 197.08380449648854,
        "width": 918.9792918255035,
        "color": 5
      },
      "id": "eadd9cb0-9cbb-45c7-8f8b-3e005acd7959",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1860,
        8300
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопки \"Назад\"",
        "height": 197.08380449648854,
        "width": 903.7844371950393,
        "color": 5
      },
      "id": "a58f3748-607d-468d-9047-ea833e37187a",
      "name": "Sticky Note14",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1720,
        8740
      ]
    },
    {
      "parameters": {
        "content": "## Уточнение по выбору слесаря",
        "height": 225.9094901008536,
        "width": 1413.3748852314081,
        "color": 5
      },
      "id": "e68cad78-03d3-429b-bfc5-f5346e2ed196",
      "name": "Sticky Note15",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1580,
        8980
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "b66fd27d-46ed-4e60-b93a-3082d23211c9",
      "name": "отправляем сообщение 10",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1900,
        11900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Получаем данные о колбэке из Execute Workflow Trigger\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nconst callbackData = callbackQuery ? callbackQuery.data : null;\n\n// Проверяем, был ли получен callbackData\nif (!callbackData) {\n    throw new Error(\"Callback data is undefined. Cannot proceed.\");\n}\n\n// Извлекаем message_id из callback_query\nconst messageId = callbackQuery.message.message_id;\n\n// Обработка выбора заявки\nconst selectedMatch = callbackData.match(/item_(\\d+)_page_(\\d+)_([^_]+)_car_(.+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n    const type = selectedMatch[3];\n    const selectedCar = selectedMatch[4];\n\n    // Получаем информацию о выбранной заявке\n    const selectedRequest = items.find(item => item.json.id == itemId);\n    // Извлекаем необходимые данные из JSON\n    const {\n        description_of_maintenance,\n        car_id,\n        created_by\n    } = selectedRequest.json;\n\n    const descriptionText = description_of_maintenance === \"Нет описания\" \n        ? `${description_of_maintenance} (Смотреть фото в Odoo)` \n        : description_of_maintenance;\n\n    // Формируем текст сообщения\n    const carName = car_id[1].split(' - ')[0]; // Получаем только номер авто\n\n    // Ищем данные о водителе\n    const driverData = items.find(item => item.json.resource_id && item.json.resource_id[1] === created_by[1]);\n    \n    // Если данные о водителе найдены, извлекаем имя и телефон\n    const name = driverData ? driverData.json.name : 'Неизвестный водитель';\n    const mobile_phone = driverData ? driverData.json.mobile_phone : 'Телефон не указан';\n\n    // Формируем ссылку на заявку в Odoo\n    const odooLink = `https://everest.lamart.site/web#id=${itemId}&model=technical.maintenance&view_type=form`;\n\n    // Полное сообщение\n    const messageText = `У автомобиля: <b>${carName}</b>, водитель <b>${name}</b> <a href=\"tel:${mobile_phone}\">${mobile_phone}</a> проблема:\\n\\n` +\n        `<i>${descriptionText}</i>`;\n\n    // Получаем chat_id из callback_query\n    const chatId = callbackQuery.from.id;\n\n    // Токен бота\n    const token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n    // URL для редактирования сообщения через API Telegram\n    const url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n    // Создаем объект с inline-клавиатурой в один столбик\n    const inlineKeyboard = {\n    inline_keyboard: []\n};\n\n// Добавляем кнопку \"Провести ТО\", если type не \"repair\"\nif (type !== \"repair\") {\n    inlineKeyboard.inline_keyboard.push([\n        { text: \"Провести ТО\", callback_data: `do_to_${itemId}` }\n    ]);\n}\n\n// Добавляем кнопку \"Взять в ремонт\", если type не \"TO\"\nif (type !== \"TO\") {\n    inlineKeyboard.inline_keyboard.push([\n        { text: \"Взять в ремонт\", callback_data: `take_to_fix_${itemId}` }\n    ]);\n}\n\n// Кнопка \"Назад\"\ninlineKeyboard.inline_keyboard.push([\n    { text: \"Назад\", callback_data: `${type}_car_${selectedCar}_page_${returnPage}` }\n]);\n\n    // Формируем сообщение для редактирования\n    const message = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: messageText,\n        parse_mode: 'HTML', // Указываем, что текст содержит HTML\n        reply_markup: inlineKeyboard // Добавляем inline-клавиатуру\n    };\n\n    // Возвращаем данные для запроса\n    return [\n        {\n            json: {\n                url,\n                message\n            }\n        }\n    ];\n}\n"
      },
      "id": "a332a547-1376-4bf0-84ed-e80a52981522",
      "name": "генерация сообщения для просмотра заявки1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        12660
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "0ea1490e-d80a-4297-90e7-d97a49c7169e",
      "name": "отправляем сообщение 11",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1760,
        12660
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_driver_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "driver_id",
              "value": "={{ $json.created_by[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "149d2fa6-06bb-4642-88d5-fe37d9a6718c",
      "name": "данные сотрудника",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1100,
        12760
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "id": "eb624ffe-e3eb-46f7-a421-788a2a82222d",
      "name": "объединяем заявки и сотрудника",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1340,
        12660
      ]
    },
    {
      "parameters": {
        "content": "## Вывод первой страницы заявок \"Требуется проверка\"",
        "height": 307.94693315000904,
        "width": 951.2414729127986,
        "color": 5
      },
      "id": "df90f3ff-206a-4f39-ac1e-57cb38d96d1c",
      "name": "Sticky Note16",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        4840,
        4520
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопок у \"Все заявки\"",
        "height": 1197.13501217242,
        "width": 1519.8252700751045
      },
      "id": "6db1a326-9666-403d-b16c-6f94d44b55fe",
      "name": "Sticky Note18",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        574,
        11803
      ]
    },
    {
      "parameters": {
        "content": "## Вывод авто и кол-ва заявок на Ремонт",
        "height": 309.59912676924256,
        "width": 1319.0068317384266,
        "color": 5
      },
      "id": "68c6c300-993e-4d97-a80b-99c7a649e66d",
      "name": "Sticky Note19",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        738,
        11862
      ]
    },
    {
      "parameters": {
        "content": "## Подробный вывод заявки",
        "height": 311.6467894317699,
        "width": 1065.0613458914934,
        "color": 5
      },
      "id": "707b00d6-42ff-4bf5-ad38-5447085f1f4a",
      "name": "Sticky Note20",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        840,
        12600
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности1').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a403df8a-3ebd-43ed-9ac4-28c3d16b1eae",
      "name": "Есть ли заявки на проверке",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        5220,
        4680
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "На данный момент нет заявок, требующих проверки!",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "0800cf63-417b-4b20-9fe2-8a2d1b4000fc",
      "name": "нет заявок на проверке",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        5500,
        4700
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "getTimeBetweenDates",
        "startDate": "={{ $today }}",
        "endDate": "={{ $json.expiration_date }}",
        "options": {}
      },
      "id": "ffcd0e5a-02ab-4c4e-89e5-b49d40b11405",
      "name": "разница в днях",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        3080,
        5980
      ]
    },
    {
      "parameters": {},
      "id": "9f8a5a7c-073b-4c24-b381-53da7545b413",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2360,
        6420
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Нет истекающих документов!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "view_date"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "57fe7cc5-6c74-45e6-b7c7-44c03df90b9f",
      "name": "отправка сообщения",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2720,
        6400
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "expiration_date"
            }
          ]
        },
        "options": {}
      },
      "id": "95248a39-6908-4fea-913f-f28460156a68",
      "name": "Sort",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2880,
        5980
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "={{ \"/start\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "846db74d-0035-49b6-b802-55c41b6eb508",
      "name": "Проверка старта1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        4260,
        5020
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "6b2424ef-2cd8-43ef-8493-399741a51966",
      "name": "неисправности",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        4820,
        4720
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Требуется проверка",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "31db994e-7f67-40c3-b9dd-b7dae8c8a760",
      "name": "получим все неисправности1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        5020,
        4640
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "8a069b8b-3275-4ec6-9bdf-19f012093c91",
      "name": "неисправности2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        980,
        11160
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Требуется проверка",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "674ee485-44fa-4a30-933d-b795a9a426bd",
      "name": "получим все неисправности",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1200,
        11140
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "4d246ea4-e118-47d1-8dd7-58e8800d5794",
      "name": "отправляем сообщение 5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1620,
        11140
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "del_maintenances",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fe17b5e-971b-414d-b1e2-82872f01feae",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"page_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cab21627-7a55-4569-b357-b424c3905103",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"item_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "ee7000e7-b273-4468-af76-0a913db2fd82",
      "name": "заявки на проверке",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        480,
        11100
      ]
    },
    {
      "parameters": {},
      "id": "ee24c916-1042-47a1-a60a-8ef1b3391d29",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -1060,
        4920
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $json.callback_query.data.split('_')[1].toNumber() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7faab870-40cb-48fc-85a0-82184c2243a7",
      "name": "получим все неисправности2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        980,
        11400
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "18be86ae-7cc4-4c4f-af15-a557f6458322",
      "name": "неисправности3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        800,
        11940
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6a77ad5f-a62e-437f-8ae5-6b0705b49c63",
              "leftValue": "={{ $json.tech_maintenance }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7c99edb7-6dfc-4837-8d3e-768c088d4919",
      "name": "получим все неисправности4",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1000,
        11940
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $json.callback_query.data.split('_')[2].toNumber() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5fbf046c-a032-43f9-846f-177703743a68",
      "name": "получим все неисправности5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        12660
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $json.TO_number.toNumber() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2b1d153b-1ca4-49cb-8ff1-eb21fcf66de7",
      "name": "актуальный статус заявки1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1280,
        5560
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $json.TO_number.toNumber() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "a5280fe8-7b61-4e5f-91b5-73d407f20766",
      "name": "актуальный статус заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1320,
        5020
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $('Execute Workflow Trigger').item.json.end_request_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "181f5bba-af3d-4f08-b005-28112fba2450",
      "name": "поиск водителя по заявке",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        3460,
        1580
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "2a6d6083-4f8a-44fc-b236-d8d960586fdf",
      "name": "поиск слесарей",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2320,
        7660
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "2bd0f63e-b19a-48dd-8388-35f53815e105",
      "name": "поиск слесарей1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2400,
        7900
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "884642d6-a5ed-4ef2-b9b0-214534aba1c1",
      "name": "поиск слесарей2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1800,
        8140
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "0adff1ea-ddf5-41e9-8a40-c39efceb3004",
      "name": "поиск слесарей3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1900,
        8360
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "05f7890b-abd1-4dfa-9056-7c5bc84b4839",
      "name": "документы",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1620,
        6160
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1a96d47b-6329-437f-aa6b-a6b3fb2b58c8",
              "leftValue": "={{ $json.expiration_date }}",
              "rightValue": "={{ $('дата и время 23:59').item.json.newformattedDate }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "eea0590e-8302-443d-b268-ee63016c148c",
      "name": "документы с истекающим сроком",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1720,
        5980
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "87783af1-529b-4960-b2e1-23bfdfcce6e4",
      "name": "документы1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2060,
        6300
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1a96d47b-6329-437f-aa6b-a6b3fb2b58c8",
              "leftValue": "={{ $json.expiration_date }}",
              "rightValue": "={{ $('дата и время 23:').item.json.newformattedDate }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            },
            {
              "id": "7b780fe4-6d56-41b2-b157-cdb202f3fab3",
              "leftValue": "={{ $json.expiration_date }}",
              "rightValue": "={{ $('дата и время 23:1').item.json.newformattedDate1 }}",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "60f3deb8-070e-4c96-893e-c1f15abe3e01",
      "name": "документы с истекающим сроком1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2220,
        6280
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1a96d47b-6329-437f-aa6b-a6b3fb2b58c8",
              "leftValue": "={{ $json.expiration_date }}",
              "rightValue": "={{ $('дата и время 23:60').item.json.newformattedDate }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7c91ae4d-58df-43d6-86e4-f380414ad677",
      "name": "документы с истекающим сроком2",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1960,
        6460
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "9ae4dcb6-1e2d-43d9-b08c-e27f00e2110d",
      "name": "документы2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1700,
        6480
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "ff15d96c-3865-4ff7-85a8-43ad1f9e8cfe",
      "name": "документы3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2040,
        6640
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1a96d47b-6329-437f-aa6b-a6b3fb2b58c8",
              "leftValue": "={{ $json.expiration_date }}",
              "rightValue": "={{ $('дата и время 23:2').item.json.newformattedDate }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            },
            {
              "id": "7b780fe4-6d56-41b2-b157-cdb202f3fab3",
              "leftValue": "={{ $json.expiration_date }}",
              "rightValue": "={{ $('дата и время 23:3').item.json.newformattedDate1 }}",
              "operator": {
                "type": "dateTime",
                "operation": "afterOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ddaf6539-446e-4554-a60a-c2cd39dfad9d",
      "name": "документы с истекающим сроком5",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2200,
        6620
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1a96d47b-6329-437f-aa6b-a6b3fb2b58c8",
              "leftValue": "={{ $json.expiration_date }}",
              "rightValue": "={{ $('дата и время 23:61').item.json.newformattedDate }}",
              "operator": {
                "type": "dateTime",
                "operation": "beforeOrEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "13ed9ba5-9561-4dd5-817a-d910a53e34a6",
      "name": "документы с истекающим сроком4",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1960,
        6860
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_documents",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "268ab3f0-085c-4754-8bbb-9fb249e29a44",
      "name": "документы4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1700,
        6860
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "urgently",
              "order": "descending"
            },
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "f1bfd922-c42a-4f32-bae8-2395edcbef71",
      "name": "Sort1",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1440,
        11900
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "24e8e369-28e2-4618-91ea-bd8220911142",
      "name": "отправляем сообщение 12",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1920,
        12300
      ]
    },
    {
      "parameters": {
        "content": "## Вывод авто и кол-ва заявок на ТО",
        "height": 317.00288539258645,
        "width": 1308.2279848013868,
        "color": 5
      },
      "id": "486588a7-10ce-46a0-93fc-35e3304b3bcd",
      "name": "Sticky Note21",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        12260
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_all_maintenances",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "22bcd4c8-69af-4465-85f2-df04c5979691",
      "name": "неисправности4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        780,
        12320
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6a77ad5f-a62e-437f-8ae5-6b0705b49c63",
              "leftValue": "={{ $json.tech_maintenance }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "27edd81f-c246-4c54-8c37-fdeb7d765ece",
      "name": "получим все неисправности6",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1000,
        12320
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "urgently",
              "order": "descending"
            },
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "6a743479-2d73-4a36-8a6a-4b61c0825973",
      "name": "Sort3",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1460,
        12300
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Выберите, какие заявки вы хотите просмотреть",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Ремонт",
                    "additionalFields": {
                      "callback_data": "={{ 'repair_all_page_1' }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "ТО",
                    "additionalFields": {
                      "callback_data": "={{ 'TO_all_page_1' }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "8858d293-1652-4b3c-8629-b33612189291",
      "name": "Ремонт или ТО",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4920,
        4900
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности4').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "81467eaf-1594-46cb-9114-f5ad71ebe685",
      "name": "Есть ли заявки к выполнению1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1200,
        11940
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "fadce90f-8ec5-4d10-bc3c-75711afa63c5",
      "name": "нет заявок к выполнению1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1440,
        12040
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "955a62e1-827e-4c34-9343-bf02c0cdbb15",
      "name": "нет заявок к выполнению2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1460,
        12440
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности6').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "89c02375-81b1-4fa1-b862-5ff24c066cda",
      "name": "Есть ли заявки к выполнению2",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1200,
        12320
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Выберите, какие заявки вы хотите просмотреть",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Ремонт",
                    "additionalFields": {
                      "callback_data": "={{ 'repair_all_page_1' }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "ТО",
                    "additionalFields": {
                      "callback_data": "={{ 'TO_all_page_1' }}"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "270632b4-6821-4582-bdf1-b1dc6a6545f5",
      "name": "Ремонт или ТО1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        660,
        12820
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Все документы в порядке!"
        }
      },
      "id": "6b72c18b-f2ce-4fc3-8f70-89e57cc8d551",
      "name": "Нет документов",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2600,
        6140
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "252b5a26-2312-43d0-affa-3c37b22aadfb",
              "leftValue": "={{ $json.data[0] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            },
            {
              "id": "0a6e7a88-b1d8-47ac-b577-5bbec7281d92",
              "leftValue": "={{ $json.data[1] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "3d3ae3ba-8ca5-4e49-881e-94efcb2dd35b",
      "name": "документов нет?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2160,
        5980
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "data",
        "options": {}
      },
      "id": "dfcdfe47-cc3c-40e9-9a38-1e64ebef4d19",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2420,
        5960
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ddba35cb-5105-4aa9-93a3-85a1eaff4c0e",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ebf9320a-9a3f-4ed4-8a1e-4c9568c1ad25",
      "name": "уберём нулевые",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2640,
        5960
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "9c1a866e-5949-4faa-83fe-5e2fcf783e1d",
      "name": "для доступа по индексу",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1980,
        5980
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $json.current_maintenance }}"
            }
          ]
        },
        "options": {}
      },
      "id": "c676ee4d-b2ae-4d5d-a1e2-d6e4ee36bd7d",
      "name": "получим все неисправности7",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1660,
        9040
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a824ea71-163c-4091-96d9-236d54e6ee05",
              "name": "current_maintenance",
              "value": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.data.split('_')[3] }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "64b7ea68-8c3f-4f07-97bb-7adcf2491201",
      "name": "берем id заявки",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3040,
        7900
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "current_maintenance": "={{ $json.current_maintenance }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "cc619c72-4cbb-4710-9ffd-67f6158955da",
      "name": "сохраняем id заявки",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        3240,
        7900
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "current_maintenance": "={{null }}",
            "assigned_locksmiths": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "c026a239-6346-41bc-88d1-2f8e1c1f4f81",
      "name": "удаляем id заявки",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2480,
        8780
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Назначение заявки слесарю",
        "height": 194.51351992984837,
        "width": 997.0462761461315,
        "color": 5
      },
      "id": "5294ddc5-4794-42ee-b254-c562158db7ed",
      "name": "Sticky Note22",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1613.2047449265156,
        8520
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "bb0f4184-5ab5-47c9-bdbf-aa39332df180",
      "name": "все слесари",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2780,
        8560
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "72c457e8-38ac-46d9-9f27-9e422c510de7",
      "name": "все слесари1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1920,
        9040
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "90cfe787-43b4-4138-92ac-b02a9296bb61",
              "leftValue": "={{ $json.id }}",
              "rightValue": "={{ $('Switch1').item.json.callback_query.data.split('_')[1].toNumber() }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "abea1894-8c42-4b53-aba7-958e696e4261",
      "name": "нужный слесарь1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2160,
        9040
      ]
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "returnAll": true,
        "where": {
          "values": [
            {
              "column": "odoo_id",
              "value": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "00e765f3-ab11-433b-af40-1e8e12f81cdd",
      "name": "поиск тг айди слесаря",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        3240,
        8560
      ],
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.tg_id }}",
        "text": "=Вам назначена новая заявка для выполнения!\nАвтомобиль: <b>{{ $('назначение слесаря').item.json.car_id[1] }}</b>\nПроблема: <b>{{ $('назначение слесаря').item.json.description_of_maintenance }}</b>",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Взять в работу",
                    "additionalFields": {
                      "callback_data": "={{\"TR_\" + $('назначение слесаря').item.json.id }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "a02abe91-f698-4d1b-b713-f408f7bd436f",
      "name": "Отправка заявки слесарю",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3460,
        8560
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Комментарий отправлен водителю",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "9b439b47-b670-45a3-ba83-9773ce49d2b5",
      "name": "комментарий отправлен1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4860,
        1640
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Комментарий отправлен слесарю",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "a5b51618-a926-4df5-b0cb-07b3653c07aa",
      "name": "комментарий отправлен слесарю",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4860,
        1460
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_driver_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "driver_id",
              "value": "={{ $('поиск водителя по заявке').item.json.completed_by[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7f3ae541-9cd4-4377-aac4-334034c964a8",
      "name": "получаем роль кто выполнил заявку",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        4340,
        1580
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a824ea71-163c-4091-96d9-236d54e6ee05",
              "name": "current_maintenance",
              "value": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.data.split('_')[2] }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "4fe300b2-602d-4993-9992-02dd099225a0",
      "name": "берем id заявки1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        3000,
        7660
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "current_maintenance": "={{ $json.current_maintenance }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "40fa4492-3585-4b74-83a5-bc2b47d4c26d",
      "name": "сохраняем id заявки1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        3200,
        7660
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/assign_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"maintenance_id\": {{ $json.current_maintenance }},\n  \"employee_ids\": [{{ $json.assigned_locksmiths.map(item => item.id) }}]\n}",
        "options": {}
      },
      "id": "d38d41f7-cded-47b6-81c9-99d6d7205d64",
      "name": "назначение слесаря",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1660,
        8560
      ]
    },
    {
      "parameters": {
        "content": "## Отправка заявки слесарю",
        "height": 194.51351992984837,
        "width": 835.8381782704645,
        "color": 5
      },
      "id": "e7eab570-d6b5-4a14-8d0e-0fb6a8ab6522",
      "name": "Sticky Note23",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2760,
        8520
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "current_maintenance": "={{null }}",
            "expected_time_maintenance": "={{null}}",
            "assigned_locksmiths": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "6eda10db-722e-4b18-8f44-c175b2e8caf5",
      "name": "удаляем id заявки1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2060,
        8560
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "f777cdda-967c-4d3c-a118-cb13f9818d6d",
      "name": "отправляем сообщение 13",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2166,
        13177
      ]
    },
    {
      "parameters": {
        "content": "## Обработка кнопок выбора авто для просмотра заявок",
        "height": 863.4442788060647,
        "width": 1684.4742565384063
      },
      "id": "207104fc-bac0-4bd0-8025-2e5acd853bcc",
      "name": "Sticky Note24",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        455,
        13080
      ]
    },
    {
      "parameters": {
        "content": "## Обработка страниц с заявками Ремонт по авто",
        "height": 309.59912676924256,
        "width": 1572.4834465071003,
        "color": 5
      },
      "id": "3fad447b-2ba7-449b-880c-279432ec9f2d",
      "name": "Sticky Note25",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        531,
        13139
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6a77ad5f-a62e-437f-8ae5-6b0705b49c63",
              "leftValue": "={{ $json.tech_maintenance }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "false",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "10275cbb-c74a-49ce-9dfa-3e11bbd68ecb",
      "name": "получим все неисправности8",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1266,
        13217
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "aab7f6fa-701c-4872-b988-ef8230345f9f",
      "name": "отправляем сообщение 15",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2186,
        13577
      ]
    },
    {
      "parameters": {
        "content": "## Обработка страниц с заявками ТО по авто",
        "height": 317.00288539258645,
        "width": 1539.2446463627095,
        "color": 5
      },
      "id": "b4ebcd97-ecde-442c-8141-b4fefbb51fc0",
      "name": "Sticky Note27",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        555,
        13537
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "030d374e-9358-4f14-a3f8-447482e95d7a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "К выполнению",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "6a77ad5f-a62e-437f-8ae5-6b0705b49c63",
              "leftValue": "={{ $json.tech_maintenance }}",
              "rightValue": "false",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7f7f058f-372b-492d-a80e-7c29559284cf",
      "name": "получим все неисправности10",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1266,
        13597
      ],
      "alwaysOutputData": true,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности8').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "61256b74-703a-4a7d-8f88-e6e48086f011",
      "name": "Есть ли заявки к выполнению3",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1466,
        13217
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "e03fa009-0f19-442c-a8af-7fe6c21d2545",
      "name": "нет заявок к выполнению3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1706,
        13317
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "На данный момент нет заявок, которые можно выполнить!",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "54320655-d780-48bc-a39d-27a0c9e1d075",
      "name": "нет заявок к выполнению4",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1726,
        13717
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2a5d035d-235a-47f4-87f1-88ba998b6fe4",
              "leftValue": "={{ $('получим все неисправности10').item.json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "bbc4517d-dd3f-46dc-976a-3e20b5b93199",
      "name": "Есть ли заявки к выполнению4",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1466,
        13597
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"repair_all_page_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "107a6bca-cf08-46fa-9b50-c1e5d62a596f",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"all_item_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1cd521bb-df24-4a04-a908-9fa1242d5b7d",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"TO_all_page_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "478217aa-d9af-43c3-929e-db161fbf1c96",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "repair_or_TO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "2b2c5990-1fd3-40be-a41f-e6e69b95e1b9",
      "name": "обработка всех заявок",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        260,
        12060
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_number",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number_car",
              "value": "={{ $json.callback_query.data.split('_')[2] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "04fec1d0-8d21-4eaa-a55f-5dda97d49fa8",
      "name": "находим авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        820,
        13220
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_number",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number_car",
              "value": "={{ $json.callback_query.data.split('_')[2] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d647f212-5bb0-4f73-8c5c-dbb7a4fc928d",
      "name": "находим авто1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        820,
        13600
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenances_by_car",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "car_id",
              "value": "={{ $json.id }}"
            },
            {
              "name": "start_date",
              "value": "={{ new Date(1970).toDateTime().format('yyyy-MM-dd') }}"
            },
            {
              "name": "end_date",
              "value": "={{ $today.plus(100, 'years').format('yyyy-MM-dd') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "779d8f72-cb43-4dd0-b3b9-90a95119da0a",
      "name": "неисправности по авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1066,
        13217
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "urgently",
              "order": "descending"
            },
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "5713183a-1672-4369-897d-94de96b17fdd",
      "name": "сортируем по дате и срочности",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1706,
        13177
      ]
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "urgently",
              "order": "descending"
            },
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "e736224d-fc9a-4217-ba27-22cf91f38269",
      "name": "сортируем по дате и срочности1",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1726,
        13577
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/repair_car_(.+)_page_(\\d+)/); // Изменено для нового формата\n    if (match) {\n        selectedCar = match[1]; // Извлекаем номер авто\n        page = parseInt(match[2], 10);} // Извлекаем номер страницы\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    // Проверяем, является ли заявка срочной\n    const isUrgent = item.json.urgently === true ? '❗' : '';\n\n    return {\n        text: `${isUrgent}${startIndex + index + 1}. ${truncatedDescription}`, // Используем startIndex для правильной нумерации и добавляем ❗\n        callback_data: `all_item_${item.json.id}_page_${page}_repair_car_${carInfo}` // Добавляем номер страницы\n    };\n});\n\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `repair_car_${selectedCar}_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `repair_car_${selectedCar}_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"repair_all_page_1\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: `Заявки по авто <b>${selectedCar}</b>, ожидающие выполнения:`,\n    parse_mode: 'HTML',\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки, ожидающие выполнения:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "1d487911-a14b-4ac3-8313-392160246199",
      "name": "вывод заявок по авто",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1946,
        13177
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Задаем максимальное количество символов для описания заявки\nconst maxDescriptionLength = 16;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/TO_car_(.+)_page_(\\d+)/); // Изменено для нового формата\n    if (match) {\n        selectedCar = match[1]; // Извлекаем номер авто\n        page = parseInt(match[2], 10);} // Извлекаем номер страницы\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = items.slice(startIndex, endIndex);\n\n// Функция для обрезки описания с троеточием\nconst truncateDescription = (description) => {\n    if (description.length > maxDescriptionLength) {\n        return description.slice(0, maxDescriptionLength) + '…';\n    }\n    return description;\n};\n\n// Формируем массив кнопок с информацией по каждому элементу\nconst buttons = displayItems.map((item, index) => {\n    // Разделяем строку по дефису и оставляем только номер авто (первая часть)\n    const carInfo = item.json.car_id[1].split(' - ')[0];\n    // Обрезаем описание заявки, если оно слишком длинное\n    const truncatedDescription = truncateDescription(item.json.description_of_maintenance);\n    \n    // Проверяем, является ли заявка срочной\n    const isUrgent = item.json.urgently === true ? '❗' : '';\n\n    return {\n        text: `${isUrgent}${startIndex + index + 1}. ${truncatedDescription}`, // Используем startIndex для правильной нумерации и добавляем ❗\n        callback_data: `all_item_${item.json.id}_page_${page}_TO_car_${carInfo}` // Добавляем номер страницы\n    };\n});\n\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (items.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `TO_car_${selectedCar}_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `TO_car_${selectedCar}_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"TO_all_page_1\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: `Заявки по авто <b>${selectedCar}</b>, ожидающие выполнения:`,\n    parse_mode: 'HTML',\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n\n// Обработка выбора заявки\nconst selectedCallbackData = callbackQuery.data;\nconst selectedMatch = selectedCallbackData.match(/item_(\\d+)_page_(\\d+)/);\nif (selectedMatch) {\n    const itemId = selectedMatch[1]; // ID выбранной заявки\n    const returnPage = parseInt(selectedMatch[2], 10); // Номер страницы для возврата\n\n    // Здесь можно добавить логику для обработки выбранной заявки\n    // Например, отправить информацию о заявке или выполнить другую логику\n\n    // После этого можно вернуться к странице с заявками\n    const returnMessage = {\n        chat_id: chatId,\n        message_id: messageId,\n        text: \"Заявки, ожидающие выполнения:\",\n        reply_markup: inlineKeyboard // Используем тот же inlineKeyboard с сохраненной страницей\n    };\n\n    return [\n        {\n            json: {\n                url,\n                message: returnMessage\n            }\n        }\n    ];\n}"
      },
      "id": "8d154f82-7c91-4fda-a161-8b2c3a5e07ad",
      "name": "вывод заявок по авто1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1986,
        13577
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Функция для выбора правильного склонения слова \"заявка\"\nconst getDeclension = (count, forms) => {\n    const mod10 = count % 10;\n    const mod100 = count % 100;\n    if (mod100 >= 11 && mod100 <= 19) {\n        return forms[2]; // \"заявок\"\n    }\n    if (mod10 === 1) {\n        return forms[0]; // \"заявка\"\n    }\n    if (mod10 >= 2 && mod10 <= 4) {\n        return forms[1]; // \"заявки\"\n    }\n    return forms[2]; // \"заявок\"\n};\n\n// Группируем заявки по номеру авто\nconst groupedItems = items.reduce((acc, item) => {\n    const carNumber = item.json.car_id[1].split(' - ')[0];\n    if (!acc[carNumber]) {\n        acc[carNumber] = { count: 0, urgently: false };\n    }\n    acc[carNumber].count++;\n    if (item.json.urgently === true) {\n        acc[carNumber].urgently = true;\n    }\n    return acc;\n}, {});\n\n// Преобразуем объект в массив\nlet groupedArray = Object.entries(groupedItems).map(([carNumber, data]) => ({\n    carNumber,\n    count: data.count,\n    urgently: data.urgently\n}));\n\n// Сортируем: сначала срочные заявки (urgently === true) в порядке убывания count, затем несрочные\ngroupedArray = groupedArray.sort((a, b) => {\n    if (a.urgently === b.urgently) {\n        return b.count - a.count; // Сравнение по количеству заявок\n    }\n    return a.urgently ? -1 : 1; // Срочные заявки идут первыми\n});\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = groupedArray.slice(startIndex, endIndex);\n\n// Склонения для слова \"заявка\"\nconst declensions = [\"заявка\", \"заявки\", \"заявок\"];\n\n// Формируем массив кнопок с информацией по каждому авто\nconst buttons = displayItems.map((item, index) => {\n    const isUrgent = item.urgently ? '❗' : '';\n    const declension = getDeclension(item.count, declensions);\n    return {\n        text: `${isUrgent}${startIndex + index + 1}. ${item.carNumber} - ${item.count} ${declension}`,\n        callback_data: `repair_car_${item.carNumber}_page_${page}` // Используем номер авто\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (groupedArray.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `repair_all_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `repair_all_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"repair_or_TO\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Заявки на ремонт по автомобилям:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "60bdc117-29bb-4ff8-96ae-cc8fe1b89bf3",
      "name": "выбор авто",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1680,
        11900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 6;\n\n// Получаем номер страницы из callback_data или оставляем 1 по умолчанию\nlet page = 1; // Стандартная первая страница\nlet messageId; // Для хранения message_id\n\n// Проверяем, есть ли callback_query\nconst callbackQuery = $('Execute Workflow Trigger').all()[0].json.callback_query;\nif (callbackQuery) {\n    const callbackData = callbackQuery.data;\n    const match = callbackData.match(/page_(\\d+)/);\n    if (match) {\n        page = parseInt(match[1], 10);\n    }\n    // Получаем message_id из callback_query\n    messageId = callbackQuery.message.message_id; // Получаем message_id из объекта callback_query\n} else {\n    // Если это не callback_query, возвращаемся к стандартному поведению\n    messageId = $('Execute Workflow Trigger').all()[0].json.message.message_id; // Получаем message_id из сообщения\n}\n\n// Функция для выбора правильного склонения слова \"заявка\"\nconst getDeclension = (count, forms) => {\n    const mod10 = count % 10;\n    const mod100 = count % 100;\n    if (mod100 >= 11 && mod100 <= 19) {\n        return forms[2]; // \"заявок\"\n    }\n    if (mod10 === 1) {\n        return forms[0]; // \"заявка\"\n    }\n    if (mod10 >= 2 && mod10 <= 4) {\n        return forms[1]; // \"заявки\"\n    }\n    return forms[2]; // \"заявок\"\n};\n\n// Группируем заявки по номеру авто\nconst groupedItems = items.reduce((acc, item) => {\n    const carNumber = item.json.car_id[1].split(' - ')[0];\n    if (!acc[carNumber]) {\n        acc[carNumber] = { count: 0, urgently: false };\n    }\n    acc[carNumber].count++;\n    if (item.json.urgently === true) {\n        acc[carNumber].urgently = true;\n    }\n    return acc;\n}, {});\n\n// Преобразуем объект в массив\nlet groupedArray = Object.entries(groupedItems).map(([carNumber, data]) => ({\n    carNumber,\n    count: data.count,\n    urgently: data.urgently\n}));\n\n// Сортируем: сначала срочные заявки (urgently === true) в порядке убывания count, затем несрочные\ngroupedArray = groupedArray.sort((a, b) => {\n    if (a.urgently === b.urgently) {\n        return b.count - a.count; // Сравнение по количеству заявок\n    }\n    return a.urgently ? -1 : 1; // Срочные заявки идут первыми\n});\n\n// Определяем начальный и конечный индексы для отображаемых элементов на странице\nconst startIndex = (page - 1) * maxItemsPerPage;\nconst endIndex = startIndex + maxItemsPerPage;\n\n// Определяем, какие элементы будем выводить на текущей странице\nconst displayItems = groupedArray.slice(startIndex, endIndex);\n\n// Склонения для слова \"заявка\"\nconst declensions = [\"заявка\", \"заявки\", \"заявок\"];\n\n// Формируем массив кнопок с информацией по каждому авто\nconst buttons = displayItems.map((item, index) => {\n    const isUrgent = item.urgently ? '❗' : '';\n    const declension = getDeclension(item.count, declensions);\n    return {\n        text: `${isUrgent}${startIndex + index + 1}. ${item.carNumber} - ${item.count} ${declension}`,\n        callback_data: `TO_car_${item.carNumber}_page_${page}` // Используем номер авто\n    };\n});\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопки \"Следующая страница\" и \"Назад\", если нужно\nif (groupedArray.length > endIndex) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: `TO_all_page_${page + 1}` }]);\n}\nif (page > 1) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: `TO_all_page_${page - 1}` }]);\n}\n\n// Добавляем постоянную кнопку \"Назад\"\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"repair_or_TO\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id из входного JSON\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для обновления сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для обновления\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Заявки на ТО по автомобилям:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "cedd78e1-c896-4f94-9326-7610e8cb2978",
      "name": "выбор авто1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        12300
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "inputing_reject_text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0d60c97b-d464-461d-8f32-cab14fbed491",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "inputing_expected_time",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "c931786a-36cd-4ae2-926f-8796331747ff",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "inputing_request_hours",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "cee56c1c-98b9-4cd9-8c7d-887ebd449ea8",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "inputing_description",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "f1a310ce-7d1c-4113-9402-b8e9c816e7c1",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "inputing_number_car",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "e8bab885-fca0-4cbf-a9f1-021d304bb65c",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "inputing_scheduled_date",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "c1da43f8-3681-4dab-beac-3c7caf06adba",
      "name": "статус механика",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2240,
        3300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "44403514-747a-47bf-9419-77944fae7bb7",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.message.text }}",
              "rightValue": "^\\d+(?:[.,]\\d+)?$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "b79b4fad-f21f-4b11-a37d-ee07c65f8c8e",
      "name": "проверка на число5",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3700,
        1980
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Часы введены неверно, введите еще раз",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "ba97b79b-ca52-4f0d-9cfe-2a21ab27bae6",
      "name": "часы введены неверно2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4040,
        2140
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
            "expected_time_maintenance": "={{ $json.time }}",
            "status": "authorized"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "f3b8146c-9113-44e1-b13f-ed3762b39461",
      "name": "возвращаем дефолтный статус1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        4240,
        1960
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.message.chat.id }}",
        "text": "=Вы оценили время выполнения в {{ $('Обработка числа и склонения').item.json.time }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "=expected_time"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Продолжить",
                    "additionalFields": {
                      "callback_data": "=give_work_locksmiths"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "835ee1b6-6f7d-4962-bc62-66825b51b090",
      "name": "часы введены неверно",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4700,
        1960
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=technical.maintenance",
        "operation": "update",
        "customResourceId": "={{ $('назначение слесаря').item.json.id }}",
        "fieldsToCreateOrUpdate": {
          "fields": [
            {
              "fieldName": "expected_completion_date",
              "fieldValue": "={{ $json.future_time }}"
            }
          ]
        }
      },
      "id": "6261bb4a-7914-4a6b-a3bf-204e8077d926",
      "name": "ожидаемое время ремонта",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        2480,
        8560
      ],
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const sourceNodeName = \"Execute Workflow Trigger\";\nconst inputData = $node[sourceNodeName].json;\n\nlet expectedTimeRaw = inputData.expected_time_maintenance || \"\";\nlet expectedTime = parseFloat(expectedTimeRaw.replace(/[^\\d.,]/g, \"\").replace(\",\", \".\"));\n\nif (isNaN(expectedTime)) {\n  throw new Error(\"Некорректное значение в поле 'expected_time_maintenance'\");\n}\n\nconst now = new Date();\nconst offsetInHours = 0; //\nconst CurrentTime = new Date(now.getTime() + offsetInHours * 60 * 60 * 1000);\n\nconst futureTime = new Date(CurrentTime.getTime() + expectedTime * 60 * 60 * 1000);\n\nconst formattedDate = futureTime.toISOString().replace(\"T\", \" \").slice(0, 19);\n\nreturn {\n  json: {\n    future_time: formattedDate,\n  }\n};\n"
      },
      "id": "b506fb3c-d4a2-4062-9e9f-92625240174a",
      "name": "получаем текущее время + ожидаемое время",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2280,
        8560
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "=Введите, сколько предварительно часов будет затрачено на выполнение заявки. Пример: 4,5 часа",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "74240145-1ee3-43ec-b4ac-b1ab4b430918",
      "name": "введите часы",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1660,
        9300
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "status": "=inputing_expected_time_{{ $('Execute Workflow Trigger').item.json.callback_query.data.split('_')[3] }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "a81377ab-07cc-4bef-adc8-a84613208452",
      "name": "меняем статус на ввод часов",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1880,
        9300
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Сообщение о вводе часов ожидаемого выполнения",
        "height": 215.5923936655612,
        "width": 460.31059711907585,
        "color": 5
      },
      "id": "a54cd343-3c22-4db3-b3c3-9fd400d78809",
      "name": "Sticky Note17",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1580,
        9240
      ]
    },
    {
      "parameters": {
        "content": "## Ввод часов ожидаемого выполнения заявки",
        "height": 401.60674926417573,
        "width": 980.2419551923679,
        "color": 5
      },
      "id": "aded3e72-68dd-4345-b296-d9e01882efc1",
      "name": "Sticky Note26",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3660,
        1900
      ]
    },
    {
      "parameters": {
        "jsCode": "// Функция для склонения слова \"час\" в зависимости от числа\nfunction getHourDeclension(hours) {\n  const remainder10 = hours % 10;\n  const remainder100 = hours % 100;\n\n  if (remainder100 >= 11 && remainder100 <= 14) {\n    return \"часов\";\n  } else if (remainder10 === 1) {\n    return \"час\";\n  } else if (remainder10 >= 2 && remainder10 <= 4) {\n    return \"часа\";\n  } else {\n    return \"часов\";\n  }\n}\n\n// Основной код для n8n\nconst inputData = $input.all(); // Получаем входящие данные\n\n// Обрабатываем каждый объект из массива входящих данных\nconst result = inputData.map(item => {\n  // Берем значение из поля \"text\"\n  let textValue = item.json.message.text;\n\n  // Если текст содержит запятую, заменяем ее на точку\n  textValue = textValue.replace(\",\", \".\");\n\n  // Преобразуем текст в число\n  const expectedTime = parseFloat(textValue);\n\n  if (isNaN(expectedTime)) {\n    throw new Error(\"Некорректное значение в поле 'text'\");\n  }\n\n  // Получаем правильное склонение\n  const declension = getHourDeclension(Math.floor(expectedTime));\n\n  // Формируем результат\n  return {\n    json: {\n      time: `${expectedTime} ${declension}`\n    }\n  };\n});\n\nreturn result;\n"
      },
      "id": "64dc9823-d9de-482d-81f5-69124a203269",
      "name": "Обработка числа и склонения",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4020,
        1960
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "Документы",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "883202d0-9665-45c9-b4a4-894176a88fa7",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "Заявки на проверке",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "78b17236-46b7-4c0e-adbf-0f90ce06934d",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "Все заявки",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "7d9ad190-3268-4cee-9b22-cbf286ac5780",
                    "leftValue": "={{ $json.message.text }}",
                    "rightValue": "Создать заявку",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "df35b74b-f65b-4b99-89b7-d880e2bb6481",
      "name": "Проверка кнопок",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        4520,
        4980
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a03fccd-eacc-4728-b98f-052d5b6dc7f1",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.assigned_locksmiths.map(item => item.id) }}",
              "rightValue": "={{ $json.id }}",
              "operator": {
                "type": "array",
                "operation": "notContains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1e4b7eb0-4ed9-40b2-babd-9b622b8583e1",
      "name": "убираем выбранных слесарей",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2140,
        8340
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a03fccd-eacc-4728-b98f-052d5b6dc7f1",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.assigned_locksmiths.map(item => item.id) }}",
              "rightValue": "={{ $json.id }}",
              "operator": {
                "type": "array",
                "operation": "notContains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "fb96c265-72af-4c59-b8c7-29417b476bcb",
      "name": "убираем выбранных слесарей1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2080,
        8140
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "cf4b09a2-e932-4a5a-8cd5-0441add1b2ae",
      "name": "поиск слесарей4",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2060,
        9500
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a03fccd-eacc-4728-b98f-052d5b6dc7f1",
              "leftValue": "={{ $('обновляем json').item.json.assigned_locksmiths.map(item => item.id) }}",
              "rightValue": "={{ $json.id }}",
              "operator": {
                "type": "array",
                "operation": "notContains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "53d40822-f1af-4d8d-81ba-d4da2504e92b",
      "name": "убираем выбранных слесарей2",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2300,
        9500
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 5;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page\" }]);\n}\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "be8989ee-bcab-4252-9d26-eb42c50c626a",
      "name": "возврат к первой странице1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2560,
        9500
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "40445a69-5b02-43df-a015-817baef840dd",
      "name": "отправляем сообщение 7",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2800,
        9500
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "5fa21c04-5387-465c-a818-f9f1ba26ef80",
      "name": "поиск слесарей5",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1620,
        9740
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a03fccd-eacc-4728-b98f-052d5b6dc7f1",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.assigned_locksmiths.map(item => item.id) }}",
              "rightValue": "={{ $json.id }}",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ea929939-393b-4641-b4ef-32f7100b2d56",
      "name": "убираем выбранных слесарей3",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1880,
        9740
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "d910e801-08da-4f0b-9f62-292ab5345911",
      "name": "поиск слесарей6",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1820,
        10000
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a03fccd-eacc-4728-b98f-052d5b6dc7f1",
              "leftValue": "={{ $('обнуляем список слесарей').item.json.assigned_locksmiths.map(item => item.id) }}",
              "rightValue": "={{ $json.id }}",
              "operator": {
                "type": "array",
                "operation": "notContains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f510b00f-7065-4829-802f-b066ed16795c",
      "name": "убираем выбранных слесарей4",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2060,
        9980
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 5;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page\" }]);\n}\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "5114f407-1832-49b7-85a8-2c8a6eea18a5",
      "name": "возврат к первой странице2",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2320,
        9980
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "02bdebac-52a2-49e9-bd2e-73f392929e9b",
      "name": "отправляем сообщение 9",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2560,
        9980
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "=do_to_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3fc6507a-dbe4-408d-a18c-d24ce772b571",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "=take_to_fix_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "501b491c-9e53-4a06-9131-ace4e5475acd",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "next_page",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "8988c080-1e70-40e4-9c6b-8589fbcd5eb4",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "first_page",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "83dc5f20-fad0-4049-83de-82591dd2e8f1",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "=give_work_locksmiths",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "336ee09b-4d4b-4b2e-ae32-d0bfb1a4f681",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "get_maintenance_mess",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2927aeed-e424-44be-8f57-36e5dc1ae679",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"locksmith_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "d47fb99c-17aa-4eae-8436-dd4db087b11c",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        660,
        7840
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"expected_time\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "7bd698e1-56f4-47d8-9699-031ee19101e5",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "first_page_dellast",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "ff794d90-95ff-41dc-b590-e91aec5fd590",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "confirm_lockmith",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3ec2aa5d-2d70-416d-a4b3-e2d2285d36c3",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "first_page_clear",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b33fae8f-5e02-4a21-9024-5fd475fdcf14",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "next_page_locksmiths",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "0dfa7f46-e56c-4029-b615-9a5c30973ad6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "first_page_locksmiths",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "1c97aec7-5747-436f-b66b-2fb28bc52dd6",
      "name": "заявки на проверке1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        560,
        9060
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a03fccd-eacc-4728-b98f-052d5b6dc7f1",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.assigned_locksmiths.map(item => item.id) }}",
              "rightValue": "={{ $json.id }}",
              "operator": {
                "type": "array",
                "operation": "contains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "c80e7fc2-d8ff-4b08-a90e-81b2dba8036d",
      "name": "убираем выбранных слесарей5",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3000,
        8560
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Выберите, какую заявку вы хотите создать",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Ремонт",
                    "additionalFields": {
                      "callback_data": "create_repair"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "ТО",
                    "additionalFields": {
                      "callback_data": "create_TO"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "464f79a1-745c-4c31-a8b3-63079623f6d2",
      "name": "Ремонт или ТО2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        5120,
        5020
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"repair_car_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "107a6bca-cf08-46fa-9b50-c1e5d62a596f",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"TO_car_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "23e825d6-db03-48ac-93ec-7f4dd0c3e053",
      "name": "обработка всех заявок по выбранному авто",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        200,
        13340
      ]
    },
    {
      "parameters": {
        "jsCode": "let assignedLocksmiths = $node[\"Execute Workflow Trigger\"].json[\"assigned_locksmiths\"];\n\n// Проверяем, если поле null\nif (assignedLocksmiths === null) {\n  console.log(\"Поле уже пусто.\");\n} else if (Array.isArray(assignedLocksmiths)) {\n  // Если это массив\n  if (assignedLocksmiths.length > 1) {\n    // Удаляем последний элемент\n    assignedLocksmiths.pop();\n  } else {\n    // Если в массиве один элемент, очищаем поле\n    assignedLocksmiths = null;\n  }\n} else {\n  // Если это не массив (а объект), очищаем поле\n  assignedLocksmiths = null;\n}\n\n// Возвращаем результат как массив объектов\nreturn [{\n  json: {\n    assigned_locksmiths: assignedLocksmiths\n  }\n}];\n"
      },
      "id": "a270b97c-fe01-4663-9043-1c4d39665323",
      "name": "склеиваем json слесарей",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1620,
        9500
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "assigned_locksmiths": "={{ $json.assigned_locksmiths }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "db5f1dee-5d4c-4f17-bc9e-5e66f8fcc4e4",
      "name": "обновляем json",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1860,
        9500
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получение текущего значения поля assigned_locksmiths\nlet assignedLocksmiths = $node[\"Execute Workflow Trigger\"].json[\"assigned_locksmiths\"];\nlet newLocksmithId = $node[\"нужный слесарь1\"].json[\"id\"]; // ID для добавления\n\n// Проверяем, является ли поле объектом или null\nif (!assignedLocksmiths) {\n    // Если поле null, создаем новый массив с объектом\n    assignedLocksmiths = [{ id: newLocksmithId }];\n} else if (!Array.isArray(assignedLocksmiths)) {\n    // Если это объект, преобразуем в массив и добавляем новый элемент\n    assignedLocksmiths = [assignedLocksmiths, { id: newLocksmithId }];\n} else {\n    // Если это массив, просто добавляем новый объект\n    assignedLocksmiths.push({ id: newLocksmithId });\n}\n\n// Возвращаем обновленное поле\nreturn {\n    assigned_locksmiths: assignedLocksmiths\n};\n"
      },
      "id": "fbaa4255-4cab-4b26-be4c-d4752afd3383",
      "name": "добавляем слесаря в массив",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2600,
        9040
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "assigned_locksmiths": "={{ $json.assigned_locksmiths }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "5869ccd8-6230-42cc-97e0-f27a2e675767",
      "name": "обновляем список слесарей",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2840,
        9040
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "resource_id[1]",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "96165af1-0d74-497e-9d1f-131b972f2e64",
      "name": "склеиваем имена слесарей",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2080,
        9740
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "maintenance_id",
              "value": "={{ $('Execute Workflow Trigger').item.json.current_maintenance }}"
            }
          ]
        },
        "options": {}
      },
      "id": "2e70e7fd-03e7-453e-98e9-32bb5ab9df2e",
      "name": "берем название заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2260,
        9740
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Вы хотите назначить работу <b>\"{{ $json.description_of_maintenance }}\"</b> слесарям:\n<i>{{ $('склеиваем имена слесарей').item.json.concatenated_resource_id1 }}</i>",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назначить",
                    "additionalFields": {
                      "callback_data": "expected_time"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "first_page_clear"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "857ef60e-d8f1-494d-bbdc-a06c00c48bca",
      "name": "подтверждение слесарей",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2500,
        9740
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "assigned_locksmiths": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "0981ce9e-2278-4052-8d84-798bc8dbc80d",
      "name": "обнуляем список слесарей",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1620,
        10000
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Вы выбрали слесаря <b>{{ $json.name }}</b> для назначения на заявку <b>\"{{ $('получим все неисправности7').item.json.description_of_maintenance }}\"</b>.\nХотите назначить еще одного слесаря на заявку?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Нет",
                    "additionalFields": {
                      "callback_data": "confirm_lockmith"
                    }
                  },
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "first_page_locksmiths"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "first_page_dellast"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "3547acaf-c165-4de5-b7fe-31cb5038654f",
      "name": "выбранный слесарь",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2380,
        9040
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## отмена выбора слесаря",
        "height": 203.23852840654763,
        "width": 1407.440266976785,
        "color": 5
      },
      "id": "d1e2f3c7-30b8-48d5-b838-c5e2e2b256ed",
      "name": "Sticky Note28",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1540,
        9460
      ]
    },
    {
      "parameters": {
        "content": "## подтверждение выбранных слесарей",
        "height": 215.5923936655612,
        "width": 1160.3629617965132,
        "color": 5
      },
      "id": "1199d7ad-25fe-4ea1-ba4f-297973d76d69",
      "name": "Sticky Note29",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1540,
        9700
      ]
    },
    {
      "parameters": {
        "content": "## отмена выбора слесарей",
        "height": 215.5923936655612,
        "width": 1160.3629617965132,
        "color": 5
      },
      "id": "363b6749-7eac-4239-992e-fd7298bf5b8a",
      "name": "Sticky Note30",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1540,
        9940
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.job_title }}",
                    "rightValue": "Слесарь",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a6ebbdb0-35b9-43ca-b669-a58d2bdcd77e",
                    "leftValue": "={{ $json.job_title }}",
                    "rightValue": "Водитель",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "b9738cf6-ec21-482f-9059-d39366b7cf87",
      "name": "слесарь/водитель",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        4600,
        1580
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "ba9393dc-1b69-4e9b-91e5-1eca878548d3",
      "name": "отправляем сообщение 14",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2400,
        10240
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "6ec0bcc0-ad2c-469e-bf00-5c11e8b680e5",
      "name": "отправляем сообщение 16",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2480,
        10440
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 5;\n\n// Определяем, сколько элементов будем выводить, начиная с 6-го элемента (индекс 5)\nconst displayItems = items.slice(maxItemsPerPage); // Берем элементы, начиная с 6-го\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов, начиная с 6\nconst buttons = displayItems.map((item, index) => ({\n    text: `${maxItemsPerPage + index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем, начиная с 6\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Предыдущая страница\", если есть элементы на предыдущей странице\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Предыдущая страница\", callback_data: \"first_page_locksmiths\" }]);\n}\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "4b00e332-1277-4f50-8b86-abb4d5436ddf",
      "name": "следующая страница слесарей1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2180,
        10240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все элементы из входных данных\nconst items = $input.all();\n\n// Определяем максимальное количество элементов на одной странице\nconst maxItemsPerPage = 5;\n\n// Определяем, сколько элементов будем выводить\nconst displayItems = items.slice(0, maxItemsPerPage); // Берем первые 5 элементов\n\n// Формируем массив кнопок с именами и ID, добавляем нумерацию элементов\nconst buttons = displayItems.map((item, index) => ({\n    text: `${index + 1}. ${item.json.name}`, // Добавляем нумерацию перед именем\n    callback_data: `locksmith_${item.json.id}` // ID для каждой кнопки\n}));\n\n// Создаем объект с inline-клавиатурой\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // Каждая кнопка на своей строке\n    ]\n};\n\n// Добавляем кнопку \"Следующая страница\", если элементов больше 5\nif (items.length > maxItemsPerPage) {\n    inlineKeyboard.inline_keyboard.push([{ text: \"Следующая страница\", callback_data: \"next_page_locksmiths\" }]);\n}\ninlineKeyboard.inline_keyboard.push([{ text: \"Назад\", callback_data: \"get_maintenance_mess\" }]);\n\n// Логируем для отладки\nconsole.log(JSON.stringify(inlineKeyboard, null, 2));\n\n// Получаем chat_id пользователя, который запустил workflow\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\n\nconst messageId = $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id;\n\n// Токен бота\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\n\n// URL для отправки сообщения через API Telegram\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\n// Формируем сообщение для отправки\nconst message = {\n    chat_id: chatId,\n    message_id: messageId,\n    text: \"Выберите слесаря:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "3615e3ae-baca-43c0-a3c6-de3450706005",
      "name": "возврат к первой странице3",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2240,
        10440
      ]
    },
    {
      "parameters": {
        "content": "## Переключение на следующую страницу слесарей",
        "height": 197.08380449648854,
        "width": 934.8345624339241,
        "color": 5
      },
      "id": "5e897b9a-3c30-48be-af5a-20aabe222ab3",
      "name": "Sticky Note31",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1600,
        10180
      ]
    },
    {
      "parameters": {
        "content": "## Возврат к предыдущей страницы слесарей",
        "height": 197.08380449648854,
        "width": 918.9792918255035,
        "color": 5
      },
      "id": "9fd35a85-3be6-4cb5-be95-a1ba2cbcda06",
      "name": "Sticky Note32",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1700,
        10400
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "f9cf5e1f-d01a-420b-9b84-db7a77c53696",
      "name": "поиск слесарей7",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1640,
        10240
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_locksmiths",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {}
          ]
        },
        "options": {}
      },
      "id": "86c841d0-cd28-438c-9f27-a059b7ca720a",
      "name": "поиск слесарей8",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1740,
        10460
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a03fccd-eacc-4728-b98f-052d5b6dc7f1",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.assigned_locksmiths.map(item => item.id) }}",
              "rightValue": "={{ $json.id }}",
              "operator": {
                "type": "array",
                "operation": "notContains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1d8fc7fd-a4d9-4324-ae2c-9634c039759c",
      "name": "убираем выбранных слесарей6",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1980,
        10440
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "6a03fccd-eacc-4728-b98f-052d5b6dc7f1",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.assigned_locksmiths.map(item => item.id) }}",
              "rightValue": "={{ $json.id }}",
              "operator": {
                "type": "array",
                "operation": "notContains",
                "rightType": "any"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "5fce890c-9808-4fc7-87fc-5f3c63d2ad01",
      "name": "убираем выбранных слесарей7",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1920,
        10240
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "92ad7c1c-cd84-4fc3-bf35-ca59aedad2a0",
              "name": "TO_number",
              "value": "={{ $json.current_maintenance }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "7813c41b-c3cd-47a3-91db-300faff8c586",
      "name": "номер выбранной заявки",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        800,
        14680
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/take_maintenance_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"maintenance_id\": {{ $json.TO_number }}\n}",
        "options": {}
      },
      "id": "a8e3b5f9-2f18-4e35-b2db-a92956df1b6f",
      "name": "обновим статус на \"в работе\"",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1020,
        14680
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Заявка <b>{{ $json.description_of_maintenance }}</b> автомобиля <b>{{ $json.car_id[1].split(' - ')[0] }}</b> взята в работу.",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить заявку",
                    "additionalFields": {
                      "callback_data": "={{ \"ER_\"+$json.id }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "cab750ef-7744-43e0-ba36-b8df8fd193a0",
      "name": "заявка взята в работу",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1260,
        14620
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "=Ошибка Odoo: {{ $json.error }}",
        "additionalFields": {}
      },
      "id": "6c65da56-f680-42be-b87f-117c3e95d0e4",
      "name": "если есть ошибки",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1260,
        14780
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "92ad7c1c-cd84-4fc3-bf35-ca59aedad2a0",
              "name": "TO_number",
              "value": "={{ $('Execute Workflow Trigger').item.json.callback_query.data.substring(3) }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "ccd6afbd-3108-4a37-a52d-73065b6d92bf",
      "name": "номер выбранной заявки1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        820,
        15060
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "fc7e922b-a871-4029-abf2-95687ecdcc6a",
              "leftValue": "={{ $json.status }}",
              "rightValue": "В работе",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "076ccb95-f4f5-4585-b406-d8fac7e23350",
      "name": "заявка в работе?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1240,
        15060
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Введите число затраченных часов на работу:",
        "additionalFields": {}
      },
      "id": "9f504007-b5c0-4385-88ae-f9a86fd4d385",
      "name": "нужно вписать часы",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1480,
        14980
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Статус заявки должен быть \"В работе\""
        }
      },
      "id": "2f61d0a9-473d-4479-8ccc-7cd956c1878f",
      "name": "заявка уже изменена",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1620,
        15120
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "status": "inputing_request_hours",
            "end_request_id": "={{ $('номер выбранной заявки1').item.json.TO_number }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "3c9b2fa8-454b-4835-9af1-21f2a848afc4",
      "name": "обновим статус и номер текущей заявки",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1780,
        14980
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Прикрепите фото исправления:",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "back_request_photo"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "a2d4d85f-8c9c-4aaf-a2ad-6e2d0f25d1bc",
      "name": "завершён процесс заявки1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        900,
        15420
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.result.chat.id }}",
            "status": "adding_end_request_photo"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "74e4096a-8a4a-4cfc-9e9d-adacf8ca1880",
      "name": "меняем на статус отправки фотографии",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1120,
        15420
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "=Заявка выполнена!",
        "additionalFields": {}
      },
      "id": "335e7209-0208-4ebc-8794-afda5d2fa63d",
      "name": "завершён процесс заявки",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        900,
        15580
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "end_request_id": "={{ null }}",
            "end_request_hours": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "efabe43d-6d3d-4811-86cf-7c8c344da4bf",
      "name": "убираем номер заявки из пг",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1340,
        15580
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Нужно приложить фото исправления?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "yes_request_photo"
                    }
                  },
                  {
                    "text": "Нет",
                    "additionalFields": {
                      "callback_data": "no_request_photo"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "57431344-bedb-4bce-898f-f50c323da676",
      "name": "нужно ли приложить фото?1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        900,
        15860
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.result.chat.id }}",
            "status": "authorized",
            "end_request_hours": "={{ $('Execute Workflow Trigger').item.json.message.text }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "b486b38f-bf84-47f8-b3e0-ae409b9cf63c",
      "name": "возвращаем статус3",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1120,
        15860
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Обработка кнопок для отправки фото завершения заявки",
        "height": 370,
        "width": 740,
        "color": 5
      },
      "id": "c577da67-2874-42d9-b77a-8eea44774c15",
      "name": "Sticky Note33",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        760,
        15360
      ]
    },
    {
      "parameters": {
        "content": "## Механик берет заявку",
        "height": 345,
        "width": 1310,
        "color": 5
      },
      "id": "743f6597-6570-4c8c-817d-1d25c34e729a",
      "name": "Sticky Note34",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        14600
      ]
    },
    {
      "parameters": {
        "content": "## Механик завершает заявку",
        "height": 345.0604887980921,
        "width": 1202.7584994749918,
        "color": 5
      },
      "id": "06a5cf4e-45d2-43d1-b5e3-4f7b1784dd59",
      "name": "Sticky Note35",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        14960
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "current_maintenance": "={{null }}",
            "expected_time_maintenance": "={{null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "10470488-e900-4e89-ab17-c2147842b7ce",
      "name": "удаляем id заявки2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1500,
        14620
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "=Введите, сколько предварительно часов будет затрачено на выполнение заявки. Пример: 4,5 часа",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "734a2181-413b-4062-9861-6b010c6ed73a",
      "name": "введите часы1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        800,
        14340
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
            "status": "=inputing_expected_time_self"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "6f1ab4a8-aa44-4310-bb20-284363b991a2",
      "name": "меняем статус на ввод часов1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1020,
        14340
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Сообщение о вводе часов ожидаемого выполнения",
        "height": 215.5923936655612,
        "width": 460.31059711907585,
        "color": 5
      },
      "id": "c3b73312-33ab-4b97-9be2-02d1022f9973",
      "name": "Sticky Note36",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        720,
        14280
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "b71c49fe-67f8-46f3-ab22-ac0df841a86d",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
              "rightValue": "inputing_expected_time_self",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4440,
        1960
      ],
      "id": "db784166-bbec-44fe-b8cc-878ca15d34a7",
      "name": "If"
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.message.chat.id }}",
        "text": "=Вы оценили время выполнения в {{ $('Обработка числа и склонения').item.json.time }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "=take_maintenance"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Продолжить",
                    "additionalFields": {
                      "callback_data": "={{ \"TR_\"+$json.current_maintenance }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "ee3bee80-d50d-47da-92f2-1d1c1aebbd20",
      "name": "часы введены неверно1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4700,
        2140
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenance_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"maintenance_id\": {{ $json.TO_number }}\n}",
        "options": {}
      },
      "id": "3d54e755-0ac1-4341-9f95-a2f1ad74a419",
      "name": "получим актуальный статус заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1020,
        15060
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/end_maintenance_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"maintenance_id\": {{ $json.end_request_id }},\n    \"hours\": {{ $('Execute Workflow Trigger').item.json.message.text.replace(\",\", \".\") }},\n    \"employee_id\": {{ $json.odoo_id }}\n} ",
        "options": {}
      },
      "id": "9289b008-3120-4d16-bf4c-34bdf02f5eae",
      "name": "обновляем заявку",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        4120,
        2520
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "=Нужно приложить фото исправления?",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "yes_request_photo"
                    }
                  },
                  {
                    "text": "Нет",
                    "additionalFields": {
                      "callback_data": "no_request_photo"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "9b982837-a1f9-4863-b150-76a92a9d41f8",
      "name": "нужно ли приложить фото?",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4400,
        2500
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.chat_message_id -1}}",
        "text": "=Ошибка Odoo: {{ $json.error }}\n\nВведите количество часов заново",
        "additionalFields": {}
      },
      "id": "57dc13f9-f208-4859-aa23-004bf3877857",
      "name": "если есть ошибки2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4400,
        2720
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.result.chat.id }}",
            "status": "authorized",
            "end_request_hours": "={{ $('Execute Workflow Trigger').item.json.message.text.replace(\",\", \".\") }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "9d07c51b-37a6-446b-8671-48b4a116b1ee",
      "name": "возвращаем статус2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        4640,
        2500
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "44403514-747a-47bf-9419-77944fae7bb7",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.message.text }}",
              "rightValue": "^\\d+(?:[.,]\\d+)?$",
              "operator": {
                "type": "string",
                "operation": "regex"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "be896da9-0c38-4330-a47e-cea865733583",
      "name": "проверка на число",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3780,
        2540
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Часы введены неверно, введите еще раз",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "b1c0355b-4f3b-4790-8cd9-8bee20fc0fd1",
      "name": "часы введены неверно3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4040,
        2720
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Ввод часов заявки",
        "height": 478.3312834739607,
        "width": 1110.8752211101105,
        "color": 5
      },
      "id": "98a8d196-867f-426f-ba49-5d56fa78d8c7",
      "name": "Sticky Note37",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3720,
        2440
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "2bd61e7b-a58d-4c5d-81d2-ec5f92c0ee0d",
              "leftValue": "={{ $json.message.photo[0].file_unique_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "beb896d6-88c5-4a2c-8278-489d76a2eca6",
              "leftValue": "={{ $json.message.voice.file_unique_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "0228f7b6-101d-46f6-98b3-0fa3b02263be",
              "leftValue": "={{ $json.message.video_note.file_unique_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "0bd83324-348f-4eae-aa8b-5f00ce5638ee",
              "leftValue": "={{ $json.message.video.file_unique_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "e5357a64-25f4-4056-8acc-f8b4191bc217",
      "name": "Проверка медиа",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -500,
        3860
      ]
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "aa3667d5-7581-4a35-b0b0-ae814f4bf76d",
      "name": "Extract from File1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1040,
        540
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Execute Workflow Trigger').item.json.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}"
      },
      "id": "ab76fb32-5054-4a48-9a19-4e3ba069da48",
      "name": "получение фото из тг1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        800,
        540
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Заявка выполнена!",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "516d83fe-9075-41ae-99ac-a2fd7466c783",
      "name": "Фото доставлено2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1500,
        540
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
            "status": "authorized",
            "end_request_hours": "={{ null }}",
            "end_request_id": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "1cfa8ad9-c97a-4dc8-856b-8e65d1356331",
      "name": "меняем статус на обычный",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        1740,
        540
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/add_repaired_photo",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"maintenance_id\": {{ $('Execute Workflow Trigger').item.json.end_request_id }},\n    \"image\":  {{'\"'+ $('Extract from File1').item.json.data + '\"'}}\n}",
        "options": {}
      },
      "id": "c0b44266-4b34-405b-8c83-d8f63e7776d5",
      "name": "загрузка фото исправления",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1280,
        540
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.message.message_id - 1}}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Прикрепите фото исправления:",
        "additionalFields": {}
      },
      "id": "50c46a07-be07-4007-b6a0-9d7427455d8d",
      "name": "убираем кнопку \"назад\" у прикрепления фото",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        540,
        540
      ],
      "alwaysOutputData": false,
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "content": "## Отправка фото завершения заявки",
        "height": 304,
        "width": 1700,
        "color": 6
      },
      "id": "b4ca08e3-e350-48c8-9044-2fe98cad184a",
      "name": "Sticky Note38",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "content": "## Отмена отправки фото исправления",
        "height": 207.35648349288545,
        "width": 487.077305180272,
        "color": 5
      },
      "id": "5451fd1c-e973-4181-91ab-d1607d731ab7",
      "name": "Sticky Note45",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        820,
        15800
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/accept_maintenance_by_mechanic",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"maintenance_id\": {{ $('Execute Workflow Trigger').item.json.end_request_id }}\n}",
        "options": {}
      },
      "id": "0e4084bc-e39c-4312-9340-e47de6820fe9",
      "name": "принятие заявки1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1120,
        15580
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/accept_maintenance_by_mechanic",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n   \"maintenance_id\": {{ $('Execute Workflow Trigger').item.json.end_request_id }}\n}",
        "options": {}
      },
      "id": "9809514c-e703-47c0-b48f-bafd290bd354",
      "name": "принятие заявки2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1960,
        540
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenances_by_car",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "car_id",
              "value": "={{ $json.id }}"
            },
            {
              "name": "start_date",
              "value": "={{ new Date(1970).toDateTime().format('yyyy-MM-dd') }}"
            },
            {
              "name": "end_date",
              "value": "={{ $today.plus(100, 'years').format('yyyy-MM-dd') }}"
            }
          ]
        },
        "options": {}
      },
      "id": "4c0fee08-06a3-4f2d-aeb6-dc799b2fa859",
      "name": "неисправности по авто1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1040,
        13600
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=technical.maintenance",
        "operation": "update",
        "customResourceId": "={{ $('номер выбранной заявки').item.json.TO_number }}",
        "fieldsToCreateOrUpdate": {
          "fields": [
            {
              "fieldName": "expected_completion_date",
              "fieldValue": "={{ $json.future_time }}"
            }
          ]
        }
      },
      "id": "d9b31983-0ee8-4f97-b076-bed12f8609ac",
      "name": "ожидаемое время ремонта1",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1920,
        14620
      ],
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const sourceNodeName = \"Execute Workflow Trigger\";\nconst inputData = $node[sourceNodeName].json;\n\nlet expectedTimeRaw = inputData.expected_time_maintenance || \"\";\nlet expectedTime = parseFloat(expectedTimeRaw.replace(/[^\\d.,]/g, \"\").replace(\",\", \".\"));\n\nif (isNaN(expectedTime)) {\n  throw new Error(\"Некорректное значение в поле 'expected_time_maintenance'\");\n}\n\nconst now = new Date();\nconst offsetInHours = 0; //\nconst CurrentTime = new Date(now.getTime() + offsetInHours * 60 * 60 * 1000);\n\nconst futureTime = new Date(CurrentTime.getTime() + expectedTime * 60 * 60 * 1000);\n\nconst formattedDate = futureTime.toISOString().replace(\"T\", \" \").slice(0, 19);\n\nreturn {\n  json: {\n    future_time: formattedDate,\n  }\n};\n"
      },
      "id": "e9ce18da-28d8-4189-aa08-6f85a9986160",
      "name": "получаем текущее время + ожидаемое время1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        14620
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "11c45e0d-196b-47f1-821e-bee57c9f070b",
              "leftValue": "={{ $json.hasField(\"message\") }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "2211966e-8604-47b2-b5e4-5b5f77b51742",
      "name": "Проверка типа входных данных",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -460,
        4900
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "adding_end_request_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "07aca4bc-7c9f-4dee-b71a-5867d70d6cb0",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.status }}",
                    "rightValue": "adding_maintenance_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "be3f3cb9-aaa1-4571-918b-1efef1ff8360",
      "name": "статус механика1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        140,
        1940
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "187ab827-75c5-46c3-907d-f409cd9b68c5",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "take_maintenance",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"TR_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b41dcf43-0ef9-4fda-ba0b-8fa0c4f7626e",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "={{ \"ER_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d34f98ab-15c5-4595-acc4-f1674738011f",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "yes_request_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dc7ccf7b-5a9c-4cba-9ce4-15317c35b2c2",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "no_request_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "458b6e10-1a53-4982-a430-36d2e0faa3a0",
                    "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
                    "rightValue": "back_request_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "1a99e947-dbe0-46ff-84eb-3309843cfa6f",
      "name": "выполнение заявки",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        120,
        15060
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы выбрали тип заявки ремонт",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Продолжить",
                    "additionalFields": {
                      "callback_data": "check_urgently_repair"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "create_repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "562b53cb-4be2-4948-b7ac-93366aa2b359",
      "name": "выбран ремонт",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1240,
        16220
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Выберите, какую заявку вы хотите создать",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Ремонт",
                    "additionalFields": {
                      "callback_data": "create_repair"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "ТО",
                    "additionalFields": {
                      "callback_data": "create_TO"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "del_maintenances"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "c0bb90af-a86b-4ec6-a9bf-35a2a62f9027",
      "name": "Ремонт или ТО3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1240,
        16420
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы выбрали тип заявки ТО",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Продолжить",
                    "additionalFields": {
                      "callback_data": "check_urgently_TO"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "create_repair_or_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "b98f9470-fea6-4a2e-a531-45d9aa5d9479",
      "name": "выбрано ТО",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1240,
        16600
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Заявка срочная?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Нет",
                    "additionalFields": {
                      "callback_data": "urgently_false"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "urgently_true"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "90c3e86e-e39c-4ae5-913e-3554015e2c7a",
      "name": "заявка срочная?",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1240,
        16780
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "create_repair",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "1e18f020-8337-43ae-9362-83f914950232",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "create_repair_or_TO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "6fa2b30c-c40e-44d1-aa6d-98e5173fb377",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "create_TO",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b3d61a1a-d0a4-4a9d-a3ef-2d8c91ff17e1",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "={{ \"check_urgently_\" }}",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "161a40ce-ef6f-476b-9722-6370958fe623",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "=urgently_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cd45db4d-4a3c-4f36-8472-06885de52db0",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "input_description",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "48802261-8561-4df8-9ba6-4c06696a7d90",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "check_photo",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "408d3c7f-d8cd-4d38-9d1c-63809d4ee779",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "input_number",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "02a74f54-fc0d-440e-9aa6-b8f5d6ac6440",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "yes_photo_maitenance",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "77ce5b85-b064-44bd-b310-5b829550c6cc",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "input_scheduled_date",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "728d426d-4bd1-4e29-8b00-a3a54e61018f",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "confirm_maintenance",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2bbc7915-71c0-49e8-95ac-bc2b56af5be8",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "create_maintenance",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "dcc644da-cec7-40d4-854c-5c3dce71058b",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "cancel_create_maintenance",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "3ad2eeba-1510-4a05-a224-5d0e59dcb11c",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "cancelled_create_mainenance",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "0156689f-e8ae-4860-ab7b-5ff8d95c93c6",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -220,
        17300
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "mechanic_template": "={{\n{\n  \"car_id\": \"\",\n  \"description\": \"\",\n  \"hours\": \"0\",\n  \"tech_maintenance\": false,\n  \"cost\": \"1\",\n  \"employee_id\": $('Execute Workflow Trigger').item.json.odoo_id,\n  \"urgently\": \"true\",\n  \"photo\": \"\",\n  \"scheduled_date\":\"\"\n}\n}}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "4e2cc427-2701-4017-8f74-83fdfc3d5155",
      "name": "обновляем",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1500,
        16220
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "mechanic_template": "={{\n{\n  \"car_id\": \"\",\n  \"description\": \"\",\n  \"hours\": \"0\",\n  \"tech_maintenance\": true,\n  \"cost\": \"1\",\n  \"employee_id\": $('Execute Workflow Trigger').item.json.odoo_id,\n  \"urgently\": \"true\",\n  \"photo\": \"\",\n  \"scheduled_date\":\"\"\n}\n}}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "72b84d7d-47a3-48bf-a1b4-186b28137696",
      "name": "обновляем1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1500,
        16600
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "status": "inputing_description"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "550169eb-3607-44e2-99b4-52e5a210852c",
      "name": "обновляем4",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1460,
        17360
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "mechanic_template": "={{ $json.data }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "5591a507-b470-4b8a-8c38-b1266c2c2d7e",
      "name": "обновляем2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1980,
        17000
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "mechanic_template": "={{ $json.data }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "54d3d9f0-5faa-4a4f-abd4-5cbfaf4302e8",
      "name": "обновляем3",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1980,
        17180
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "status": "inputing_number_car"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "5557b1c7-adff-485d-82b2-5a18e399c77c",
      "name": "обновляем6",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1480,
        17800
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "status": "inputing_scheduled_date"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "6c5da3e6-f4c8-4bcd-8ea9-d3f7619bb6f4",
      "name": "обновляем8",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1460,
        18260
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "var res = $('Execute Workflow Trigger').all()[0].json.mechanic_template;\nres['urgently'] = false;\nreturn {\"data\": res};"
      },
      "id": "633e1ff9-e801-4abd-8a47-7b655121dd45",
      "name": "задаём не срочную заявку",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        17000
      ]
    },
    {
      "parameters": {
        "jsCode": "var res = $('Execute Workflow Trigger').all()[0].json.mechanic_template;\nres['urgently'] = true;\nreturn {\"data\": res};"
      },
      "id": "3b8bd124-f717-457e-8e2a-c9e1cc2d4735",
      "name": "задаём срочную заявку",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        17180
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Заявка не срочная",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Продолжить",
                    "additionalFields": {
                      "callback_data": "input_description"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "={{ \"check_urgently_\" }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "e9186d40-d5ae-4523-89a4-7ee4af54c777",
      "name": "заявка не срочная",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1500,
        17000
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Заявка срочная",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Продолжить",
                    "additionalFields": {
                      "callback_data": "input_description"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "={{ \"check_urgently_\" }}"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "d2e0fb21-5eb9-4cb9-93f7-889d9031c523",
      "name": "заявка срочная",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1500,
        17180
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4e5ca828-1796-45ed-a88a-92c34b4fa209",
              "leftValue": "={{ $('Execute Workflow Trigger').item.json.callback_query.data }}",
              "rightValue": "urgently_false",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1200,
        17120
      ],
      "id": "e4379824-48aa-4e72-8573-9fd24c66b594",
      "name": "срочная/не срочная"
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Введите описание проблемы",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "5ceaf28d-2c1a-4ed9-8edd-87ff11107e1a",
      "name": "введите описание",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1200,
        17360
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы хотите прикрепить фото к заявке?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Нет",
                    "additionalFields": {
                      "callback_data": "input_number"
                    }
                  },
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "yes_photo_maitenance"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "c7ceeac3-fc32-46b6-89fa-24afdcf9b564",
      "name": "нужно ли фото?",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1200,
        17560
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Введите номер автомобиля в одном из удобных форматов: А 000 АА, А000АА, а000аа",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "ccf26237-c20b-49fc-81d2-4d975df3a53e",
      "name": "ввод номера авто",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1240,
        17800
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Введите запланированную дату в формате дд.мм.гггг. Например 01.01.2024",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "d6eade9f-b1f1-45cd-97d1-b66557817aa4",
      "name": "введите дату",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1220,
        18260
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Вы хотите создать заявку на ТО?\nАвтомобиль: {{ $('Ищем автомобиль по номеру1').item.json.number_car }}\nПроблема: {{ $('Switch').item.json.mechanic_template.description }}\nЗапланированная дата: {{ $('Switch').item.json.mechanic_template.scheduled_date }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Создать",
                    "additionalFields": {
                      "callback_data": "create_maintenance"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Отменить",
                    "additionalFields": {
                      "callback_data": "cancel_create_maintenance"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "999c58f0-4f87-4301-9371-0c994b7d9bc6",
      "name": "подтверждение заявки",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1840,
        18400
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "car_id",
              "value": "={{ $json.mechanic_template.car_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "647c139d-fa83-4da8-9681-a7b297596295",
      "name": "Ищем автомобиль по номеру1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1240,
        18520
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "93047ff3-f2a4-42f9-b260-fbc6b9f681b4",
              "leftValue": "={{ $('Switch').item.json.mechanic_template.tech_maintenance }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1520,
        18500
      ],
      "id": "d2b3837b-ab3a-4552-9ab7-6beb97965336",
      "name": "ТО/Ремонт"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/create_maintenance",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "car_id",
              "value": "={{ $json.mechanic_template.car_id }}"
            },
            {
              "name": "description",
              "value": "={{ $json.mechanic_template.description }}"
            },
            {
              "name": "employee_id",
              "value": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}"
            },
            {
              "name": "urgently",
              "value": "={{ $json.mechanic_template.urgently }}"
            },
            {
              "name": "tech_maintenance",
              "value": "={{ $json.mechanic_template.tech_maintenance }}"
            }
          ]
        },
        "options": {}
      },
      "id": "f097f0a9-3056-476c-a013-a401faf81573",
      "name": "создание заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1240,
        18800
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Вы хотите создать заявку на ремонт?\nАвтомобиль: {{ $('Ищем автомобиль по номеру1').item.json.number_car }}\nПроблема: {{ $('Switch').item.json.mechanic_template.description }}\nЗапланированная дата: {{ $('Switch').item.json.mechanic_template.scheduled_date }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Создать",
                    "additionalFields": {
                      "callback_data": "create_maintenance"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Отменить",
                    "additionalFields": {
                      "callback_data": "cancel_create_maintenance"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "50351c43-17ed-4df4-8617-da7c45c7bae3",
      "name": "подтверждение заявки1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1840,
        18620
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы уверены, что хотите отменить создание заявки?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Нет",
                    "additionalFields": {
                      "callback_data": "confirm_maintenance"
                    }
                  },
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "cancelled_create_mainenance"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "231b1112-79e4-4b98-b0f3-8b3bf75ab3a0",
      "name": "подтверждение отмены",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1240,
        19020
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы отменили создание заявки!",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "d91f6ced-aed6-425e-9e51-c8aeb0849a21",
      "name": "заявка отменена",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1240,
        19220
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы создали новую заявку!",
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "f7d2b09c-96e1-440a-8017-b05ae3638ce9",
      "name": "заявка создана",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2260,
        18840
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "status": "authorized"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "8c5de592-85a9-44bb-b6f2-127ddc44ac0f",
      "name": "обновляем10",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1440,
        17560
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Прикрепите фото проблемы",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "check_photo"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "40cb19a6-aeac-4d9d-bd40-355eb5475bf5",
      "name": "прикрепите фото",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        1220,
        18020
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "status": "adding_maintenance_photo",
            "last_message_text": "={{ $json.result.message_id }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "3aba7f94-73ff-405b-92a4-9e654bf4b96c",
      "name": "обновляем11",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1480,
        18020
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f0f23d40-bacc-44a5-b0e0-9ac277e7be4b",
              "leftValue": "={{ $('Switch').item.json.mechanic_template.photo }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1760,
        18820
      ],
      "id": "9bc12e9e-a77e-425b-a33a-96d83f02a3b6",
      "name": "есть ли фото?"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/add_breakage_photo",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n    \"maintenance_id\": {{ $json.id }},\n    \"image\": \"{{ $('Switch').item.json.mechanic_template.photo }}\"\n}",
        "options": {}
      },
      "id": "9bab2f9a-740a-4ab8-a16f-2759405b6b86",
      "name": "загрузка фото неисправности",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2020,
        18780
      ]
    },
    {
      "parameters": {
        "content": "## Создание заявки",
        "height": 3440,
        "width": 1080
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1100,
        16120
      ],
      "id": "865f7fa2-8b5b-45a5-8424-14b6b4d31ecb",
      "name": "Sticky Note39"
    },
    {
      "parameters": {
        "resource": "custom",
        "customResource": "=technical.maintenance",
        "operation": "update",
        "customResourceId": "={{ $json.id }}",
        "fieldsToCreateOrUpdate": {
          "fields": [
            {
              "fieldName": "date",
              "fieldValue": "={{ new Date($('Switch').item.json.mechanic_template.scheduled_date.split('.').reverse().join('-')).toISOString().split('T')[0] }}\n"
            }
          ]
        }
      },
      "id": "437d8993-457e-4f52-a35e-c12820d9c9ba",
      "name": "ожидаемое время ремонта2",
      "type": "n8n-nodes-base.odoo",
      "typeVersion": 1,
      "position": [
        1500,
        18800
      ],
      "credentials": {
        "odooApi": {
          "id": "8fI2woAI3HZ7dHDv",
          "name": "Odoo production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.from.id }}",
            "mechanic_template": "={{ $json.data }}",
            "status": "authorized"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "c2de2e44-4a82-44c3-b231-1cdfc7f92508",
      "name": "обновляем5",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        4420,
        3040
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "=Автомобиль с номером <b>{{ $('Execute Workflow Trigger').item.json.message.text }}</b> не найден!\nВведите номер заново в любом удобном формате: А 000 АА, А000АА, а000аа",
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "f43d600b-250c-449e-a1a2-33e5ebf76ab6",
      "name": "Автомобиль отсутствует",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4480,
        3620
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\n\nvar data = $('Execute Workflow Trigger').all()[0].json;\nvar number = data.message.text;\n\nconst cleanedNumber = number.replace(/\\s+/g, '').toUpperCase(); //убираем пробелы и приводим к верхнему регистру\nconst withSpaces = cleanedNumber[0] + ' ' + cleanedNumber.slice(1, 4) + ' ' + cleanedNumber.slice(4); //добавляем пробелы\nreturn {\"number\": withSpaces};"
      },
      "id": "7889adb7-5e79-4574-bd61-d22a861a2795",
      "name": "форматируем номер",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3880,
        3440
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_number",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "number_car",
              "value": "={{ $json.number }}"
            }
          ]
        },
        "options": {}
      },
      "id": "50d38e41-f3b1-40f9-a6ab-96fbaa577556",
      "name": "Ищем автомобиль по номеру",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        4140,
        3440
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "=Вы ввели номер автомобиля: <b>{{ $json.number_car }}</b>",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Далее",
                    "additionalFields": {
                      "callback_data": "input_scheduled_date"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "input_number"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "ab6d458b-9294-43dd-8024-4dc51bcdffbe",
      "name": "проверка правильности номера",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4480,
        3380
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.from.id }}",
            "mechanic_template": "={{ $json.data }}",
            "status": "authorized"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "08b82164-c4e4-415a-946a-70724353f75b",
      "name": "обновляем7",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        5020,
        3380
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const isValidFullDate = (dateString) => {\n    const regex = /^(0[1-9]|[12][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.(\\d{4})$/;\n    if (!regex.test(dateString)) return false;\n\n    const [day, month, year] = dateString.split('.').map(Number);\n    const date = new Date(year, month - 1, day);\n    \n    return date.getFullYear() === year && date.getMonth() === month - 1 && date.getDate() === day;\n};\n\nreturn {\"res\": isValidFullDate($('Execute Workflow Trigger').all()[0].json.message.text)}"
      },
      "id": "b99fc82a-e55c-40f1-8288-ed3c44bac1af",
      "name": "проверка",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4200,
        4080
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c7a4e683-cb95-468b-9a93-df03818cfb5c",
              "leftValue": "={{ $json.res }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "99567ecf-17d1-4990-a735-826216b3bf12",
      "name": "корректно?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        4420,
        4080
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "Дата введена неверно, попробуйте снова",
        "replyMarkup": "inlineKeyboard",
        "additionalFields": {
          "appendAttribution": false
        }
      },
      "id": "9e138544-c4d1-40b9-84e8-5076c4bce0ce",
      "name": "неверная дата",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4640,
        4220
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.message.chat.id }}",
        "text": "=Вы ввели запланированную дату: {{ $('Execute Workflow Trigger').all()[0].json.message.text; }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "=input_scheduled_date"
                    }
                  },
                  {
                    "text": "Далее",
                    "additionalFields": {
                      "callback_data": "confirm_maintenance"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "46ce4dec-78e4-44f1-9199-853db7da59d9",
      "name": "вы ввели дату",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        4560,
        3900
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "var res = $('Execute Workflow Trigger').all()[0].json.mechanic_template;\nres[\"scheduled_date\"] = $('Execute Workflow Trigger').all()[0].json.message.text;\nreturn {\"data\": res};"
      },
      "id": "9d921630-4fef-4514-8e4a-234faa7780e3",
      "name": "задаём дату",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4780,
        3900
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.from.id }}",
            "mechanic_template": "={{ $json.data }}",
            "status": "authorized"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "e24c04fd-01a0-412c-bd59-d1a0ae871771",
      "name": "обновляем9",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        5020,
        3900
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "text": "=Вы ввели проблему: {{ $json.message.text }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Продолжить",
                    "additionalFields": {
                      "callback_data": "check_photo"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "input_description"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "7594eee5-d7ec-4c83-887f-86c3f80cf078",
      "name": "подтверждение проблемы",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3840,
        3040
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "var res = $('Execute Workflow Trigger').all()[0].json.mechanic_template;\nres['description'] = $('Execute Workflow Trigger').all()[0].json.message.text;\nreturn {\"data\": res};"
      },
      "id": "ac7b4ebd-6994-4889-b666-dcfabf925f43",
      "name": "задаём проблему",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4120,
        3040
      ]
    },
    {
      "parameters": {
        "jsCode": "var res = $('Execute Workflow Trigger').all()[0].json.mechanic_template;\nres['car_id'] = $('Ищем автомобиль по номеру').all()[0].json.id;\nreturn {\"data\": res};"
      },
      "id": "a17b89d3-c056-4f6e-aceb-4973cc0cfcb7",
      "name": "задаём id авто",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        4720,
        3380
      ]
    },
    {
      "parameters": {
        "content": "## Ввод проблемы",
        "height": 280,
        "width": 800,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3800,
        2960
      ],
      "id": "913a7d15-6591-4aae-a4f2-c28891de2952",
      "name": "Sticky Note40"
    },
    {
      "parameters": {
        "content": "## Ввод авто",
        "height": 460,
        "width": 1400,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3840,
        3300
      ],
      "id": "116f9a99-7011-411b-b29e-1d0e78d4c59e",
      "name": "Sticky Note42"
    },
    {
      "parameters": {
        "content": "## Ввод запланированной даты",
        "height": 500,
        "width": 1420,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        3940,
        3880
      ],
      "id": "fb083619-87f6-42ee-83f2-47c26a370a5f",
      "name": "Sticky Note46"
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "id": "6dcc4165-c692-4089-a1dc-ed9ce69ce86b",
      "name": "Extract from File",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1200,
        1020
      ]
    },
    {
      "parameters": {
        "resource": "file",
        "fileId": "={{ $('Execute Workflow Trigger').item.json.message.photo.reduce((largest, current) => current.file_size > largest.file_size ? current : largest).file_id; }}"
      },
      "id": "6ab554ab-5830-47f7-b4ab-fba3c91346ce",
      "name": "получение фото из тг",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        940,
        1020
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.message.from.id }}",
            "mechanic_template": "={{ $json.data }}",
            "status": "authorized",
            "last_message_text": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "3e827ec6-9db1-47af-a910-b1633e98f52e",
      "name": "обновляем12",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1680,
        1020
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Добавление фото к карточке тех.обслуживания",
        "height": 227.62478042711086,
        "width": 1608.6685143378268,
        "color": 5
      },
      "id": "31967fc9-7c57-4c88-9ec4-bd9f58a063ea",
      "name": "Sticky Note47",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        580,
        960
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.message.chat.id }}",
        "messageId": "={{ $json.last_message_text }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Прикрепите фото проблемы",
        "additionalFields": {}
      },
      "id": "bbeb8617-883e-4fc1-b83c-e2faee4cb087",
      "name": "убираем кнопку \"назад\" у прикрепления фото1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        640,
        1020
      ],
      "alwaysOutputData": false,
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "var res = $('Execute Workflow Trigger').all()[0].json.mechanic_template;\nres['photo'] = $('Extract from File').all()[0].json.data;\nreturn {\"data\": res};"
      },
      "id": "2a2dcca3-8e31-4d57-8eb4-7fa47068e74f",
      "name": "задаём фото",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        1020
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.message.chat.id }}",
        "text": "=Вы добавили вложение",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Далее",
                    "additionalFields": {
                      "callback_data": "input_number"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "bd7c117c-c67d-4324-ab35-54747a010655",
      "name": "фото прикреплено",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1920,
        1020
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "mechanic_template": "={{ null }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "expected_time_maintenance",
              "displayName": "expected_time_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "assigned_locksmiths",
              "displayName": "assigned_locksmiths",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "array",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mechanic_template",
              "displayName": "mechanic_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "current_quarry_rounds",
              "displayName": "current_quarry_rounds",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "fbe2b519-b0d8-48fd-8a0a-0b40c9f2b63d",
      "name": "обновляем13",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2480,
        18840
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "update_id": 100642907,
          "callback_query": {
            "id": "2800172965232104042",
            "from": {
              "id": 7094417017,
              "is_bot": false,
              "first_name": "Сергей",
              "last_name": "Косолапов",
              "username": "sergio_kf",
              "language_code": "ru"
            },
            "message": {
              "message_id": 34507,
              "from": {
                "id": 7063451965,
                "is_bot": true,
                "first_name": "Everest n8n",
                "username": "myn8nbotbot"
              },
              "chat": {
                "id": 7094417017,
                "first_name": "Сергей",
                "last_name": "Косолапов",
                "username": "sergio_kf",
                "type": "private"
              },
              "date": 1735207659,
              "edit_date": 1735207691,
              "text": "Выберите за какой период хотите проверить документы:",
              "reply_markup": {
                "inline_keyboard": [
                  [
                    {
                      "text": "1-7 дней",
                      "callback_data": "7_days"
                    }
                  ],
                  [
                    {
                      "text": "8-14 дней",
                      "callback_data": "14_days"
                    }
                  ],
                  [
                    {
                      "text": "15-21 день",
                      "callback_data": "21_days"
                    }
                  ],
                  [
                    {
                      "text": "Назад",
                      "callback_data": "delete_date"
                    }
                  ]
                ]
              }
            },
            "chat_instance": "-3242410479096206559",
            "data": "14_days"
          },
          "tg_id": "7094417017",
          "odoo_id": 22,
          "status": "delivery_cost_per_cubic_metre",
          "only_mech": false,
          "mech_photo": false,
          "end_request_id": null,
          "materials_photo": false,
          "end_request_hours": null,
          "car_id_while_inputing": 24,
          "fuel_liters": null,
          "weight_measure": "50 м3 ",
          "logist_alert_text": "123",
          "logist_recipient_name": "Alexander.Simonov",
          "transportation_for_certificate": null,
          "count_weight_photo": null,
          "count_weight_photo_sent": null,
          "current_quarry_hours": null,
          "end_round_message_id": 29371,
          "last_message_text": "{\"ok\":true,\"result\":{\"message_id\":34147,\"from\":{\"id\":7063451965,\"is_bot\":true,\"first_name\":\"Everest n8n\",\"username\":\"myn8nbotbot\"},\"chat\":{\"id\":7094417017,\"first_name\":\"Сергей\",\"last_name\":\"Косолапов\",\"username\":\"sergio_kf\",\"type\":\"private\"},\"date\":1734967924,\"edit_date\":1734968243,\"text\":\"Введите ставку за кубометр\",\"entities\":[{\"offset\":8,\"length\":18,\"type\":\"bold\"}],\"reply_markup\":{\"inline_keyboard\":[[{\"text\":\"Назад\",\"callback_data\":\"inpute_rate\"}]]}}}",
          "logist_notifications": false,
          "creating_transportation": null,
          "round_active_msg_id": 29371,
          "no_taking_shift_logist_notify": false,
          "logist_template": {
            "quarry.quarry": "Карьер Ключевое",
            "transportation.place": "Торг. порт",
            "transportation.rates": "ООО \"Компания\"",
            "transportation.material": "Щебень",
            "measure": "м3",
            "weight": "50",
            "cost_per_cubic_metre": "5",
            "cost_per_tonne": "0",
            "delivery_cost_per_cubic_metre": "0",
            "delivery_cost_per_tonne": "0",
            "round_rate": "0",
            "comment": "",
            "cars": [],
            "date": ""
          },
          "current_maintenance": 732,
          "expected_time_maintenance": null,
          "assigned_locksmiths": [
            {
              "id": 42
            }
          ],
          "mechanic_template": {
            "car_id": "",
            "description": "",
            "hours": "0",
            "tech_maintenance": false,
            "cost": "1",
            "employee_id": 22,
            "urgently": "true",
            "photo": "",
            "scheduled_date": ""
          },
          "current_quarry_rounds": null,
          "fuel_company": null,
          "cookie": "session_id=b6a17cf4ae56be2b6c4aebcff92463a59462070c; Expires=Thu, 25 Dec 2025 06:11:46 GMT; Max-Age=604800; HttpOnly; Path=/"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Vladivostok"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-08-26T14:50:05.418Z",
      "updatedAt": "2024-08-26T14:50:05.418Z",
      "id": "6aWMzdObOVIXsJ6y",
      "name": "production"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-01-20T16:37:30.114Z",
  "versionId": "f802b0e9-6d81-4a2e-8623-c5283bf032ea"
}