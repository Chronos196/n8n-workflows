{
  "active": false,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "следующая перевозка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Limit": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          },
          {
            "node": "перевозки+имена",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получение перевозок": {
      "main": [
        [
          {
            "node": "Сортировка перевозок и работ в карьере1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Сортировка перевозок и работ в карьере1": {
      "main": [
        [
          {
            "node": "Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем кнопки": {
      "main": [
        [
          {
            "node": "получение перевозок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items3": {
      "main": [
        [
          {
            "node": "перевозки+имена",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "получаем рейсы в перевозке1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates1": {
      "main": [
        [
          {
            "node": "склеить имена водителей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склеить имена водителей": {
      "main": [
        [
          {
            "node": "Replace Me3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me3": {
      "main": [
        [
          {
            "node": "Loop Over Items3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "перевозки+имена": {
      "main": [
        [
          {
            "node": "в единое сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "в единое сообщение": {
      "main": [
        [
          {
            "node": "первой работа или перевозка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первой работа или перевозка": {
      "main": [
        [
          {
            "node": "работа в карьере",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "первая перевозка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "работа в карьере": {
      "main": [
        [
          {
            "node": "айди последнего сообщения2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первая перевозка": {
      "main": [
        [
          {
            "node": "айди последнего сообщения2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "убираем кнопки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "ошибки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ошибки": {
      "main": [
        [
          {
            "node": "Нет перевозки или работы в карьере",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли неисправности1": {
      "main": [
        [
          {
            "node": "форматируем время в удобный формат1",
            "type": "main",
            "index": 0
          },
          {
            "node": "объединяем время и текст1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "форматируем время в удобный формат1": {
      "main": [
        [
          {
            "node": "объединяем время и текст1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "объединяем время и текст1": {
      "main": [
        [
          {
            "node": "Добавляем теги",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Добавляем теги": {
      "main": [
        [
          {
            "node": "Разделяем по статусам",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Разделяем по статусам": {
      "main": [
        [
          {
            "node": "добавим перевод на новую строку",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "добавим перевод на новую строку1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "добавим перевод на новую строку2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавим перевод на новую строку": {
      "main": [
        [
          {
            "node": "к выполнению2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "к выполнению2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавим перевод на новую строку1": {
      "main": [
        [
          {
            "node": "в работе",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавим перевод на новую строку2": {
      "main": [
        [
          {
            "node": "требуется проверка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "в работе": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "требуется проверка": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "в один текст объединяем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "в один текст объединяем": {
      "main": [
        [
          {
            "node": "получаем все заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Проверка есть ли такие заявки": {
      "main": [
        [
          {
            "node": "Вывод с кнопкой \"завершить заявку\"",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Вывод с кнопкой \"назад\"",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "меняем статус - ввод текста запроса": {
      "main": [
        [
          {
            "node": "описание заявки для работы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "возвращаем статус5": {
      "main": [
        [
          {
            "node": "получаем авто по водителю2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сохраняем текст сообщения1": {
      "main": [
        [
          {
            "node": "отменить рейс?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "прошлое сообщение3": {
      "main": [
        [
          {
            "node": "статус=ввод комментария",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "недели": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "отделяем недели",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получаем график по водителю",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "по возрастанию": {
      "main": [
        [
          {
            "node": "создаём строку1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть данные?": {
      "main": [
        [
          {
            "node": "по возрастанию",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "создаём строку2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "объединяем1": {
      "main": [
        [
          {
            "node": "Добавляем недели",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создаём строку1": {
      "main": [
        [
          {
            "node": "объединяем1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создаём строку2": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Добавляем недели": {
      "main": [
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отделяем недели": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявки по авто": {
      "main": [
        [
          {
            "node": "возвращаем статус5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "меняем статус - ввод текста запроса",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "отмена рейсов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "отмена рейсов": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прошлое сообщение1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прошлое сообщение3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "график",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сегодняшняя дата": {
      "main": [
        [
          {
            "node": "какой сегодня день недели?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "какой сегодня день недели?": {
      "main": [
        [
          {
            "node": "конец недели",
            "type": "main",
            "index": 0
          },
          {
            "node": "начало недели",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "конец недели": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "начало недели": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "объединяем": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создаём строку": {
      "main": [
        [
          {
            "node": "объединяем",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "получаем график по водителю1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "по возрастанию1": {
      "main": [
        [
          {
            "node": "создаём строку",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть данные?1": {
      "main": [
        [
          {
            "node": "по возрастанию1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "график": {
      "main": [
        [
          {
            "node": "недели",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "сегодняшняя дата",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "инлайн кнопки для статистики",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing1": {
      "main": [
        [
          {
            "node": "получаем рейсы по водителю",
            "type": "main",
            "index": 0
          },
          {
            "node": "получаем работы по водителю",
            "type": "main",
            "index": 0
          },
          {
            "node": "получаем зарплату по водителю",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "No Operation, do nothing": {
      "main": [
        [
          {
            "node": "получаем рейсы по водителю1",
            "type": "main",
            "index": 0
          },
          {
            "node": "получаем работы по водителю1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "считаем по дням кол-во рейсов и заработок": {
      "main": [
        [
          {
            "node": "соединяем рейсы и работы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "считаем часы и заработок": {
      "main": [
        [
          {
            "node": "соединяем рейсы и работы",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "соединяем рейсы и работы": {
      "main": [
        [
          {
            "node": "сортируем все данные, считаем итоги, преобразуем в сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сортируем все данные, считаем итоги, преобразуем в сообщение": {
      "main": [
        [
          {
            "node": "вывод недельной статистики",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Объединение рейсов в один файл1": {
      "main": [
        [
          {
            "node": "обрабатываем рейсы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "преобразуем премии/штрафы": {
      "main": [
        [
          {
            "node": "добавляем еще премии/штрафы",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "обрабатываем рейсы": {
      "main": [
        [
          {
            "node": "рейсы+работы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "обрабатываем работы": {
      "main": [
        [
          {
            "node": "рейсы+работы",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "рейсы+работы": {
      "main": [
        [
          {
            "node": "добавляем еще премии/штрафы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "добавляем еще премии/штрафы": {
      "main": [
        [
          {
            "node": "формируем месячную статистику и преобразуем в сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "формируем месячную статистику и преобразуем в сообщение": {
      "main": [
        [
          {
            "node": "разделение запроса и реплай и инлайн",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделение запроса и реплай и инлайн": {
      "main": [
        [
          {
            "node": "выводим месячную статистику",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "выводим месячную статистику1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "инлайн кнопки для статистики": {
      "main": [
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "проверка наличия взвешивания",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем номер авто": {
      "main": [
        [
          {
            "node": "получаем перевозки из очереди авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем перевозки из очереди авто": {
      "main": [
        [
          {
            "node": "получаем рейсы в перевозке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем рейсы в перевозке": {
      "main": [
        [
          {
            "node": "разделяем рейсы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделяем рейсы": {
      "main": [
        [
          {
            "node": "берем выполняющийся рейс нужного авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "берем выполняющийся рейс нужного авто": {
      "main": [
        [
          {
            "node": "есть ли запись с весов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли запись с весов": {
      "main": [
        [
          {
            "node": "записываем объём материала",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "меняем callback на ввод объема",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "меняем callback на ввод объема": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "работа в карьере?": {
      "main": [
        [
          {
            "node": "Завершить для работы",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Завершить текущую перевозку?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Завершить текущую перевозку?": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Завершить для работы": {
      "main": [
        [
          {
            "node": "сохраняем текст сообщения",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "следующая перевозка": {
      "main": [
        [
          {
            "node": "работа в карьере?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прошлое сообщение",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "получаем авто по водителю1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "прошлое сообщение2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "заявки по авто",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "записываем объём материала": {
      "main": [
        [
          {
            "node": "подтверждение взвешивания",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "данные авто": {
      "main": [
        [
          {
            "node": "координаты",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "координаты": {
      "main": [
        [
          {
            "node": "координаты1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "тип ошибки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "тип ошибки": {
      "main": [
        [
          {
            "node": "Нет координат",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "проверка наличия взвешивания": {
      "main": [
        [
          {
            "node": "получаем номер авто",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "координаты1": {
      "main": [
        [
          {
            "node": "ответ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем авто по водителю1": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем рейсы в перевозке1": {
      "main": [
        [
          {
            "node": "разделяем рейсы3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделяем рейсы3": {
      "main": [
        [
          {
            "node": "убираем рейсы пользователя",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем рейсы пользователя": {
      "main": [
        [
          {
            "node": "убираем рейсы без водителей",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "убираем рейсы без водителей": {
      "main": [
        [
          {
            "node": "Remove Duplicates1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем авто по водителю2": {
      "main": [
        [
          {
            "node": "получаем все заявки1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем все заявки1": {
      "main": [
        [
          {
            "node": "заявки со статусом != Готово1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявки со статусом != Готово1": {
      "main": [
        [
          {
            "node": "есть ли неисправности1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем все заявки": {
      "main": [
        [
          {
            "node": "заявки со статусом В работе",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "заявки со статусом В работе": {
      "main": [
        [
          {
            "node": "Проверка есть ли такие заявки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем график по водителю": {
      "main": [
        [
          {
            "node": "есть данные?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "если нет графика убираем ошибку и отдаем пустую data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "если нет графика убираем ошибку и отдаем пустую data": {
      "main": [
        [
          {
            "node": "есть данные?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем график по водителю1": {
      "main": [
        [
          {
            "node": "есть данные?1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "если нет графика убираем ошибку и отдаем пустую data1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "если нет графика убираем ошибку и отдаем пустую data1": {
      "main": [
        [
          {
            "node": "есть данные?1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем рейсы по водителю": {
      "main": [
        [
          {
            "node": "разделяем рейсы1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделяем рейсы1": {
      "main": [
        [
          {
            "node": "завершенные рейсы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "завершенные рейсы": {
      "main": [
        [
          {
            "node": "Объединение рейсов в один файл1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем работы по водителю": {
      "main": [
        [
          {
            "node": "обрабатываем работы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем зарплату по водителю": {
      "main": [
        [
          {
            "node": "преобразуем премии/штрафы",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем рейсы по водителю1": {
      "main": [
        [
          {
            "node": "разделяем рейсы2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "разделяем рейсы2": {
      "main": [
        [
          {
            "node": "завершенные рейсы1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "завершенные рейсы1": {
      "main": [
        [
          {
            "node": "Объединение рейсов в один файл",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получаем работы по водителю1": {
      "main": [
        [
          {
            "node": "считаем часы и заработок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Объединение рейсов в один файл": {
      "main": [
        [
          {
            "node": "считаем по дням кол-во рейсов и заработок",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "данные авто",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Switch1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ищем автомобиль с таким же сотрудником": {
      "main": [
        [
          {
            "node": "получение перевозок1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Сортировка перевозок и работ в карьере": {
      "main": [
        [
          {
            "node": "есть ли перевозка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "есть ли перевозка": {
      "main": [
        [
          {
            "node": "создаём динамически инлайн кнопки",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "нет в очереди",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создаём динамически инлайн кнопки": {
      "main": [
        [
          {
            "node": "отправляем сообщение ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "текст сообщения сохраним": {
      "main": [
        [
          {
            "node": "ищем автомобиль с таким же сотрудником",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "создаём прошлое сообщение": {
      "main": [
        [
          {
            "node": "возвращаем сообщение",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "данные перевозки": {
      "main": [
        [
          {
            "node": "сама перевозка",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "склеить имена водителей1": {
      "main": [
        [
          {
            "node": "перевозки+имена1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Вывод перевозок на день, работа первой": {
      "main": [
        [
          {
            "node": "айди последнего сообщения1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Выводим информацию о перевозке": {
      "main": [
        [
          {
            "node": "айди последнего сообщения1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "склеить имена водителей1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получение рейсов": {
      "main": [
        [
          {
            "node": "рейсы в перевозке1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "рейсы в перевозке1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "рейсы в перевозке1": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "получение рейсов",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "сама перевозка": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          },
          {
            "node": "перевозки+имена1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "перевозки+имена1": {
      "main": [
        [
          {
            "node": "в единое сообщение1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "получение перевозок1": {
      "main": [
        [
          {
            "node": "Сортировка перевозок и работ в карьере",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch1": {
      "main": [
        [
          {
            "node": "текст сообщения сохраним",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "создаём прошлое сообщение",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "данные перевозки",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "в единое сообщение1": {
      "main": [
        [
          {
            "node": "первой работа или перевозка1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "первой работа или перевозка1": {
      "main": [
        [
          {
            "node": "Вывод перевозок на день, работа первой",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Выводим информацию о перевозке",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-25T16:07:31.737Z",
  "id": "3rrkoGcEong0P5sj",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "old_prod_driver_inline_2",
  "nodes": [
    {
      "parameters": {},
      "id": "12e68823-ac3b-463a-99ac-b3b919e3ce63",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        -180,
        944.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы уверены, что хотите приступить к следующей перевозке?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "next_transportation"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "no_transfer_transportation"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "dc7f1394-06a5-43b1-b6a6-0ed28f74552f",
      "name": "Завершить текущую перевозку?",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        600,
        744.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "last_message_text": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.text }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "f682a4a7-01d8-48d8-a736-8d846858168a",
      "name": "сохраняем текст сообщения",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        820,
        684.9384888466118
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $json.callback_query.from.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $json.last_message_text }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Начать рейс",
                    "additionalFields": {
                      "callback_data": "pick"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "8349a16c-eba1-47d6-8421-dbc32ab22420",
      "name": "прошлое сообщение",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        500,
        864.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {},
      "id": "d6af7440-3262-4c01-8726-e778ef8f63bd",
      "name": "Limit",
      "type": "n8n-nodes-base.limit",
      "typeVersion": 1,
      "position": [
        1680,
        924.9384888466118
      ]
    },
    {
      "parameters": {
        "content": "## Вывод текущей перевозки",
        "height": 432.36801840109257,
        "width": 2587.9615410901815,
        "color": 6
      },
      "id": "2960afad-301a-4108-9d09-084d237646f6",
      "name": "Sticky Note49",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1140,
        784.9384888466118
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/transportations_by_car",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number_car\": {{'\"'+ $('получаем авто по водителю1').item.json.number_car +'\"'}}\n}",
        "options": {}
      },
      "id": "10e51cf0-d8de-42cb-89c8-c51ac1d39ca0",
      "name": "получение перевозок",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1180,
        944.9384888466118
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nlet allItems = [];\n\nfor (let i = 0; i < items.length; i++) {\n    const { transportations, full_quarry_work } = items[i].json;\n\n    if (transportations && Array.isArray(transportations)) {\n        allItems = allItems.concat(transportations);\n    }\n    if (full_quarry_work && Array.isArray(full_quarry_work)) {\n        allItems = allItems.concat(full_quarry_work);\n    }\n}\n\nallItems = allItems.filter(item => item.hasOwnProperty('sequence'));\nallItems.sort((a, b) => a.sequence - b.sequence);\n\nreturn allItems.map(item => ({ json: item }));\n"
      },
      "id": "f1b72d94-87b0-43bc-93cf-e0ff257714b0",
      "name": "Сортировка перевозок и работ в карьере1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        924.9384888466118
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.tg_id }}",
            "end_round_message_id": "={{ $json.result.message_id }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "f31d0cde-261f-4d67-b862-d08c339be73c",
      "name": "айди последнего сообщения2",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        3400,
        924.9384888466118
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Кнопка следующей перевозки",
        "height": 918.5981928669721,
        "width": 618.4840105643988,
        "color": 6
      },
      "id": "df6ec6b3-b26f-4876-8910-8b8d622cd2f0",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        460
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.tg_id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "text": "Вы завершили перевозку. Ваша следующая перевозка:",
        "additionalFields": {}
      },
      "id": "a9e06ffe-9531-47a9-a7df-59307de7fbce",
      "name": "убираем кнопки",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        900,
        1024.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "91276b7b-02bf-4046-82e9-dce033b9af5b",
      "name": "Loop Over Items3",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1940,
        1004.9384888466118
      ]
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "driver[1]",
        "options": {}
      },
      "id": "bf210c47-52f8-4c5b-8f42-2bdb995e12bb",
      "name": "Remove Duplicates1",
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 1.1,
      "position": [
        2380,
        1024.9384888466118
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "driver[1]",
              "separateBy": "\n"
            }
          ]
        },
        "options": {
          "continueIfFieldNotFound": true
        }
      },
      "id": "d50c4cc6-c2d2-46e2-8682-91a9b9fde5f2",
      "name": "склеить имена водителей",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2560,
        1024.9384888466118
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {},
      "id": "3f36da5d-26f7-4399-afa0-489a15b2de91",
      "name": "Replace Me3",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2800,
        1024.9384888466118
      ]
    },
    {
      "parameters": {
        "content": "## Вывод водителей с той же перевозкой",
        "height": 357.7855900491362,
        "width": 1115.923707913178,
        "color": 6
      },
      "id": "252528be-d2aa-4bc5-b4a1-bbfc2ded10bb",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1820,
        844.9384888466118
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "628e2077-e152-485e-9c6e-992984b9db46",
      "name": "перевозки+имена",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2560,
        884.9384888466118
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "ab898071-c183-48b0-b7b8-9355eebe5abd",
              "leftValue": "={{ $('перевозки+имена').item.json.quarry_works[0] }}",
              "rightValue": "<i><b>1.</b> Работа ",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7f130fcf-7bf3-4a30-a714-440ee9ea7764",
      "name": "первой работа или перевозка",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2940,
        884.9384888466118
      ]
    },
    {
      "parameters": {
        "jsCode": "let combinedMessages = \"\";\n\nlet index = 1;\nfor (const item of $input.all()) {\n  const data = item.json;\n\n  const isQuarryWork = data.quarry && data.quarry.length > 1;\n\n  let message = \"\";\n\n  if (isQuarryWork) {\n    const quarry = data.quarry[1];\n    const requiredHours = data.required_hours || 0;\n    const comment = data.comment;\n\n    message = `Работа в карьере - <b>${quarry}</b>`;\n    if (data.end_condition === \"По часам\") {\n      message += `\\nНеобходимое количество часов - <b>${requiredHours}</b>`;\n    }\n    if (comment !== false) {\n      message += `\\nКомментарий - <i>${comment}</i>`;\n    }\n    message += `\\n\\n`;\n  } else {\n    const sender = data.sender && data.sender.length > 1 ? data.sender[1] : \"\";\n    const partner = data.partner && data.partner.length > 1 ? data.partner[1] : \"\";\n    const placeFrom = data.place_from && data.place_from.length > 1 ? data.place_from[1] : \"\";\n    const placeTo = data.place_to && data.place_to.length > 1 ? data.place_to[1] : \"\";\n    const material = data.material[1].replace(/\\s*\\(.*?\\)\\s*/g, \"\");\n    const comment = data.comment;\n    const endCondition = data.end_condition;\n    const requiredCubicMetre = data.required_cubic_metre|| 0;\n    const requiredTon = data.required_ton|| 0;\n\n    let route = placeFrom && placeTo ? `${placeFrom}-${placeTo}` : \"\";\n\n    message = ``;\n    \n    if (sender) message += ` Отправитель - <b>${sender}</b>`;\n    if (partner) message += `\\nПолучатель - <b>${partner}</b>`;\n    if (route) message += `\\nМаршрут - <b>${route}</b>`;\n    if (material) message += `\\nМатериал - <b>${material}</b>`;\n    \n    if (comment !== false) {\n      message += `\\nКомментарий - <i>${comment}</i>`;\n    }\n\n    if (endCondition === \"По перевезенным кубометрам\" && requiredCubicMetre > 0) {\n      message += `\\nТребуемое количество кубометров по перевозке - <b>${requiredCubicMetre}</b>`;\n    }\n\n    if (endCondition === \"По перевезенным тоннам\" && requiredTon > 0) {\n      message += `\\nТребуемое количество тонн по перевозке - <b>${requiredTon}</b>`;\n    }\n\n    message += (item.json.concatenated_driver1 ? \"\\n\\nВодители, выполняющие перевозку с вами:\\n\" + item.json.concatenated_driver1 : \"\");\n\n    message += `\\n\\n`;\n  }\n\n  if (index === 1) {\n    message = `<i>${message.trim()}</i>\\n\\n`;\n  }\n\n  combinedMessages += message;\n  index++;\n}\n\nreturn [{ json: { combinedMessages: combinedMessages.trim() } }];\n"
      },
      "id": "529e24e9-9572-462a-9a84-f255008ea71a",
      "name": "в единое сообщение",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2760,
        884.9384888466118
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "text": "={{ $json.combinedMessages }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к работе в карьере",
                    "additionalFields": {
                      "callback_data": "accept_quarry"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "cc00fcaf-749e-4aad-8cb9-c9688e4b582c",
      "name": "работа в карьере",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3200,
        804.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.tg_id }}",
        "text": "={{ $json.combinedMessages }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Начать рейс",
                    "additionalFields": {
                      "callback_data": "pick"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "5e6cf988-abcb-408b-9d55-7a3fdeb8dd22",
      "name": "первая перевозка",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        3200,
        984.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://everest.lamart.site/transfer_queue_transportation",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "car_id",
              "value": "={{ $json.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "e432b410-f4c2-46cc-a9ec-824cb112ed97",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        700,
        1024.9384888466118
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.error.message }}",
                    "rightValue": "404 - \"{\\\"error\\\": \\\"Car queue not found or no has elements\\\"}\"",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "0af4e3ad-0b2a-4209-9d1b-1a1ebc9cfece",
      "name": "ошибки",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        860,
        1204.9384888466118
      ]
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "=В Odoo для авто {{ $('поиск авто').item.json.number_car }} не найдена перевозка или работа в карьере.\n\nОбратитесь к диспетчеру или логисту"
        }
      },
      "id": "ef7b6a90-6f3c-46ef-bb7f-3e2dca03f08a",
      "name": "Нет перевозки или работы в карьере",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1020,
        1204.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "a0512750-cabb-473b-a650-4e13eb2f16bb",
              "leftValue": "={{ $json.id }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "9838a7bf-1fe3-4bfc-8f56-d40bc8b4c8d8",
      "name": "есть ли неисправности1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1111,
        1804.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.create_date }}",
        "format": "custom",
        "customFormat": "dd.MM.yyyy HH:mm",
        "options": {
          "timezone": true
        }
      },
      "id": "d9f8f715-fa48-48a0-92f9-e91d567277a1",
      "name": "форматируем время в удобный формат1",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1391,
        1604.9384888466118
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "590824e9-128b-4345-b409-61694da83b8e",
      "name": "объединяем время и текст1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        1631,
        1704.9384888466118
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "988c91e8-36b4-4f3f-9131-b8cf97b1dd63",
              "name": "=date_description",
              "value": "={{ $('объединяем время и текст1').item.json[\"formattedDate\"] }} - <b>{{ $('объединяем время и текст1').item.json[\"description_of_maintenance\"] }}</b>",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "c764f097-d352-4dda-9b3c-773c88ea596f",
      "name": "Добавляем теги",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        1856,
        1704.9384888466118
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "К выполнению",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "84c7a41e-05e5-4497-b42a-1e5102906729",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "В работе",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict"
                },
                "conditions": [
                  {
                    "id": "dea7aa17-5f44-45d5-a497-9cea75e85820",
                    "leftValue": "={{ $json.status }}",
                    "rightValue": "Требуется проверка",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "none"
        }
      },
      "id": "72fa8918-996d-4a76-9f20-75420e05f3c6",
      "name": "Разделяем по статусам",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        2116,
        1704.9384888466118
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "date_description",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "72ea386b-70b8-4785-a7b2-9167be9b3ef4",
      "name": "добавим перевод на новую строку",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2536,
        1484.9384888466118
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fee6eb4-9862-4619-a904-ede2a98a73ae",
              "name": "concatenated_date_description",
              "value": "=<b>Можно взять в работу:</b>\n\n{{ $json.concatenated_date_description }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "9088c058-edb0-4724-b597-03f31bd4c871",
      "name": "к выполнению2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2756,
        1484.9384888466118
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "date_description",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "6adda362-89ad-44b6-8eb4-9dc3eab2113a",
      "name": "добавим перевод на новую строку1",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2616,
        1664.9384888466118
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "date_description",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "92ddb032-2aa9-48b7-960b-8f5d9a08e6c9",
      "name": "добавим перевод на новую строку2",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2616,
        1844.9384888466118
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fee6eb4-9862-4619-a904-ede2a98a73ae",
              "name": "concatenated_date_description",
              "value": "=<b>В работе:</b>\n\n{{ $json.concatenated_date_description }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "6c07f7f8-e8f6-4178-a576-4b7849614889",
      "name": "в работе",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2836,
        1664.9384888466118
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "0fee6eb4-9862-4619-a904-ede2a98a73ae",
              "name": "concatenated_date_description",
              "value": "=<b>Ожидают проверки механиком:</b>\n\n{{ $json.concatenated_date_description }}\n",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "73776273-1157-4e96-9ac5-806d86958b2c",
      "name": "требуется проверка",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.3,
      "position": [
        2836,
        1844.9384888466118
      ]
    },
    {
      "parameters": {},
      "id": "b3fe4323-3207-42d6-bd29-6aac0325e6fe",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3096,
        1624.9384888466118
      ]
    },
    {
      "parameters": {},
      "id": "f8386bd6-ff23-43ab-ad53-333817155e97",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3336,
        1684.9384888466118
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "concatenated_date_description",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "ec0b5814-3c86-4b5b-9116-31cc8ef8ec77",
      "name": "в один текст объединяем",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        3556,
        1684.9384888466118
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "230d2a2f-75dd-40a3-a8c7-0ba67887863f",
              "leftValue": "={{ $json.id }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "f0fc43ae-2a5c-4ae6-842e-fc7786c29233",
      "name": "Проверка есть ли такие заявки",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        3981,
        1684.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('в один текст объединяем').item.json.concatenated_concatenated_date_description }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Создать заявку",
                    "additionalFields": {
                      "callback_data": "create_to"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Взять заявку в работу",
                    "additionalFields": {
                      "callback_data": "take_to"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить заявку",
                    "additionalFields": {
                      "callback_data": "finish_to"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "ad59a1a4-bff4-42ca-87c5-853316877482",
      "name": "Вывод с кнопкой \"завершить заявку\"",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4261,
        1624.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Вывод всех заявок",
        "height": 774.298011427,
        "width": 3958.293696830338,
        "color": 6
      },
      "id": "736f3647-2c7b-43d9-8ae0-8215b4ebf389",
      "name": "Sticky Note28",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        1424.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('в один текст объединяем').item.json.concatenated_concatenated_date_description }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Создать заявку",
                    "additionalFields": {
                      "callback_data": "create_to"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Взять заявку в работу",
                    "additionalFields": {
                      "callback_data": "take_to"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "delete_TO"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "7178d86c-874b-4afa-8020-116f34ae6258",
      "name": "Вывод с кнопкой \"назад\"",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        4256,
        1864.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "odoo_id": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "status": "inputing_create_to"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "eef96e1c-8cf8-4e43-838b-2c05bfd14ee5",
      "name": "меняем статус - ввод текста запроса",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        756,
        2284.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
            "status": "authorized"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "2c12f588-0a65-49d7-81a8-e1f6da426a0b",
      "name": "возвращаем статус5",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        536,
        1804.9384888466118
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Создание заявки для работ по авто",
        "height": 186.2926857992457,
        "width": 472.9182352408684
      },
      "id": "900ddb76-5795-4442-b84e-10e9f8546fd6",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        700,
        2244.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Напишите <b>текстом</b> описание заявки для работы.",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "list_to"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "b1138deb-8236-4c05-b240-be749f095aaa",
      "name": "описание заявки для работы",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        996,
        2284.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.callback_query.from.id }}",
            "last_message_text": "={{ $json.callback_query.message.text }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "eff11535-5c1f-4d3f-952d-7c300e1b0ef5",
      "name": "сохраняем текст сообщения1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        960,
        2524.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $json.callback_query.from.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $json.last_message_text }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Навигатор",
                    "additionalFields": {
                      "callback_data": "navigator"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить рейс",
                    "additionalFields": {
                      "callback_data": "Finish"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Отменить рейс",
                    "additionalFields": {
                      "callback_data": "cancel_round"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "cca0c7cb-9a82-4d7b-9259-bdbdbcede2db",
      "name": "прошлое сообщение1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1140,
        2724.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы уверены, что хотите отменить текущий рейс?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "cancel_round_accept"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "cancel_round_back"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "dcefec81-103c-4164-94bb-a8387e1ef903",
      "name": "отменить рейс?",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1140,
        2524.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Отмена рейсов",
        "height": 625.9423518573242,
        "width": 940.0523646774368,
        "color": 6
      },
      "id": "92f6147d-5404-4862-a534-d533eaa09c33",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        580,
        2464.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $json.callback_query.from.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "text": "=Напишите причину отмены рейса:",
        "additionalFields": {}
      },
      "id": "0a44be1b-5534-4181-b051-bdd1ee44c677",
      "name": "прошлое сообщение3",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1060,
        2904.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "status": "inputing_cancel_round_coment"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "61971842-b84f-4d95-9c2d-051fed7fd2bb",
      "name": "статус=ввод комментария",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1280,
        2904.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Часовой пояс Владивостока (UTC+10)\nconst timeZone = 'Asia/Vladivostok';\n\n// Получение текущего года и месяца\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = now.getMonth(); // Текущий месяц (от 0 до 11)\n\nfunction getWeeksOfMonth(year, month) {\n    const weeks = [];\n    \n    // Первая и последняя дата месяца\n    const firstDayOfMonth = new Date(Date.UTC(year, month, 1));\n    const lastDayOfMonth = new Date(Date.UTC(year, month + 1, 0));\n    \n    // Первая неделя начинается с первого дня месяца или ближайшего понедельника\n    let currentWeekStart = new Date(firstDayOfMonth);\n    \n    // Если первый день месяца не понедельник, сдвигаем на предыдущий понедельник\n    const dayOfWeek = currentWeekStart.getUTCDay();\n    if (dayOfWeek !== 1) {\n        currentWeekStart.setUTCDate(currentWeekStart.getUTCDate() - (dayOfWeek === 0 ? 6 : dayOfWeek - 1));\n    }\n    \n    while (currentWeekStart <= lastDayOfMonth) {\n        const currentWeekEnd = new Date(currentWeekStart);\n        currentWeekEnd.setUTCDate(currentWeekStart.getUTCDate() + 6);\n\n        // Добавляем начало и конец недели с учетом часового пояса\n        weeks.push({\n            weekStart: new Date(currentWeekStart.toLocaleString('en-US', { timeZone })),\n            weekEnd: new Date(currentWeekEnd.toLocaleString('en-US', { timeZone }))\n        });\n\n        // Переходим к следующей неделе\n        currentWeekStart.setUTCDate(currentWeekStart.getUTCDate() + 7);\n    }\n    \n    return weeks;\n}\n\nconst weeksOfMonth = getWeeksOfMonth(year, month);\n\nreturn weeksOfMonth;\n"
      },
      "id": "f6fd230e-1beb-4fe6-963b-efd6bf6d7524",
      "name": "недели",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        880,
        3244.938488846612
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "6aed4017-7ff0-432a-bb3b-e86fcb174e7b",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1200,
        3244.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "e8323762-c149-454a-873e-6800ab41fbbc",
      "name": "Replace Me",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2720,
        3684.938488846612
      ]
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "28da8d1d-c609-4be1-9b19-e531f6904f42",
      "name": "по возрастанию",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        1920,
        3304.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4940aeb3-5f27-40c5-8a52-202f6205ef49",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "a82278c4-5f03-44d3-b3d2-e9ba41784e7e",
      "name": "есть данные?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1700,
        3384.938488846612
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "931a838c-62e5-4ea6-bad9-a09eac8b72df",
      "name": "объединяем1",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2300,
        3524.938488846612
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f6926f9-2585-4381-b682-1c2958d4eb91",
              "name": "data",
              "value": "={{ $json.date.toDateTime().setLocale('ru').format('dd.MM ccc') }}: {{ $json.day_type[1] == \"Выходной день\" ? \"\" : $json.car[1] + \" - \" }}{{ $json.day_type[1] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "1bd17d51-836b-4aa6-9ce1-4154a15e4652",
      "name": "создаём строку1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2100,
        3364.938488846612
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f6926f9-2585-4381-b682-1c2958d4eb91",
              "name": "data",
              "value": "=<b>{{ $('недели').item.json.weekStart.toDateTime().format('dd.MM') }} - {{ $('недели').item.json.weekEnd.toDateTime().format('dd.MM') }}</b>\nНет данных",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "111fcbc6-15ca-4e69-8780-258b61fa38aa",
      "name": "создаём строку2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1960,
        3544.938488846612
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "41059292-096c-4ce9-8077-188d3f8db20d",
              "name": "data",
              "value": "=<b>{{ $('Loop Over Items').item.json.weekStart.toDateTime().format('dd.MM') }} - {{ $('Loop Over Items').item.json.weekEnd.toDateTime().format('dd.MM') }}</b>\n{{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "108261a5-e239-41ca-89e1-4c73f6053a53",
      "name": "Добавляем недели",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2520,
        3524.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=График на текущий месяц\n\n{{ $json.concatenated_data }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "back_to_week_schedule"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "60126709-9ab1-4c76-a97d-b0de5a31d3ab",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1700,
        3124.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data",
              "separateBy": "other",
              "customSeparator": "={{ '\\n\\n' }}"
            }
          ]
        },
        "options": {}
      },
      "id": "7ed85229-3583-447d-a5b0-3e5eb6e9975b",
      "name": "отделяем недели",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        1480,
        3144.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## График за месяц",
        "height": 713.4743802342305,
        "width": 1752.3999587655694,
        "color": 6
      },
      "id": "93a878b5-463b-4f73-8777-179b98d093df",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1120,
        3124.938488846612
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0711410c-59a6-406a-a35f-6762937046c6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "list_to",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0711410c-59a6-406a-a35f-6762937046c6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "create_to",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "b3cdc0dd-6641-4b9f-9707-2c0fb3c7e28a",
      "name": "заявки по авто",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        220,
        1944.9384888466118
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "cancel_round",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "e14ed3b3-446f-4596-be20-58b9fdce7618",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "cancel_round_back",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "cda9535a-3ff4-446a-911f-edbe0d2f9750",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "cancel_round_accept",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "37fb79ab-509b-401f-9673-600a11425a93",
      "name": "отмена рейсов",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        580,
        2724.938488846612
      ]
    },
    {
      "parameters": {
        "includeTime": false,
        "options": {}
      },
      "id": "73e8e68d-66ea-4bd8-896c-c46df31f8533",
      "name": "сегодняшняя дата",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        720,
        4044.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "formatDate",
        "date": "={{ $json.currentDate }}",
        "format": "custom",
        "customFormat": "c",
        "options": {}
      },
      "id": "241be8c3-1f3f-4b32-8955-8aa4235babcd",
      "name": "какой сегодня день недели?",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        940,
        4044.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "addToDate",
        "magnitude": "={{ $('сегодняшняя дата').item.json.currentDate }}",
        "duration": "={{ 7 - $json.formattedDate}}",
        "outputFieldName": "endOfWeek",
        "options": {}
      },
      "id": "d6fc28b2-ef1c-414b-9c4f-02991449f25a",
      "name": "конец недели",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1180,
        3924.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "subtractFromDate",
        "magnitude": "={{ $('сегодняшняя дата').item.json.currentDate }}",
        "duration": "={{ $json.formattedDate.toNumber() - 1 }}",
        "outputFieldName": "beginOfWeek",
        "options": {}
      },
      "id": "7010b13f-17d3-4f84-acc6-004c6139ddde",
      "name": "начало недели",
      "type": "n8n-nodes-base.dateTime",
      "typeVersion": 2,
      "position": [
        1180,
        4144.938488846612
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data",
              "separateBy": "\n"
            }
          ]
        },
        "options": {}
      },
      "id": "9a9d3cb9-ab17-409e-8f3f-6b7c3bb0cd96",
      "name": "объединяем",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2660,
        3904.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=График на текущую неделю ({{ $('начало недели').item.json.beginOfWeek.toDateTime().format('dd.MM') }} - {{ $('конец недели').item.json.endOfWeek.toDateTime().format('dd.MM') }})\n\n{{ $json.concatenated_data }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "График за месяц",
                    "additionalFields": {
                      "callback_data": "month_schedule"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "93cac483-b283-4f77-8e88-2cb364ce2fda",
      "name": "Telegram1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2840,
        4124.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "3f6926f9-2585-4381-b682-1c2958d4eb91",
              "name": "concatenated_data",
              "value": "Нет данных",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "18b363c7-c134-421a-a4cd-25228850f16d",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2240,
        4124.938488846612
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e9355f27-7149-4cc4-8672-570d0fcf1912",
              "name": "data",
              "value": "={{ $json.date.toDateTime().setLocale('ru').format('dd.MM ccc') }}: {{ $json.day_type[1] == \"Выходной день\" ? \"\" : $json.car[1] + \" - \" }}{{ $json.day_type[1] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "b3558e17-649d-4d79-a3ed-d5b5698cd806",
      "name": "создаём строку",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2440,
        3904.938488846612
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "5076e9dc-ab73-409b-9ba3-dd59138c9c3b",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1380,
        4044.938488846612
      ]
    },
    {
      "parameters": {
        "sortFieldsUi": {
          "sortField": [
            {
              "fieldName": "date"
            }
          ]
        },
        "options": {}
      },
      "id": "bc632438-bf2d-498b-9c5d-395b2cb11d71",
      "name": "по возрастанию1",
      "type": "n8n-nodes-base.sort",
      "typeVersion": 1,
      "position": [
        2240,
        3904.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4940aeb3-5f27-40c5-8a52-202f6205ef49",
              "leftValue": "={{ $json }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "95847c6a-0abe-4941-8358-dcd9a6d94ca3",
      "name": "есть данные?1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2040,
        4044.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## График недели",
        "height": 380.3105971190758,
        "width": 2358.6878919208334,
        "color": 6
      },
      "id": "8146901a-2d0f-406a-a4e4-79db59c1d5ef",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        684.644892905102,
        3900.520409576686
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "month_schedule",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "007f0b2f-857f-4bff-8730-4fc66f8151d6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "back_to_week_schedule",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "00f6cb8d-13f3-4554-b927-4855950c6ac6",
      "name": "график",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        460,
        3844.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "c4c24897-fcde-4f9d-9790-7da95296169d",
      "name": "No Operation, do nothing1",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        860,
        4704.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "6fd7f912-6343-4272-8027-d3263a70477d",
      "name": "No Operation, do nothing",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        660,
        5524.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные из предыдущего кубика\nconst inputData = items.map(item => item.json);\n\n// Функция для добавления 10 часов ко времени\nfunction addHoursToTime(timeStr, hours) {\n    const dateObj = new Date(timeStr.replace(\" \", \"T\")); // Преобразуем строку времени в объект Date\n    dateObj.setHours(dateObj.getHours() + hours); // Добавляем 10 часов\n    return dateObj.toISOString().replace(\"T\", \" \").split(\".\")[0]; // Преобразуем обратно в строку и убираем миллисекунды\n}\n\n// Функция для подсчета заработка и количества рейсов по датам\nfunction calculateTotalsByDate(data) {\n    const totalsByDate = {};\n\n    data.forEach(entry => {\n        entry.data.forEach(round => {\n            const { driver_rate, driver_with_trailer, time_of_start } = round;\n\n            // Добавляем 10 часов ко времени\n            const adjustedTime = addHoursToTime(time_of_start, 10);\n\n            // Извлекаем только дату из скорректированного времени\n            const date = adjustedTime.split(\" \")[0];\n\n            // Инициализируем данные для каждой новой даты\n            if (!totalsByDate[date]) {\n                totalsByDate[date] = {\n                    total_count: 0,  // Общее количество рейсов\n                    total_earnings: 0  // Общий заработок\n                };\n            }\n\n            // Увеличиваем количество рейсов\n            totalsByDate[date].total_count++;\n\n            // Увеличиваем сумму заработка\n            totalsByDate[date].total_earnings += driver_rate;\n        });\n    });\n\n    // Преобразуем объект в массив для удобства обработки\n    return Object.keys(totalsByDate).map(date => ({\n        date: date,\n        total_count: totalsByDate[date].total_count,\n        total_earnings: totalsByDate[date].total_earnings\n    }));\n}\n\n// Обрабатываем данные\nconst processedData = calculateTotalsByDate(inputData);\n\n// Возвращаем результат для следующего кубика\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "ba0cb591-a619-42c9-a261-a0343f4ecbac",
      "name": "считаем по дням кол-во рейсов и заработок",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        5384.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные из предыдущего кубика\nconst inputData = items.map(item => item.json);\n\n// Функция для обработки данных\nfunction calculateTotals(data) {\n    return data.map(entry => {\n        const { id, quarry_hours, price_for_driver, date, start_time } = entry;\n\n        // Если price_for_driver равен 0 или false, заработок равен 0\n        if (!price_for_driver) {\n            // Добавляем 10 часов к дате\n            const adjustedDate = new Date(start_time);\n            adjustedDate.setHours(adjustedDate.getHours() + 10); // Прибавляем 10 часов\n\n            return {\n                id: id,\n                quarry_hours: quarry_hours,  // Количество карьерных часов\n                total: 0,  // Заработок = 0\n                date: adjustedDate.toISOString(),  // Для вывода используем скорректированную дату\n                original_date: date  // Сохраняем оригинальную дату\n            };\n        }\n\n        // Цена водителя уже итоговая, просто передаем её в результат\n        const total = parseFloat(price_for_driver);\n\n        // Добавляем 10 часов к дате\n        const adjustedDate = new Date(start_time);\n        adjustedDate.setHours(adjustedDate.getHours() + 10); // Прибавляем 10 часов\n\n        return {\n            id: id,\n            quarry_hours: quarry_hours,  // Количество карьерных часов\n            total: total,  // Общий заработок = price_for_driver\n            date: adjustedDate.toISOString(),  // Для вывода используем скорректированную дату\n            original_date: date  // Сохраняем оригинальную дату\n        };\n    });\n}\n\n// Обрабатываем входные данные\nconst processedData = calculateTotals(inputData);\n\n// Возвращаем результат в формате JSON для следующего кубика\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "f82d74f1-0cb0-4d4c-b8a4-14336b50b2c7",
      "name": "считаем часы и заработок",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1740,
        5644.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "97cd69f6-7fe7-4c43-8d0c-25e7c6f6dfcb",
      "name": "соединяем рейсы и работы",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2020,
        5444.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные через items\nconst inputData = items.map(item => item.json);\n\n// Задаем текущую дату для тестирования\nconst today = new Date(); //'2024-10-11T00:00:00'\ntoday.setMinutes(today.getMinutes() + today.getTimezoneOffset() + (10 * 60));\n\n// Определяем начало текущей недели (понедельник текущей недели)\nconst startOfWeek = new Date(today);\nstartOfWeek.setDate(today.getDate() - today.getDay() + (today.getDay() === 0 ? -6 : 1)); // Учитываем воскресенье как последний день недели\n\n// Функция для обнуления времени в дате\nfunction resetTime(date) {\n    const newDate = new Date(date);\n    newDate.setHours(0, 0, 0, 0); // Убираем компоненты времени\n    return newDate;\n}\n\n// Функция для фильтрации данных по дням\nfunction getDailyReport(date) {\n    let totalCount = 0;      // Количество рейсов\n    let totalQuarryHours = 0; // Карьерные часы\n    let totalEarnings = 0;    // Общий заработок за день\n\n    const resetDate = resetTime(date);\n\n    inputData.forEach(entry => {\n        const entryDate = resetTime(new Date(entry.date));\n\n        // Сравниваем даты без учета времени\n        if (entryDate.toISOString().split('T')[0] === resetDate.toISOString().split('T')[0]) {\n            if (entry.total_count !== undefined && entry.total_earnings !== undefined) {\n                totalCount += entry.total_count;  // Суммируем количество рейсов\n                totalEarnings += entry.total_earnings; // Суммируем заработок\n            } else if (entry.quarry_hours !== undefined && entry.total !== undefined) {\n                totalQuarryHours += entry.quarry_hours; // Суммируем карьерные часы\n                totalEarnings += entry.total; // Суммируем заработок за работы в карьере\n            }\n        }\n    });\n\n    return {\n        count: totalCount,\n        quarry_hours: totalQuarryHours,\n        total: totalEarnings\n    };\n}\n\n// Функция для генерации отчета по дням недели\nfunction getCurrentWeekReport() {\n    let textMessage = '📊 <b>Отчет за текущую неделю</b>\\n\\n';\n\n    let currentDate = new Date(today);\n    while (currentDate >= startOfWeek) {\n        const dayReport = getDailyReport(currentDate);\n        const dayOfWeek = currentDate.toLocaleDateString('ru-RU', { weekday: 'long' });\n        const dateStr = currentDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n\n        textMessage += `📅 <b>${dayOfWeek} (${dateStr}):</b>\\n`;\n        if (dayReport.count === 0 && dayReport.quarry_hours === 0) {\n            textMessage += 'Не было перевозок\\n\\n';\n        } else {\n            textMessage += `🚚 Количество рейсов: ${dayReport.count}\\n`;\n            textMessage += `🕑 Карьерные часы: ${dayReport.quarry_hours} ч\\n`;\n            textMessage += `💵 Заработок: ${dayReport.total} руб.\\n\\n`;\n        }\n\n        // Переходим к предыдущему дню\n        currentDate.setDate(currentDate.getDate() - 1);\n    }\n\n    return textMessage;\n}\n\n// Функция для получения отчета за месяц\nfunction getMonthlyReport(startDate, endDate) {\n    let totalCount = 0;\n    let totalQuarryHours = 0;\n    let totalEarnings = 0;\n\n    const start = resetTime(startDate);\n    const end = resetTime(endDate);\n\n    inputData.forEach(entry => {\n        const entryDate = resetTime(new Date(entry.date));\n\n        if (entryDate >= start && entryDate <= end) {\n            if (entry.total_count !== undefined && entry.total_earnings !== undefined) {\n                totalCount += entry.total_count;\n                totalEarnings += entry.total_earnings;\n            } else if (entry.quarry_hours !== undefined && entry.total !== undefined) {\n                totalQuarryHours += entry.quarry_hours;\n                totalEarnings += entry.total;\n            }\n        }\n    });\n\n    return {\n        count: totalCount,\n        quarry_hours: totalQuarryHours,\n        total: totalEarnings\n    };\n}\n\n// Определяем начало и конец текущего месяца\nconst startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\nconst endOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0); // Последний день месяца\n\n// Получаем отчет за текущий месяц\nconst currentMonthReport = getMonthlyReport(startOfMonth, today);\n\n// Проверка на вывод отчета за прошлый месяц\nlet previousMonthText = '';\nconst firstOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\nconst isInFirstTenDays = today >= firstOfMonth && today < new Date(today.getFullYear(), today.getMonth(), 11, 5, 0, 0);\n\n// Если нужно вывести отчет за прошлый месяц\nif (isInFirstTenDays) {\n    const startOfPreviousMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    const endOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Последний день прошлого месяца\n\n    const previousMonthReport = getMonthlyReport(startOfPreviousMonth, endOfPreviousMonth);\n\n    previousMonthText = `\n📊 <b>Отчет за прошлый месяц</b>\n\n🚚 Количество рейсов: ${previousMonthReport.count}\n🕑 Карьерные часы: ${previousMonthReport.quarry_hours} ч\n💵 Заработок: ${previousMonthReport.total} руб.\\n`;\n}\n\n// Формируем отчет за текущую неделю\nlet textMessage = getCurrentWeekReport();\n\n// Формируем отчет за текущий месяц\nlet currentMonthText = `📊 <b>Отчет за текущий месяц</b>\n\n🚚 Количество рейсов: ${currentMonthReport.count}\n🕑 Карьерные часы: ${currentMonthReport.quarry_hours} ч\n💵 Заработок: ${currentMonthReport.total} руб.\\n`;\n\n// Добавляем месячные отчеты\ntextMessage += currentMonthText;\n\n// Добавляем отчет за прошлый месяц в самом конце, если это необходимо\nif (previousMonthText) {\n    textMessage += previousMonthText;\n}\n\n// Возвращаем результат в формате JSON\nreturn [\n    {\n        json: {\n            message: textMessage\n        }\n    }\n];\n"
      },
      "id": "7fe5adb4-697d-4faf-9a60-d07b724546f1",
      "name": "сортируем все данные, считаем итоги, преобразуем в сообщение",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2300,
        5444.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $json.message }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "За месяц",
                    "additionalFields": {
                      "callback_data": "month_stats_reply"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "after_stats"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "d2216fbb-df9e-4bc6-abb5-53bfa7234274",
      "name": "вывод недельной статистики",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2620,
        5444.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "95273258-8a9a-4ccb-b2e3-f598fa74746a",
      "name": "Объединение рейсов в один файл1",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1760,
        4484.938488846612
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из предыдущей ноды\nconst items = $input.all();\n\n// Функция для получения месяца из даты в формате \"YYYY-MM\"\nconst getMonth = (date) => {\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = ('0' + (d.getMonth() + 1)).slice(-2); // Добавляем ведущий ноль к месяцу, если нужно\n  return `${year}-${month}`;\n};\n\n// Обрабатываем каждую запись\nconst result = items.map(item => {\n  const data = item.json;\n\n  // Получаем месяц из date_start (дата старта)\n  const month = getMonth(data.date_start);\n\n  // Возвращаем преобразованные данные\n  return {\n    id: data.id,\n    date: month, // Месяц, соответствующий дате старта\n    required_bonus_amount: data.required_bonus_amount,\n    required_fine_amount: data.required_fine_amount,\n    required_comment: data.required_comment\n  };\n});\n\nreturn result;\n"
      },
      "id": "501bd97b-09fd-4d47-8bde-700d2cce6ff9",
      "name": "преобразуем премии/штрафы",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2040,
        4884.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные из предыдущего кубика\nconst inputData = items.map(item => item.json);\n\n// Функция для добавления 10 часов ко времени\nfunction addHoursToTime(timeStr, hours) {\n    const dateObj = new Date(timeStr.replace(\" \", \"T\")); // Преобразуем строку времени в объект Date\n    dateObj.setHours(dateObj.getHours() + hours); // Добавляем 10 часов\n    return dateObj.toISOString().replace(\"T\", \" \").split(\".\")[0]; // Преобразуем обратно в строку и убираем миллисекунды\n}\n\n// Функция для подсчета заработка и количества рейсов по датам\nfunction calculateTotalsByDate(data) {\n    const totalsByDate = {};\n\n    data.forEach(entry => {\n        entry.data.forEach(round => {\n            const { driver_rate, driver_with_trailer, time_of_start } = round;\n\n            // Добавляем 10 часов ко времени\n            const adjustedTime = addHoursToTime(time_of_start, 10);\n\n            // Извлекаем только дату из скорректированного времени\n            const date = adjustedTime.split(\" \")[0];\n\n            // Инициализируем данные для каждой новой даты\n            if (!totalsByDate[date]) {\n                totalsByDate[date] = {\n                    total_count: 0,  // Общее количество рейсов\n                    total_earnings: 0  // Общий заработок\n                };\n            }\n\n            // Увеличиваем количество рейсов\n            totalsByDate[date].total_count++;\n\n            // Увеличиваем сумму заработка\n            totalsByDate[date].total_earnings += driver_rate;\n        });\n    });\n\n    // Преобразуем объект в массив для удобства обработки\n    return Object.keys(totalsByDate).map(date => ({\n        date: date,\n        total_count: totalsByDate[date].total_count,\n        total_earnings: totalsByDate[date].total_earnings\n    }));\n}\n\n// Обрабатываем данные\nconst processedData = calculateTotalsByDate(inputData);\n\n// Возвращаем результат для следующего кубика\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "92c72f2e-7fa4-4467-9533-ee357b1e77d1",
      "name": "обрабатываем рейсы",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2040,
        4484.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные из предыдущего кубика\nconst inputData = items.map(item => item.json);\n\n// Функция для обработки данных\nfunction calculateTotals(data) {\n    return data.map(entry => {\n        const { id, quarry_hours, price_for_driver, date, start_time } = entry;\n\n        // Если price_for_driver равен 0 или false, заработок равен 0\n        if (!price_for_driver) {\n            // Добавляем 10 часов к дате\n            const adjustedDate = new Date(start_time);\n            adjustedDate.setHours(adjustedDate.getHours() + 10); // Прибавляем 10 часов\n\n            return {\n                id: id,\n                quarry_hours: quarry_hours,  // Количество карьерных часов\n                total: 0,  // Заработок = 0\n                date: adjustedDate.toISOString(),  // Для вывода используем скорректированную дату\n                original_date: date  // Сохраняем оригинальную дату\n            };\n        }\n\n        // Цена водителя уже итоговая, просто передаем её в результат\n        const total = parseFloat(price_for_driver);\n\n        // Добавляем 10 часов к дате\n        const adjustedDate = new Date(start_time);\n        adjustedDate.setHours(adjustedDate.getHours() + 10); // Прибавляем 10 часов\n\n        return {\n            id: id,\n            quarry_hours: quarry_hours,  // Количество карьерных часов\n            total: total,  // Общий заработок = price_for_driver\n            date: adjustedDate.toISOString(),  // Для вывода используем скорректированную дату\n            original_date: date  // Сохраняем оригинальную дату\n        };\n    });\n}\n\n// Обрабатываем входные данные\nconst processedData = calculateTotals(inputData);\n\n// Возвращаем результат в формате JSON для следующего кубика\nreturn processedData.map(entry => ({ json: entry }));\n"
      },
      "id": "eb6ffc9f-54e1-439d-a6b3-a2ac85d66f9a",
      "name": "обрабатываем работы",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1880,
        4684.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "511b2c03-fa2d-477d-ae1b-d39a06e10d65",
      "name": "рейсы+работы",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2340,
        4564.938488846612
      ]
    },
    {
      "parameters": {},
      "id": "b483e9ca-3cb4-44ff-9895-aab85fae88c9",
      "name": "добавляем еще премии/штрафы",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2620,
        4644.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные через items\nconst inputData = items.map(item => item.json);\n\n// Задаем текущую дату с учетом часового пояса Владивостока\nconst today = new Date();//'2024-10-07T00:00:00'\ntoday.setMinutes(today.getMinutes() + today.getTimezoneOffset() + (10 * 60)); // UTC +10 Владивосток\n\n// Функция для обнуления времени в дате\nfunction resetTime(date) {\n    const newDate = new Date(date);\n    newDate.setHours(0, 0, 0, 0); // Убираем компоненты времени\n    return newDate;\n}\n\n// Функция для фильтрации данных по дням\nfunction getDailyReport(date) {\n    let totalCount = 0;      // Количество рейсов\n    let totalQuarryHours = 0; // Карьерные часы\n    let totalEarnings = 0;    // Общий заработок за день\n\n    const resetDate = resetTime(date);\n\n    inputData.forEach(entry => {\n        const entryDate = resetTime(new Date(entry.date));\n\n        // Сравниваем даты без учета времени\n        if (entryDate.toISOString().split('T')[0] === resetDate.toISOString().split('T')[0]) {\n            if (entry.total_count !== undefined && entry.total_earnings !== undefined) {\n                totalCount += entry.total_count;  // Суммируем количество рейсов\n                totalEarnings += entry.total_earnings; // Суммируем заработок\n            } else if (entry.quarry_hours !== undefined && entry.total !== undefined) {\n                totalQuarryHours += entry.quarry_hours; // Суммируем карьерные часы\n                totalEarnings += entry.total; // Суммируем заработок за работы в карьере\n            }\n        }\n    });\n    return {\n        count: totalCount,\n        quarry_hours: totalQuarryHours,\n        total: totalEarnings\n    };\n}\n\n// Функция для получения отчета за неделю\nfunction getWeeklyReport(startDate, endDate) {\n    let totalCount = 0;\n    let totalQuarryHours = 0;\n    let totalEarnings = 0;\n\n    const start = resetTime(startDate);\n    const end = resetTime(endDate);\n\n    inputData.forEach(entry => {\n        const entryDate = resetTime(new Date(entry.date));\n\n        if (entryDate >= start && entryDate <= end) {\n            if (entry.total_count !== undefined && entry.total_earnings !== undefined) {\n                totalCount += entry.total_count;\n                totalEarnings += entry.total_earnings;\n            } else if (entry.quarry_hours !== undefined && entry.total !== undefined) {\n                totalQuarryHours += entry.quarry_hours;\n                totalEarnings += entry.total;\n            }\n        }\n    });\n    return {\n        count: totalCount,\n        quarry_hours: totalQuarryHours,\n        total: totalEarnings\n    };\n}\n\n// Функция для генерации срезов недели, где срезы заканчиваются воскресеньем\nfunction getWeeklySlices(startDate, endDate) {\n    let currentWeekStart = new Date(startDate);\n    let weeklyReports = [];\n    let totalWeeklyEarnings = 0;\n\n    while (currentWeekStart <= endDate) {\n        let currentWeekEnd = new Date(currentWeekStart);\n\n        // Определяем день недели (0 - воскресенье, 6 - суббота)\n        const dayOfWeek = currentWeekStart.getDay();\n\n        // Если это первый день, и он не понедельник, делаем срез только за один день\n        if (dayOfWeek === 0) {\n            currentWeekEnd = new Date(currentWeekStart); // Воскресенье, срез за 1 день\n        } else {\n            currentWeekEnd.setDate(currentWeekStart.getDate() + (7 - dayOfWeek)); // Заканчиваем срез в воскресенье\n        }\n\n        if (currentWeekEnd > endDate) {\n            currentWeekEnd = new Date(endDate); // Ограничиваем конец недели последним днем\n        }\n\n        const report = getWeeklyReport(currentWeekStart, currentWeekEnd);\n        totalWeeklyEarnings += report.total;\n\n        // Формируем текст недели с ведущими нулями для дня и месяца\n        let weekText = `📅 <b>Неделя с ${String(currentWeekStart.getDate()).padStart(2, '0')}.${String(currentWeekStart.getMonth() + 1).padStart(2, '0')} по ${String(currentWeekEnd.getDate()).padStart(2, '0')}.${String(currentWeekEnd.getMonth() + 1).padStart(2, '0')}:</b>\\n`;\n        weekText += `🚚 Количество рейсов: ${report.count}\\n`;\n        weekText += `🕑 Карьерные часы: ${report.quarry_hours} ч\\n`;\n        weekText += `💵 Заработок: ${report.total} руб.\\n\\n`;\n\n        weeklyReports.push(weekText);\n        currentWeekStart.setDate(currentWeekEnd.getDate() + 1); // Начинаем следующую неделю\n    }\n\n    return {\n        weeklyText: weeklyReports.reverse().join(''),\n        totalWeeklyEarnings: totalWeeklyEarnings\n    };\n}\n\n// Функция для получения отчета за прошлый месяц\nfunction getPreviousMonthReport() {\n    const previousMonth = new Date(today.getFullYear(), today.getMonth() - 1, 1);\n    const endOfPreviousMonth = new Date(today.getFullYear(), today.getMonth(), 0); // Последний день предыдущего месяца\n    return getWeeklySlices(previousMonth, endOfPreviousMonth);\n}\n\n// Функция для получения отчета за текущий месяц до текущего дня\nfunction getCurrentMonthReport() {\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n    return getWeeklySlices(startOfMonth, today);\n}\n\n// Функция для подсчета бонусов, штрафов и комментариев\nfunction getMonthlyBonusesAndFines(month) {\n    let bonusAmount = 0;\n    let fineAmount = 0;\n    let comments = [];\n\n    inputData.forEach(entry => {\n        const entryMonth = entry.date;\n\n        if (entryMonth === month) {\n            if (entry.required_bonus_amount && entry.required_bonus_amount !== 0) {\n                bonusAmount += entry.required_bonus_amount;\n            }\n\n            if (entry.required_fine_amount && entry.required_fine_amount !== 0) {\n                fineAmount += entry.required_fine_amount;\n            }\n\n            if (entry.required_comment && entry.required_comment !== false) {\n                comments.push(entry.required_comment);\n            }\n        }\n    });\n\n    return {\n        bonus: bonusAmount,\n        fine: fineAmount,\n        comments: comments\n    };\n}\n\n// Основная логика выбора отчета\nlet textMessage = '';\nlet totalEarnings = 0;\n\nconst dayOfMonth = today.getDate();\nconst hourOfDay = today.getHours();\n\nconst currentMonth = `${today.getFullYear()}-${('0' + (today.getMonth() + 1)).slice(-2)}`;\n\n// Если день месяца с 1 по 11 и время до 5:00 по Владивостоку, показываем прошлый месяц\nif (dayOfMonth < 11 || (dayOfMonth === 11 && hourOfDay < 5)) {\n    textMessage += '📊 <b>Отчет за прошлый месяц</b>\\n\\n';\n    const report = getPreviousMonthReport();\n    textMessage += report.weeklyText;\n\n    const previousMonth = `${today.getFullYear()}-${('0' + today.getMonth()).slice(-2)}`;\n    const bonusesAndFines = getMonthlyBonusesAndFines(previousMonth);\n\n    if (bonusesAndFines.bonus > 0) {\n        textMessage += `💰 Премия: ${bonusesAndFines.bonus} руб.\\n`;\n    }\n    if (bonusesAndFines.fine > 0) {\n        textMessage += `⚠️ Штраф: ${bonusesAndFines.fine} руб.\\n`;\n    }\n    if (bonusesAndFines.comments.length > 0) {\n        textMessage += `📝 Комментарии: ${bonusesAndFines.comments.join(', ')}\\n`;\n    }\n\n    totalEarnings = report.totalWeeklyEarnings + bonusesAndFines.bonus - bonusesAndFines.fine;\n} else {\n    textMessage += '📊 <b>Отчет за текущий месяц</b>\\n\\n';\n    const report = getCurrentMonthReport();\n    textMessage += report.weeklyText;\n\n    const bonusesAndFines = getMonthlyBonusesAndFines(currentMonth);\n\n    if (bonusesAndFines.bonus > 0) {\n        textMessage += `💰 Премия: ${bonusesAndFines.bonus} руб.\\n`;\n    }\n    if (bonusesAndFines.fine > 0) {\n        textMessage += `⚠️ Штраф: ${bonusesAndFines.fine} руб.\\n`;\n    }\n    if (bonusesAndFines.comments.length > 0) {\n        textMessage += `📝 Комментарии: ${bonusesAndFines.comments.join(', ')}\\n`;\n    }\n\n    totalEarnings = report.totalWeeklyEarnings + bonusesAndFines.bonus - bonusesAndFines.fine;\n}\n\nconst finalTotal = totalEarnings;\ntextMessage += `\\n💵 <b>Сумма итого: ${finalTotal} руб.</b>`;\n\nreturn [\n    {\n        json: {\n            message: textMessage\n        }\n    }\n];"
      },
      "id": "75dbf165-30de-4ce2-b77b-f490e06f2411",
      "name": "формируем месячную статистику и преобразуем в сообщение",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2920,
        4644.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('формируем месячную статистику и преобразуем в сообщение').item.json.message }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "week_stats_back"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "96018c34-2b94-497c-8745-792ead99b21c",
      "name": "выводим месячную статистику",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3440,
        4504.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $('формируем месячную статистику и преобразуем в сообщение').item.json.message }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "stats"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "92ebfb1b-731f-4d01-9b7d-5926f4042e6d",
      "name": "выводим месячную статистику1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3440,
        4724.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.data }}",
                    "rightValue": "month_stats_reply",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "a038aa73-8510-436e-bd16-830bbc32976b",
                    "leftValue": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.data }}",
                    "rightValue": "month_stats_inline",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "a0b7c255-1516-482b-ad39-177a7854ed14",
      "name": "разделение запроса и реплай и инлайн",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        3180,
        4644.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## Возврат к недельной статистике реплай",
        "height": 517.269554762983,
        "width": 2216.548831746288
      },
      "id": "f243b39c-4251-4c21-a356-ae96c5eaad77",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        620,
        5304.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## Месячная статистика",
        "height": 674.7443857922335,
        "width": 2975.7520822355536
      },
      "id": "7b136ecd-4932-42bf-a100-ac6d2415bcc1",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        620,
        4424.938488846612
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "month_stats",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "985d41f2-d159-4d0f-8ec8-8e638182474a",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "week_stats_back",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "26a4dc53-4635-470d-8a27-e19711ae97ad",
      "name": "инлайн кнопки для статистики",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        300,
        4704.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{$json.odoo_id}}\n}  ",
        "options": {}
      },
      "id": "c5df8d63-d113-4569-8ed9-d14aaaaac3cf",
      "name": "получаем номер авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        800,
        6084.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "LoKcgINqdEz5MyX2",
          "mode": "id"
        },
        "options": {}
      },
      "id": "840d21fa-04fc-42ce-b47e-b5e34f7b4871",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        2740,
        6264.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_queue",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"car_id\": {{$json.id}}\n}  ",
        "options": {}
      },
      "id": "2bc018c8-0d59-4ac7-956c-f7f7f34b18d3",
      "name": "получаем перевозки из очереди авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1120,
        6084.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_rounds_by_transportation",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"transportation_id\": {{ $json.transportations[0].transportation }}\n}  ",
        "options": {}
      },
      "id": "11946b89-4816-4232-ba98-6ff2b9228755",
      "name": "получаем рейсы в перевозке",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1420,
        6084.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "transportation_rounds",
        "options": {}
      },
      "id": "9c22df5a-9c38-4913-816d-e687cad933e4",
      "name": "разделяем рейсы",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1700,
        6084.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "1be79cd1-4df8-462a-bc43-2e3c34a8bf1f",
              "leftValue": "={{ $json.car[0] }}",
              "rightValue": "={{ $('получаем номер авто').item.json.id }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            },
            {
              "id": "0d370ade-d290-4e87-8089-096b280c37ee",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Выполняется",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "61fe638b-ff76-4316-b3d0-1cc3aa866dfa",
      "name": "берем выполняющийся рейс нужного авто",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1940,
        6084.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "05f1b7dc-c784-4b43-b1d8-1b6ec695e050",
              "leftValue": "={{ $json.cargo_netto }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "36cc077f-9c32-48cd-8302-e90924414741",
      "name": "есть ли запись с весов",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2200,
        6084.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=Подтвердите значение взвешивания - <b>{{ $('есть ли запись с весов').item.json.cargo_netto }}</b> Нетто(Тонны)",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Подтвердить",
                    "additionalFields": {
                      "callback_data": "last"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Другое",
                    "additionalFields": {
                      "callback_data": "material_volume"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "6bbe5658-5228-42ba-9d33-4a99e72c1560",
      "name": "подтверждение взвешивания",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2800,
        6044.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Получаем данные из ноды \"Execute Workflow Trigger\"\nconst triggerData = $node[\"Execute Workflow Trigger\"].json;\n\n// Проверяем и изменяем поле \"callback_query.data\"\nif (triggerData.callback_query && triggerData.callback_query.data === 'check_material_volume') {\n    triggerData.callback_query.data = 'material_volume';\n}\n\n// Возвращаем обновленные данные\nreturn triggerData;\n"
      },
      "id": "5fbc5319-384f-4ea0-9c41-f61796f62250",
      "name": "меняем callback на ввод объема",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2480,
        6264.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## Проверка записи о взвешивании в рейсе",
        "height": 404.17703383081584,
        "width": 2406.118024774483
      },
      "id": "0378e679-2eae-4322-bd4a-3b6dc56e59bb",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        531.555360038049,
        6024.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "22d02c31-2fd8-494a-9406-9bc0830c1a93",
              "leftValue": "={{ $json.callback_query.message.reply_markup.inline_keyboard[0][0].callback_data }}",
              "rightValue": "quarry",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "cdf50c81-c8d1-41dd-96ba-08a8b3ccd202",
      "name": "работа в карьере?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        360,
        684.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.from.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "Вы уверены, что хотите приступить к следующей перевозке?",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Да",
                    "additionalFields": {
                      "callback_data": "next_transportation"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назад",
                    "additionalFields": {
                      "callback_data": "no_transfer_transportation_quarry"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "23497acb-15ca-4141-82ff-aa1e46632070",
      "name": "Завершить для работы",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        600,
        544.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "transportation_to_tail",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "0711410c-59a6-406a-a35f-6762937046c6",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "no_transfer_transportation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d61e0f5b-e253-4f40-87e2-b52b4064f72f",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "next_transportation",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "d41500f9-0e68-45f9-b3c0-18f53e94799a",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "no_transfer_transportation_quarry",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "03aec499-4dd1-4766-a3f6-58fa58fdc7ff",
      "name": "следующая перевозка",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.1,
      "position": [
        80,
        944.9384888466118
      ]
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $json.callback_query.from.id }}",
        "messageId": "={{ $json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "={{ $json.last_message_text }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к работе в карьере",
                    "additionalFields": {
                      "callback_data": "accept_quarry"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {}
      },
      "id": "0aeb3857-547f-4b1c-9d48-fe592b4dbbc6",
      "name": "прошлое сообщение2",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        520,
        1224.9384888466118
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "weight_measure": "={{ $json.cargo_netto }} Тонны "
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ]
        },
        "options": {}
      },
      "id": "c76fd520-c4e8-4d3b-84de-b6a07aa0eb24",
      "name": "записываем объём материала",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.3,
      "position": [
        2500,
        6044.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "driver_id",
              "value": "={{ $json.odoo_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "fa0e6fa4-5e49-4a08-b283-07ccade6c958",
      "name": "данные авто",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        587,
        6714.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "sendLocation",
        "chatId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
        "latitude": "={{ $json.latitude }}",
        "longitude": "={{ $json.longitude }}",
        "replyMarkup": "forceReply",
        "forceReply": {
          "force_reply": false,
          "selective": false
        },
        "additionalFields": {}
      },
      "id": "e0c463e8-5a6c-4ab1-9354-ae8a9b55ef16",
      "name": "координаты1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1027,
        6554.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_coordinates_by_transportation",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "transportation_id",
              "value": "={{ $json.current_transportation[0] }}"
            }
          ]
        },
        "options": {}
      },
      "id": "21106240-883b-4f43-b6c2-273c2f203115",
      "name": "координаты",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        807,
        6714.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "731b3910-a1c3-4f45-a31b-ddfb53321b63",
              "leftValue": "={{ $json.error.message }}",
              "rightValue": "404 - \"{\\\"error\\\": \\\"No coordinates\\\"}\"",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ce594338-75f6-428a-9368-4a84e094d688",
      "name": "тип ошибки",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1020,
        6764.938488846612
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "check_material_volume",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "b109e860-34ed-4c51-ba9f-dba217b0ea8a",
      "name": "проверка наличия взвешивания",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        320,
        6224.938488846612
      ]
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Для данного маршрута нет координат в Odoo"
        }
      },
      "id": "adfec12c-853d-49a0-ab2b-9fca9a51cb62",
      "name": "Нет координат",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1240,
        6744.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "round_active_msg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "3af0f945-6860-493b-8a12-d006f49f3773",
      "name": "айди сообщения в бд",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1467,
        6534.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {}
      },
      "id": "adb8f6f6-73a1-4c9d-b7d8-b3035c2ef774",
      "name": "ответ",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1247,
        6554.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "content": "## Вывод локации",
        "height": 450.2917403700367,
        "width": 1069.6405988984573,
        "color": 6
      },
      "id": "f49666b0-3160-4cd0-b9e6-d4bcdfefd5cf",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        580,
        6464.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $('Execute Workflow Trigger').all()[0].json.odoo_id }}\n} ",
        "options": {}
      },
      "id": "82d34931-1d6c-4acf-9e00-f750e9188ba8",
      "name": "получаем авто по водителю1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        480,
        1024.9384888466118
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_rounds_by_transportation",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"transportation_id\": {{ $json.id }}\n}  ",
        "options": {}
      },
      "id": "3145b956-eae0-45be-9eb6-dc1b46988c59",
      "name": "получаем рейсы в перевозке1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2000,
        564.9384888466118
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "transportation_rounds",
        "options": {}
      },
      "id": "fbcae305-6a41-4cdb-bee2-806a00986388",
      "name": "разделяем рейсы3",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        2280,
        564.9384888466118
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4e6daad3-09a5-487c-9a43-97ca812a0151",
              "leftValue": "={{ $json.driver[0] }}",
              "rightValue": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "6d3842c7-61fa-4371-b748-ed99d98e5289",
      "name": "убираем рейсы пользователя",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2540,
        544.9384888466118
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "f109516a-fff1-4f95-97bd-21229baac10a",
              "leftValue": "={{ $json.driver[0] }}",
              "rightValue": "",
              "operator": {
                "type": "number",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "id": "dbbabd56-e79c-4cdf-a298-ecf09f62da01",
      "name": "убираем рейсы без водителей",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        2760,
        544.9384888466118
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $('Execute Workflow Trigger').all()[0].json.odoo_id }}\n} ",
        "options": {}
      },
      "id": "f7a92090-f4bb-48e3-bba8-046ec0358cb3",
      "name": "получаем авто по водителю2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        720,
        1804.9384888466118
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenances_by_car",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"car_id\": {{ $json.id }},\n  \"start_date\": \"{{ new Date(1970).toDateTime().format('yyyy-MM-dd') }}\",\n  \"end_date\": \"{{ $today.plus(100, 'years').format('yyyy-MM-dd') }}\"\n} ",
        "options": {}
      },
      "id": "5919e958-f069-4db1-9bb6-9c8a5e42f248",
      "name": "получаем все заявки1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        760,
        1584.9384888466118
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e932711f-33b4-456a-a5ca-c2947f0fff80",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Готово",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "505951e7-2033-4338-a20d-51886a012360",
      "name": "заявки со статусом != Готово1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1020,
        1584.9384888466118
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_maintenances_by_car",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"car_id\": {{ $('получаем авто по водителю2').item.json.id }},\n  \"start_date\": \"{{ new Date(1970).toDateTime().format('yyyy-MM-dd') }}\",\n  \"end_date\": \"{{ $today.plus(100, 'years').format('yyyy-MM-dd') }}\"\n} ",
        "options": {}
      },
      "id": "ebd668f8-824d-4a07-b7b5-2d11a8b62f85",
      "name": "получаем все заявки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        3680,
        1464.9384888466118
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "e932711f-33b4-456a-a5ca-c2947f0fff80",
              "leftValue": "={{ $json.status }}",
              "rightValue": "В работе",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "14c303da-2a38-443c-afc6-472da707901f",
      "name": "заявки со статусом В работе",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        3920,
        1464.9384888466118
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_schedules_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $('Execute Workflow Trigger').all()[0].json.odoo_id }},\n  \"start_date\": \"{{ $json.weekStart.toDateTime().format('yyyy-MM-dd') }}\",\n  \"end_date\": \"{{ $json.weekEnd.toDateTime().format('yyyy-MM-dd') }}\"\n} ",
        "options": {}
      },
      "id": "b0e8c8f2-3aaf-46e3-b59e-7b1414da6897",
      "name": "получаем график по водителю",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1360,
        3444.938488846612
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "265b6361-ffb5-4465-a49a-9eaa1571ffda",
      "name": "если нет графика убираем ошибку и отдаем пустую data",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1600,
        3624.938488846612
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "2c2d17e3-fb58-44d2-a68e-f85f16492ab4",
      "name": "если нет графика убираем ошибку и отдаем пустую data1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1800,
        4124.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_schedules_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $('Execute Workflow Trigger').all()[0].json.odoo_id }},\n  \"start_date\": \"{{ $json.beginOfWeek.slice(0, 10) }}\",\n  \"end_date\": \"{{ $json.endOfWeek.slice(0, 10) }}\"\n} ",
        "options": {}
      },
      "id": "c8c890a5-05c1-462a-9219-4d4f4e0d9e21",
      "name": "получаем график по водителю1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1580,
        4044.938488846612
      ],
      "alwaysOutputData": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_rounds_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $json.odoo_id }}\n}  ",
        "options": {}
      },
      "id": "0873fec0-c1a8-408e-b240-6906c0a252ae",
      "name": "получаем рейсы по водителю",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1120,
        4484.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "transportation_rounds",
        "options": {}
      },
      "id": "8344cc9e-516d-4764-a8ae-5a2ef959c6be",
      "name": "разделяем рейсы1",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1340,
        4484.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0d370ade-d290-4e87-8089-096b280c37ee",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Завершен",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "eb2d1b1f-cc28-43f6-8413-99528fce8671",
      "name": "завершенные рейсы",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1560,
        4484.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site//get_quarry_works_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $json.odoo_id }}\n}  ",
        "options": {}
      },
      "id": "26dc99d4-7ec8-4a72-a91b-ba77ecb0eb12",
      "name": "получаем работы по водителю",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1500,
        4684.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_salary_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $json.odoo_id }},\n  \"start_date\": \"{{ new Date(1970).toDateTime().format('yyyy-MM-dd') }}\",\n  \"end_date\": \"{{ $today.plus(100, 'years').format('yyyy-MM-dd') }}\"\n}  ",
        "options": {}
      },
      "id": "15907db9-7b46-4bc3-8d65-aa7bee9c110e",
      "name": "получаем зарплату по водителю",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1440,
        4924.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_rounds_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $json.odoo_id }}\n}  ",
        "options": {}
      },
      "id": "74670791-8385-48ec-b448-0e00512332ca",
      "name": "получаем рейсы по водителю1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        5384.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "transportation_rounds",
        "options": {}
      },
      "id": "cdd19ced-9fc7-41d3-bb31-cd3e6e668487",
      "name": "разделяем рейсы2",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1120,
        5384.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0d370ade-d290-4e87-8089-096b280c37ee",
              "leftValue": "={{ $json.status }}",
              "rightValue": "Завершен",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "149f21fa-bb64-4e92-a2dd-2c63ac98c370",
      "name": "завершенные рейсы1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1340,
        5384.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site//get_quarry_works_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"driver_id\": {{ $json.odoo_id }}\n}  ",
        "options": {}
      },
      "id": "a0809314-79fc-4fb5-862b-d86ffe111c4e",
      "name": "получаем работы по водителю1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1040,
        5624.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "e9b0a86c-3975-4609-939a-3102d8a3a01b",
      "name": "Объединение рейсов в один файл",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1540,
        5384.938488846612
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "navigator",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "id": "aa3ec6da-280d-4029-9e0e-76ced4336047",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        340,
        6944.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_car_by_driver",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "driver_id",
              "value": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "213ea045-ea79-4d31-97d6-af634dec62ed",
      "name": "ищем автомобиль с таким же сотрудником",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1400,
        7104.938488846612
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nlet allItems = [];\n\nfor (let i = 0; i < items.length; i++) {\n    const { transportations, full_quarry_work } = items[i].json;\n\n    if (transportations && Array.isArray(transportations)) {\n        allItems = allItems.concat(transportations);\n    }\n    if (full_quarry_work && Array.isArray(full_quarry_work)) {\n        allItems = allItems.concat(full_quarry_work);\n    }\n}\n\nallItems = allItems.filter(item => item.hasOwnProperty('sequence'));\nallItems.sort((a, b) => a.sequence - b.sequence);\n\nreturn allItems.map(item => ({ json: item }));\n"
      },
      "id": "eeb01547-5110-4050-aacf-c9bc77090e72",
      "name": "Сортировка перевозок и работ в карьере",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1880,
        7224.938488846612
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "e24d83cc-dc2d-4d01-8af3-ff146b515d82",
              "leftValue": "={{ $('Сортировка перевозок и работ в карьере').item.json }}",
              "rightValue": "Срочная",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "d01ce6ac-169c-45ab-82b6-26fa74586123",
      "name": "есть ли перевозка",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2060,
        7224.938488846612
      ]
    },
    {
      "parameters": {
        "resource": "callback",
        "queryId": "={{ $('Execute Workflow Trigger').item.json.callback_query.id }}",
        "additionalFields": {
          "show_alert": true,
          "text": "Для данного авто больше нет перевозок в очереди"
        }
      },
      "id": "cdd9f155-a151-43ab-b072-c21019ee034b",
      "name": "нет в очереди",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2280,
        7224.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst buttons = items.map((item, index) => ({\n    text: `${item.json.display_name.substring(11)}`,\n    callback_data: `T_${item.json.id}` // T - Transportation W - work\n}));\n\nconst inlineKeyboard = {\n    inline_keyboard: [\n        ...buttons.map(button => [button]), // динамические кнопки, каждая строка содержит одну кнопку\n        [{ text: \"Назад ↩️\", callback_data: \"hide_list\" }] // постоянная кнопка\n    ]\n};\n\nconst chatId = $('Execute Workflow Trigger').all()[0].json.callback_query.from.id;\nconst token = '7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo';\nconst url = `https://api.telegram.org/bot${token}/editMessageText`;\n\nconst message = {\n    chat_id: chatId,\n    message_id: $('Execute Workflow Trigger').all()[0].json.callback_query.message.message_id,\n    text: \"Выберите перевозку из списка:\",\n    reply_markup: inlineKeyboard\n};\n\n// Возвращаем данные для запроса\nreturn [\n    {\n        json: {\n            url,\n            message\n        }\n    }\n];\n"
      },
      "id": "4b90eb94-26ea-4d1c-aef9-63299afb6f82",
      "name": "создаём динамически инлайн кнопки",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2280,
        7064.938488846612
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $json.url }}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json.message }}",
        "options": {}
      },
      "id": "d07b1cb2-8b27-4d0d-aaae-b15195f61cdb",
      "name": "отправляем сообщение ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2460,
        7064.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $json.callback_query.message.chat.id }}",
            "last_message_text": "={{ $json.callback_query.message }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "last_message_text",
              "displayName": "last_message_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "logist_notifications",
              "displayName": "logist_notifications",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "creating_transportation",
              "displayName": "creating_transportation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "round_active_msg_id",
              "displayName": "round_active_msg_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "no_taking_shift_logist_notify",
              "displayName": "no_taking_shift_logist_notify",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_template",
              "displayName": "logist_template",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_maintenance",
              "displayName": "current_maintenance",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ]
        },
        "options": {}
      },
      "id": "2dda3c4c-d04a-4709-8af2-0f03aff86f2e",
      "name": "текст сообщения сохраним",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1220,
        7104.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://api.telegram.org/bot7062531188:AAFkpyOiRuXLHFQO8mWKHuftPGglQSruqwo/editMessageText",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ $json }}",
        "options": {}
      },
      "id": "2810e928-8413-4588-91bc-fd05573ae381",
      "name": "возвращаем сообщение",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1400,
        7344.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "var message = JSON.parse($('Execute Workflow Trigger').all()[0].json.last_message_text);\nmessage['chat_id'] = $('Execute Workflow Trigger').all()[0].json.callback_query.message.chat.id;\nreturn message;"
      },
      "id": "ec0581e4-40ee-4d4f-b810-26aaa4b45c0c",
      "name": "создаём прошлое сообщение",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1220,
        7344.938488846612
      ]
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/get_transportation_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "transportation_id",
              "value": "={{ $json.callback_query.data.substring(2).toNumber() }}"
            }
          ]
        },
        "options": {}
      },
      "id": "693a02e1-1f48-4e55-bacc-88f02bd9557a",
      "name": "данные перевозки",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1220,
        7564.938488846612
      ],
      "alwaysOutputData": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "transportation_round[0].driver[1]",
              "separateBy": "\n"
            }
          ]
        },
        "options": {
          "continueIfFieldNotFound": true
        }
      },
      "id": "0c55e301-184f-4fb3-8ffb-6d3db2e6de9d",
      "name": "склеить имена водителей1",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2260,
        7684.938488846612
      ],
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.message.chat.id }}",
        "text": "=<b>На сегодня Вам назначены перевозки в следующем порядке:</b>\n\n{{ $json.combinedMessages }}",
        "replyMarkup": "inlineKeyboard",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к работе в карьере",
                    "additionalFields": {
                      "callback_data": "accept_quarry"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Приступить к следующей перевозке",
                    "additionalFields": {
                      "callback_data": "transportation_to_tail"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "appendAttribution": false,
          "parse_mode": "HTML"
        }
      },
      "id": "f99dca8f-feb1-4fba-9c96-d1d680ea5f9a",
      "name": "Вывод перевозок на день, работа первой",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2980,
        7504.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "operation": "editMessageText",
        "chatId": "={{ $('Execute Workflow Trigger').all()[0].json.callback_query.message.chat.id }}",
        "messageId": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.message_id }}",
        "replyMarkup": "inlineKeyboard",
        "text": "=<b>Ваша текущая перевозка:</b>\n\n{{ $json.combinedMessages }}",
        "inlineKeyboard": {
          "rows": [
            {
              "row": {
                "buttons": [
                  {
                    "text": "Начать рейс",
                    "additionalFields": {
                      "callback_data": "pick"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Назначенные перевозки",
                    "additionalFields": {
                      "callback_data": "transportation_list"
                    }
                  }
                ]
              }
            },
            {
              "row": {
                "buttons": [
                  {
                    "text": "Завершить смену",
                    "additionalFields": {
                      "callback_data": "complete_work"
                    }
                  }
                ]
              }
            }
          ]
        },
        "additionalFields": {
          "parse_mode": "HTML"
        }
      },
      "id": "4fb1dc49-d5e0-427d-9db1-275901ee6bd7",
      "name": "Выводим информацию о перевозке",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [
        2980,
        7704.938488846612
      ],
      "credentials": {
        "telegramApi": {
          "id": "s2yURwRj0JIo9urH",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "compare": "selectedFields",
        "fieldsToCompare": "transportation_round[0].driver[1]",
        "options": {}
      },
      "id": "a794d0a1-9739-4aa0-99d7-6bc2bcd35b83",
      "name": "Remove Duplicates",
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 1.1,
      "position": [
        2100,
        7684.938488846612
      ],
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site//get_round_by_id",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "round_id",
              "value": "={{ $json.rounds }}"
            }
          ]
        },
        "options": {}
      },
      "id": "bfd038f6-f78b-4d41-833a-ad91b0aaf50a",
      "name": "получение рейсов",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1760,
        7684.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7461c3bc-d00a-4c55-abeb-1df6fa8be61f",
              "leftValue": "={{ $json.transportation_round[0].driver[0] }}",
              "rightValue": "={{ $('Execute Workflow Trigger').item.json.odoo_id }}",
              "operator": {
                "type": "number",
                "operation": "notEquals"
              }
            },
            {
              "id": "1f7d17a3-1371-4099-accc-99a175e9238a",
              "leftValue": "={{ $json.transportation_round[0].driver[1] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ef989968-cb5f-41d7-9a7d-cfede7a4c2a0",
      "name": "рейсы в перевозке1",
      "type": "n8n-nodes-base.filter",
      "typeVersion": 2.2,
      "position": [
        1940,
        7684.938488846612
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "fieldToSplitOut": "rounds",
        "options": {}
      },
      "id": "d6f2eecf-7eda-4164-b333-3363b33b1b7c",
      "name": "Split Out",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1620,
        7684.938488846612
      ]
    },
    {
      "parameters": {
        "fieldToSplitOut": "transportation",
        "options": {}
      },
      "id": "980ee7ed-2e21-40f9-9651-66c574cc6076",
      "name": "сама перевозка",
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1420,
        7564.938488846612
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "id": "59535e5a-a775-43bd-94cc-0cee8c20f42b",
      "name": "перевозки+имена1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        2420,
        7584.938488846612
      ]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "tg_users",
          "mode": "list",
          "cachedResultName": "tg_users"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tg_id": "={{ $('Execute Workflow Trigger').item.json.callback_query.message.chat.id }}",
            "end_round_message_id": "={{ $json.result.message_id }}"
          },
          "matchingColumns": [
            "tg_id"
          ],
          "schema": [
            {
              "id": "tg_id",
              "displayName": "tg_id",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "odoo_id",
              "displayName": "odoo_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "only_mech",
              "displayName": "only_mech",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "mech_photo",
              "displayName": "mech_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_id",
              "displayName": "end_request_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "materials_photo",
              "displayName": "materials_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_request_hours",
              "displayName": "end_request_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "car_id_while_inputing",
              "displayName": "car_id_while_inputing",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "fuel_liters",
              "displayName": "fuel_liters",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "weight_measure",
              "displayName": "weight_measure",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_alert_text",
              "displayName": "logist_alert_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "logist_recipient_name",
              "displayName": "logist_recipient_name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "transportation_for_certificate",
              "displayName": "transportation_for_certificate",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo",
              "displayName": "count_weight_photo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "count_weight_photo_sent",
              "displayName": "count_weight_photo_sent",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "current_quarry_hours",
              "displayName": "current_quarry_hours",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "end_round_message_id",
              "displayName": "end_round_message_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "f917ff49-e6f5-48e9-a335-4b5692934dcf",
      "name": "айди последнего сообщения1",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        3180,
        7604.938488846612
      ],
      "credentials": {
        "postgres": {
          "id": "cMlKL7XYShZtUnqo",
          "name": "Everest production"
        }
      }
    },
    {
      "parameters": {
        "url": "https://everest.lamart.site/transportations_by_car",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "cookie",
              "value": "={{ $('Execute Workflow Trigger').item.json.cookie }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"number_car\": {{'\"'+ $json.number_car +'\"'}}\n}  ",
        "options": {}
      },
      "id": "02905cfa-e23f-4b30-b0de-bc560d99e5b2",
      "name": "получение перевозок1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1620,
        7104.938488846612
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "transportation_list",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "b1c324a4-c7a1-45b3-87b9-1a4e2fe23723",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "hide_list",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "d691355a-679a-4c52-bf1d-ff707083292c",
                    "leftValue": "={{ $json.callback_query.data }}",
                    "rightValue": "T_",
                    "operator": {
                      "type": "string",
                      "operation": "startsWith"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "bdf7042a-a4d8-40d5-9922-d0bee3eaf869",
      "name": "Switch1",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        720,
        7404.938488846612
      ]
    },
    {
      "parameters": {
        "jsCode": "let combinedMessages = \"\";\n\nlet index = 1;\nfor (const item of $input.all()) {\n  const data = item.json;\n\n  const isQuarryWork = data.quarry && data.quarry.length > 1;\n\n  let message = \"\";\n\n  if (isQuarryWork) {\n    const quarry = data.quarry[1];\n    const requiredHours = data.required_hours || 0;\n    const comment = data.comment;\n\n    message = `<b>${index}.</b> Работа в карьере - <b>${quarry}</b>`;\n    if (data.end_condition === \"По часам\") {\n      message += `\\nНеобходимое количество часов - <b>${requiredHours}</b>`;\n    }\n    if (comment !== false) {\n      message += `\\nКомментарий - <i>${comment}</i>`;\n    }\n    message += `\\n\\n`;\n  } else {\n    const sender = data.sender && data.sender.length > 1 ? data.sender[1] : \"\";\n    const partner = data.partner && data.partner.length > 1 ? data.partner[1] : \"\";\n    const placeFrom = data.place_from && data.place_from.length > 1 ? data.place_from[1] : \"\";\n    const placeTo = data.place_to && data.place_to.length > 1 ? data.place_to[1] : \"\";\n    let material =data.material[1].replace(/\\s*\\(.*?\\)\\s*/g, \"\");\n    const comment = data.comment;\n    const endCondition = data.end_condition;\n    const requiredCubicMetre = data.required_cubic_metre|| 0;\n    const requiredTon = data.required_ton|| 0;\n\n    let route = placeFrom && placeTo ? `${placeFrom}-${placeTo}` : \"\";\n\n\n    message = `<b>${index}.</b>`;\n    \n    if (sender) message += ` Отправитель - <b>${sender}</b>`;\n    if (partner) message += `\\nПолучатель - <b>${partner}</b>`;\n    if (route) message += `\\nМаршрут - <b>${route}</b>`;\n    if (material) message += `\\nМатериал - <b>${material}</b>`;\n    \n    if (comment !== false) {\n      message += `\\nКомментарий - <i>${comment}</i>`;\n    }\n\n    if (endCondition === \"По перевезенным кубометрам\" && requiredCubicMetre > 0) {\n      message += `\\nТребуемое количество кубометров по перевозке - <b>${requiredCubicMetre}</b>`;\n    }\n\n    if (endCondition === \"По перевезенным тоннам\" && requiredTon > 0) {\n      message += `\\nТребуемое количество тонн по перевозке - <b>${requiredTon}</b>`;\n    }\n\n    message += (item.json.concatenated_transportation_round0_driver1 ? \"\\n\\nВодители, выполняющие перевозку с вами:\\n\" + item.json.concatenated_transportation_round0_driver1 : \"\");\n\n    message += `\\n\\n`;\n  }\n\n  if (index === 1) {\n    message = `<i>${message.trim()}</i>\\n\\n`;\n  }\n\n  combinedMessages += message;\n  index++;\n}\n\nreturn [{ json: { combinedMessages: combinedMessages.trim() } }];\n"
      },
      "id": "b75f4e10-41d7-470a-8d9e-1ba08b3e5a4a",
      "name": "в единое сообщение1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2600,
        7604.938488846612
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "ab898071-c183-48b0-b7b8-9355eebe5abd",
              "leftValue": "={{ $json.combinedMessages }}",
              "rightValue": "<i><b>1.</b> Работа ",
              "operator": {
                "type": "string",
                "operation": "startsWith"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "48dacee3-6205-41ff-aa77-fcaeb04663f5",
      "name": "первой работа или перевозка1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2780,
        7604.938488846612
      ]
    },
    {
      "parameters": {
        "content": "## Список перевозок для водителя",
        "height": 477.10541216841415,
        "width": 1542.7747349919014,
        "color": 6
      },
      "id": "dbdd026a-6c24-494f-bde2-be987cd6a24e",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1149.0293463573803,
        7007.833076678198
      ]
    },
    {
      "parameters": {
        "content": "## Вывод данных выбранной перевозки",
        "height": 384.31634483139203,
        "width": 2130.1950821821715,
        "color": 6
      },
      "id": "9245507c-50a5-4aa4-87d3-1ca76caf9cb8",
      "name": "Sticky Note10",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1167.4753940014234,
        7494.637082657788
      ]
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "update_id": 100635538,
          "callback_query": {
            "id": "3010587258339103617",
            "from": {
              "id": 700956969,
              "is_bot": false,
              "first_name": "Алексей",
              "username": "Chronos196",
              "language_code": "ru"
            },
            "message": {
              "message_id": 28133,
              "from": {
                "id": 7063451965,
                "is_bot": true,
                "first_name": "Everest n8n",
                "username": "myn8nbotbot"
              },
              "chat": {
                "id": 700956969,
                "first_name": "Алексей",
                "username": "Chronos196",
                "type": "private"
              },
              "date": 1731573507,
              "edit_date": 1731573571,
              "text": "График на текущую неделю (11.11 - 17.11)\n\n11.11 пн: А 459 ТЕ - SCANIA - Рабочий день\n12.11 вт: А 459 ТЕ - SCANIA - Рабочий день\n15.11 пт: А 459 ТЕ - SCANIA - Рабочий день\n16.11 сб: А 459 ТЕ - SCANIA - Рабочий день с продленкой\n17.11 вс: Выходной день",
              "reply_markup": {
                "inline_keyboard": [
                  [
                    {
                      "text": "График за месяц",
                      "callback_data": "month_schedule"
                    }
                  ]
                ]
              }
            },
            "chat_instance": "1908726007480408494",
            "data": "month_schedule"
          },
          "tg_id": "700956969",
          "odoo_id": 2,
          "status": "authorized",
          "only_mech": false,
          "mech_photo": false,
          "end_request_id": null,
          "materials_photo": false,
          "end_request_hours": null,
          "car_id_while_inputing": 18,
          "fuel_liters": 50,
          "weight_measure": "15 м3 ",
          "logist_alert_text": null,
          "logist_recipient_name": null,
          "transportation_for_certificate": null,
          "count_weight_photo": 1,
          "count_weight_photo_sent": 0,
          "current_quarry_hours": 10,
          "end_round_message_id": 28118,
          "last_message_text": "Отлично, рейс активен. \n\nКарьер Ключевое - Карьер Ключевое\nЩебень\n\nПо его завершению нажмите на кнопку \"Завершить рейс\"",
          "logist_notifications": false,
          "creating_transportation": null,
          "round_active_msg_id": 28100,
          "cookie": "session_id=c3e4a62a1a8d37aac55955740fe40fb4fbfdb108; Expires=Tue, 11 Nov 2025 06:56:02 GMT; Max-Age=604800; HttpOnly; Path=/"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1",
    "timezone": "Asia/Vladivostok"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-08-26T14:50:05.418Z",
      "updatedAt": "2024-08-26T14:50:05.418Z",
      "id": "6aWMzdObOVIXsJ6y",
      "name": "production"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-12-02T15:34:46.486Z",
  "versionId": "4c304eda-42a1-487f-9c9d-c33955f5ff38"
}